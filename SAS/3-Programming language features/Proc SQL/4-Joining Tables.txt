Intro and type of join
Merging the datasets
Merge rows and columns
Merge more than two datasets

Intro
=====
-Selecting Data from More Than One Table By Using Joins
-Overview of Selecting Data from More Than One Table By Using Joins:
-The data that you need for a report could be located in more than one table. 
-Joining tables enables you to select data from multiple tables as if the data were contained in one table. Joins do not alter the original tables.

-There are two types of joins
1)Inner Joins return a result table for all the rows in a table that have one or more 
matching rows in the other table/tables that are listed in the FROM clause
2)Outer Joins are inner joins that are augmented with rows that did not match with any 
row from the other table in the join. There are three types of outer joins: left, right, and full


Merging the datasets
====================

Inner Join Data: Use Where Clause, Use Inner Join keyword, Comparison Operators
*-----------------------------------------------------------------------------*s
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staffs REPLACE ;
run;

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_positions'
dbms=xlsx out=positions REPLACE ;
run;

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_departments'
dbms=xlsx out=departments REPLACE ;
run;

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys2'
dbms=xlsx out=survey2 REPLACE ;
run;

Inner Join
----------
-An inner join returns only the subset of rows from the first table that matches rows from the second table. 
You can specify the columns that you want to be compared for matching values in a WHERE clause.
-Note that the column names in the SELECT and the WHERE clause are prefixed by their table names or table aliases. 
This is known as qualifying the column names, and it is necessary when you specify columns that have the same name from more than one table. 
Qualifying the column name avoids creating an ambiguous column reference.
-You can order the output of joined tables by one or more columns from either table.

---'without on clause';
proc sql;
	title "list of employees which are attended for the survey1";
	select a.employee_name,
		   a.staff_id,
		   b.staff_id
	from staffs as a , survey1 as b
	where a.staff_id=b.staff_id
	and a.employee_name is not missing
	order by a.staff_id;
quit;
 /*both staff_id = 18 till 20... are not in the result table */

using the inner join clause and ON clause
-----------------------------------------
-The INNER JOIN keywords can be used to join tables. The ON clause replaces the WHERE clause for specifying columns to join. 
-PROC SQL provides these keywords primarily for compatibility with the other joins (OUTER, RIGHT, and LEFT JOIN). 
-Using INNER JOIN with an ON clause provides the same functionality as listing tables in the FROM clause and specifying join columns with a WHERE clause

title 'using on clause';
proc sql;
	title "list of employees which are attended for the survey1";
	select a.employee_name,
		   a.staff_id,
		   b.staff_id
	from staffs as a inner join  survey1 as b
	on a.staff_id=b.staff_id
	where a.employee_name is not missing
	order by a.staff_id;
quit;

Joining Tables Using Comparison Operators
-----------------------------------------
-Tables can be joined by using comparison operators other than the equal sign (=) in the WHERE clause. 

title 'using comparison operators';
proc sql;
	title "joining using the comparison operator";
	select a.employee_name,
		   a.staff_id,
		   b.staff_id
	from staffs as a , survey1 as b
	where a.staff_id < b.staff_id ;
quit;

--restricting
proc sql;
	title "joining using the comparison operator";
	select a.employee_name,
		   a.staff_id,
		   b.staff_id
	from staffs as a , survey1 as b
	where a.staff_id < b.staff_id and b.staff_id=8;
quit;

-In log, NOTE: The execution of this query involves performing one or more Cartesian product joins 
that can not be optimized.
-you see this message when you run a query that joins tables without specifying matching columns 
in a WHERE clause. PROC SQL also displays this message whenever tables are joined by using an 
inequality operator


Inner Join Data: Effect of Missing Values on Join, Use Multiple Matching Columns
*------------------------------------------------------------------------------*
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys'
dbms=xlsx out=survey REPLACE ;
run; /* 2 staff ID missing */

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run;/* 1 staff ID missing */


The Effects of Null Values on Joins
-----------------------------------
-Most database products treat nulls as distinct entities and do not match them in joins. 
-PROC SQL treats nulls as missing values and as matches for joins. 
-Any null will match with any other null of the same type (character or numeric) in a join. therefore, the result is probably not the intended result for the join.
-The tables contain staff_id = . 

/*for Gill, Bill name the staff id is missing*/
proc print data=work.staffs(keep=staff_id employee_name gender store_id );run;
proc print data=work.survey2(keep=staff_id employee_name survey1 survey2);run;
proc sql;
	title 'effect of null values';
	select s1.staff_id,s1.username,s2.survey1,s2.survey2
	from staffs as s1, survey2 as s2
	where s1.staff_id = s2.staff_id;
quit; 

In order to specify only the nonmissing values for the join, use the IS NOT MISSING operator:
---------------------------------------------------------------------------------------------
title 'is not missing operator';
proc sql;
	title 'effect of null values';
	select s1.staff_id,s1.username,s2.survey1,s2.survey2
	from staffs as s1, survey2 as s2
	where s1.staff_id = s2.staff_id
and s1.staff_id is not missing and s2.staff_id is not missing;
quit; 

Creating Multicolumn Joins/Using Multiple Matching Columns to join
------------------------------------------------------------------
-When a row is distinguished by a combination of values in more than one column, use all the necessary columns in the join
-unexpected results --- error/incorrect matching when dup id exist

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys'
dbms=xlsx out=survey REPLACE ;
run; /* 11 staff ID duplicated and 3 staff Id is missing */

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run;/* 1 staff ID missing */

proc print data=work.staff(keep=staff_id employee_name gender store_id );run;
proc print data=work.survey(keep=staff_id employee_name survey1 survey2);run;

unexpected results --- error/incorrect matching when dup id exist
proc sql;
	select s1.staff_id,s1.username,s2.survey1,s2.survey2
	from staff as s1, survey as s2
	where s1.staff_id = s2.staff_id
	and s1.staff_id is not missing and s2.staff_id is not missing;
quit;

-to correct this: by also joining the username columns together.
proc sql;
	select s1.staff_id,s1.username,s2.survey1,s2.survey2
	from staff as s1, survey as s2
	where s1.staff_id = s2.staff_id
	and s1.employee_name=s2.employee_name;
quit;

Inner Join Data: Inner Join More Than Two Tables, Self-Joins
*------------------------------------------------------------*

Selecting Data from More Than Two Tables The data that you need could be located in more than two tables.
---------------------------------------------------------------------------------------------------------

proc sql;
/*retrive the sex, positions from other datasets*/
	select a.employee_name,
		   a.hiredate,
		   a.dob,
			*
	from staff as a,
	     gender as b,
		 position as c
    where a.gender=b.GenderID
	and a.positionid=c.PositionID;
quit;

Showing Relationships within a Single Table Using Self-Joins
-------------------------------------------------------------
-When you need to show comparative relationships between values in a table, it is sometimes necessary 
to join columns within the same table. Joining a table to itself is called a self-join, or reflexive join. 
-You can think of a self-join as PROC SQL making an internal copy of a table and joining the table to its copy.

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run;

proc print data=work.staff(keep=staff_id employee_name gender managerid);run;

proc sql;
select s1.staff_id,
	   s1.employee_name,
	   s1.managerid,
	   s2.employee_name
from staff as s1 , staff as s2
where s2.staff_id=s1.managerid    /*play around with this join */
and s1.staff_id is not missing
order by 1;
run;

Outer Join Data: Left, Right and Full Outer Joins
*-----------------------------------------------*
-Outer joins are inner joins that are augmented with rows from one table that do not match any row from the other table in the join. 
-The resulting output includes rows that match and rows that do not match  from the join's source tables
-Nonmatching rows have null values in the columns from the unmatched table.
-Use the ON clause instead of the WHERE clause to specify the column or columns on which you are joining the tables.

Left join
----------
-A left outer join lists matching rows and rows from the left-hand table (the first table listed in the FROM clause) that do not match any row 
in the right-hand table.
-A left join is specified with the keywords LEFT JOIN and ON

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run; 

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys'
dbms=xlsx out=survey REPLACE ;
run;

/*creating a scenario to for left join */
data staff01(keep=staff_id employee_name);
	set staff(obs=15);
run;/* staff id 3,12,13,15 is there, 16 is not there */

data survey01(keep=staff_id employee_name survey1 survey2);
	set survey(obs=12);
	where employee_name <> 'Digitale, Alfred';
run; /*staff id 3,12,13,15 is not there,16 is there  */

proc print data=work.staff01;run;  
proc print data=work.survey01;run;  

proc sql;
	select s1.staff_id "staff table staff_id",
		   s2.staff_id "survey table staff_id",
		   s1.employee_name,
		   s2.survey1,
		   s2.survey2
	from staff01 as s1 left join survey01 as s2
	on s1.staff_id =s2.staff_id;
run;

Right join
----------
-A right join, specified with the keywords RIGHT JOIN and ON, is the opposite of a left join: nonmatching rows from the right-hand table (the second table listed in the FROM clause) 
are included with all matching rows in the output.

proc sql;
	select s1.staff_id "staff table staff_id",
		   s2.staff_id "survey table staff_id",
		   s1.employee_name,
		   s2.survey1,
		   s2.survey2
	from staff01 as s1 right join survey01 as s2
	on s1.staff_id =s2.staff_id;
run;

Outer join
----------
-A full outer join, specified with the keywords FULL JOIN and ON, selects all matching and nonmatching rows

proc sql;
	select s1.staff_id "staff table staff_id",
		   s2.staff_id "survey table staff_id",
		   s1.employee_name,
		   s2.survey1,
		   s2.survey2
	from staff01 as s1 full join survey01 as s2
	on s1.staff_id =s2.staff_id;
run;

Specialty Joins: cross joins, union joins, and natural joins
*-----------------------------------------------------------*

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run; 

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys'
dbms=xlsx out=survey REPLACE ;
run;

data staff01(keep=staff_id employee_name);
	set staff(obs=15);
run;

data survey01(keep=staff_id employee_name survey1 survey2 survey3);
	set survey(obs=12);
	where employee_name <> 'Digitale, Alfred';
run;

Cross join
----------
-Including All Combinations of Rows with the Cross Join
-A cross join is a Cartesian product; it returns the product of two tables. 
-Like a Cartesian product, a cross join's output can be limited by a WHERE clause

proc sql;
	select s1.staff_id "staff table staff_id",
		   s2.staff_id "survey table staff_id",
		   s1.employee_name "staff table employee Id",
		   s2.employee_name "survey table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 cross join survey01 as s2 ;
run;

union joins
-----------
-Including All Rows with the Union Join
-A union join combines two tables without attempting to match rows. 
-All columns and rows from both tables are included. Combining tables with a union join is similar to combining them with the OUTER UNION set operator. 
-A union join's output can be limited by a WHERE clause.

proc sql;
	select s1.staff_id "staff table staff_id",
		   s2.staff_id "survey table staff_id",
		   s1.employee_name "staff table employee Id",
		   s2.employee_name "survey table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 union join survey01 as s2 ;
run;

natural joins 
-------------
-The advantage of using a natural join is that the coding is streamlined. The ON clause is implied, and you do not need to use table aliases to 
qualify column names that are common to both tables
-A natural join assumes that you want to base the join on equal values of all pairs of common columns.
-The following two queries return the same results:

using Natural join.
proc sql;
	select s1.staff_id "left table staff_id",
		   s2.staff_id "left table staff_id",
		   s1.employee_name "left table employee Id",
		   s2.employee_name "left table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 natural join survey01 as s2 ;
run;

-The advantage of using a natural join is that the coding is streamlined. 
-The ON clause is implied, and you do not need to use table aliases to 
-qualify column names that are common to both tables.
-A natural join assumes that you want to base the join on equal values of  all pairs of common columns. 
-The following two queries return the same results:

title 'Left join';
proc sql;
	select s1.staff_id "left table staff_id",
		   s2.staff_id "left table staff_id",
		   s1.employee_name "left table employee Id",
		   s2.employee_name "left table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 left join survey01 as s2
	on s1.staff_id = s2.staff_id;
run;

title 'natural join';
proc sql;
	select s1.staff_id "left table staff_id",
		   s2.staff_id "left table staff_id",
		   s1.employee_name "left table employee Id",
		   s2.employee_name "left table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 natural left join survey01 as s2 ;
run;

-If you specify a natural join on tables that do not have at least one column  with a common name and type, then the result is a Cartesian product. 
-You can use a WHERE clause to limit the output.
-Because the natural join makes certain assumptions about what you want to accomplish, you should know your data thoroughly before using it. You could get unexpected or 
incorrect results.
-You can use the FEEDBACK option to see exactly how PROC SQL is implementing your query.

/feeedbacd options**/
title 'feedback join';
proc sql feedback;
	select s1.staff_id "left table staff_id",
		   s2.staff_id "left table staff_id",
		   s1.employee_name "left table employee Id",
		   s2.employee_name "left table employee Id",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3
	from staff01 as s1 natural left join survey01 as s2 ;
run;

Ref:
https://www.lexjansen.com/scsug/2017/One-to-one-One-to-many-and-Many-to-many-Joins-Using-PROC-SQL-SCSUG-2017.pdf


Comparison of DATA Step Match-Merges with PROC SQL Joins: Part 1
*--------------------------------------------------------------*
intro
------
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run; 

proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys'
dbms=xlsx out=survey REPLACE ;
run;

-Many SAS users are famililar with using a DATA step to merge data sets. This section compares merges to joins.
-DATA step match-merges and PROC SQL joins can produce the same results. However, a significant difference between a match-merge and a join is that you do 
not have to sort the tables before you join them.
-When all of the values match: when all of the values match in the BY variable and there are no duplicates by variables you can use an inner join to produce the same results as match-merge.

data staff01(keep=staff_id employee_name);
	set staff(obs=15);
	where staff_id not in (3,12,13,15);
run;/* staff id 3,12,13,15 is there, 16 is not there */

data survey01(keep=staff_id employee_name survey1 survey2 survey3);
	set survey(obs=12);
	where employee_name <> 'Digitale, Alfred' and staff_id <> 16;
run; /*staff id 3,12,13,15 is not there,16 is there  */ 

title 'PROC SQL';
proc sql;
	select * 
	from staff01 as s1 inner join survey01 as s2
	on s1.staff_id =s2.staff_id;
quit;

/* match merge */.
title 'match-merge';
proc sort data=staff01;
	by staff_id;
run;
proc sort data=survey01;
	by staff_id;
run;

data staff01survey01;
	merge staff01 survey01;
	by staff_id;
run;

proc print data=staff01survey01;
	title'data step match merge';
run;

-when only some of the values match:
-when only some of the values match in the BY variable you can use an outer join to produce the same result as match-merge

proc sort data=staff(keep=staff_id employee_name);
	by staff_id;
run;

proc sort data=survey(keep=staff_id employee_name survey1 survey2 survey3);
	by staff_id;
run;

data staffsurveymerge;
	merge staff survey;
	by staff_id ;
run;
proc print data=staffsurveymerge;
	title 'Data step match merge';
run;

-to ge the same result with PROC SQL, use an outer join so that query result will contain the non-matching rows from tht two tables.
in additions , use the calesce function to overlay the stu_id columns from both tables.
COALESCE takes a list of columns as its arguments and returns the first non missing value that it encounters

title 'proc sql';
proc sql;
	select s1.staff_id "staff id for staff table", 
		   s2.staff_id "staff id for survey table",
		   s1.employee_name "employeename id for staff table",
		   s2.employee_name "employeename id for survey table",
		   s2.survey1,
		   s2.survey2,
		   s2.survey3,
		   s2.survey4
	from staff1 s1 full join survey1 s2
	on s1.staff_id=s2.staff_id;
quit;

proc sql;
	title 'proc sql using coalesce';
	select coalesce(s1.staff_id,s2.staff_id) as staff_id,
		   coalesce(s1.employee_name,s2.employee_name) as employee_name,
		   s2.survey1,
		   s2.survey2,
		   s2.survey3,
		   s2.survey4
	from staff1 s1 full join survey1 s2
	on s1.staff_id=s2.staff_id;
quit;


Merge rows and columns
======================
Generally concating the rows generally we using the union operator which will be study in chapt 7

for columns like horizontal stacking. using joins.

Ref:
http://www.wiilsu.org/NextConference/SUSJun2017/Proceedings/Slides/Shankar%20-%20Stacking%20Up%20-%20Horizontal%20or%20Vertical%20with%20PROC%20SQL%20or%20DATA%20Step.pdf

Merge more than two datasets
============================
-this is based on the requirement you have either 
Selecting Data from More Than Two Tables The data that you need could be located in more than two tables.
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_staffs'
dbms=xlsx out=staff REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_genders'
dbms=xlsx out=gender REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_positions'
dbms=xlsx out=position REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_departments'
dbms=xlsx out=departments REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_addresses'
dbms=xlsx out=address REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_citys'
dbms=xlsx out=city REPLACE ;
run;
proc import datafile='C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_countrys'
dbms=xlsx out=country REPLACE ;
run;

proc print data=work.staff(keep=staff_id username gender positionid address_id depid store_id);run;
proc print data=work.gender(keep=GenderID sex);
proc print data=work.position(keep= positionId position);run;
proc print data=work.departments(keep=Deptid department);run; 
proc print data=work.address(keep=address_id address city_id); run;
proc print data=work.city(keep=city_id city country_id); run;
proc print data=work.country(keep=country_id country); run;

proc sql ;
/*validate  - use to valide the PROC SQL Syntax*/
	select distinct
		   s1.staff_id,
		   s1.employee_name, 
		   g1.sex,
		   p1.position, 
		   d1.department,
		   a1.address,
		   c1.city,
		   c2.country
	from staff as s1 , position as p1,gender as g1,departments as d1,address as a1,city as c1,country as c2
	where s1.positionid=p1.positionid
	and s1.depId=d1.Deptid
	and s1.address_id=a1.address_id 
	and s1.gender=g1.genderid
	and a1.city_id=c1.city_id
	and c1.country_id=c2.country_id
	and s1.staff_id is not missing
	order by 1;
quit;


Quiz
====

Assignment
==========


Resources:
=========