Syntax errors: misspelled keywords, unmatched ' ', missing ; , invalid option
Logic Error: PUTLOG statement, ERROR statement, temporary variables N and ERROR
Quiz 

Syntax errors: misspelled keywords, unmatched ' ', missing ; , invalid option
=============================================================================
Error Handling: identify & correct errors:

Types of Errors
SAS can detect several types of errors. Here are two common ones:
•	syntax errors that occur when program statements do not conform 
to the rules of the SAS language, such as spelling mistake, missing RUN statement,
missing semicolon,  or unbalanced quotation mark

•	semantic errors that occur when you specify a language element that is 
not valid for a particular usage (invalid option)

When a program that contains an error is submitted, messages about the error appear 
in the Log window. Here is what SAS does:
•	displays the word ERROR
•	identifies the possible location of the error
•	gives an explanation of the error

In SAS studio:
1.To correct errors in programs, edit them in the code editing window. 
2. Resubmitting a Revised Program 
(SAS studio clears the messages from the previous submission in the Log window )
(If you are working in the SAS windowing environment, it is a good idea 
to clear the messages from the Log window before resubmitting the program 
so that you do not confuse the old error messages with the new messages.)
3. Remember to check the Log window again to verify that your program ran correctly.

proc import datafile = "C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys" 
DBMS = xlsx out = surveys replace  ;
run;

DATA surveys1;
   set surveys;                                           
   Averagesurvey = mean (survey1 , survey2 , survey3,survey4);      
   If Averagesurvey > 2;
run;

/*syntax errors*/
/*misspelled keyword*/
Proc mean data = surveys1;
var Averagesurvey;
run;

unmatched quotation marks
-------------------------
Sometimes a warning appears in the SAS log that indicates the following:
•	A quoted string has become too long.
•	A statement that contains quotation marks (such as a TITLE or FOOTNOTE statement) 
is ambiguous because of invalid options or unquoted text.
Sometimes, you don't even see warnings in LOG 

To correct, in SAS Studio, simply add the balancing quotation mark 
and resubmit the program. 
(However, in some environments, you may need to resolve the unbalanced quotation mark 
by canceling the submitted statements)*/

Proc means data = surveys1;
var Averagesurvey;
title 'info on average score;
run;

need to delete the quotation mark after score to create a unbalanced quotation mark error*/
run;

Proc means data = surveys1;
var Averagesurvey;
title 'info on average score';
run;

missing semicolons ; 
---------------------
When you omit a semicolon, SAS reads the statement that lacks the semicolon 
(along with the following statement) as one long statement.

-- Find the statement that lacks a semicolon. You can usually find it 
by looking at the underscored keywords in the error message and working backward*/

DATA surveys1;
   set surveys;                                           
   Averagesurvey = mean (survey1 , survey2 , survey3,survey4);      
   If Averagesurvey > 2
run;

semantic errors:
------------------
Invalid option
An invalid option error occurs when you specify an option 
that is not valid in a particular statement. 

When a SAS statement that contains an invalid option is submitted, a message 
appears in the Log window indicating that the option is not valid or not recognized.

Proc means data = surveys1 label; 
var Averagesurvey;
title 'info on average score';
run;

Logic Error: PUTLOG statement, ERROR statement, temporary variables N and ERROR
===============================================================================
Error Handling: identify & correct errors:
------------------------------------------ 
The PUTLOG Statement
The Basics of Logic Errors:
A logic error occurs when the program statements execute, 
but produce incorrect results. Because no notes are written to the log, 
logic errors are often difficult to detect. 
Use the PUTLOG statement in the DATA step to help identify logic errors.

In PULOG, we will use the named output to display/write the value of variables, or formatted values, 
or to write values of all variables

the named output: list the variable name followed by an equal sign.
For example, this PUTLOG statement

putlog name= age=;
writes the values for NAME and AGE to the SAS log: 

name=Peterson age=21
name=Morgan age=17

*/
proc import datafile = "C:\GBAG_Back\pyworkspace\datasets\sakila_datasets-xlsx\sakila_surveys" 
DBMS = xlsx out = surveys replace ;
run; /*look at data*/

/*Example 1: The DATA Step Produces Wrong Results 
but There Are No Error Messages*/
DATA surveys1;
   set surveys;                                           
   AverageSurvey = mean (survey1 + survey2 + survey3+ survey4);      
PUTLOG 'the survey infomation: ' employee_name= survey1= survey2= survey3= survey4= AverageSurvey= 5.2;
/*Use PUTLOG to write the value of a variable, formatted values, or to write values of all
variables*/
   If AverageSurvey <60; /*with Conditional logic*/
RUN;

/*correct and then resubmit*/
DATA surveys1_c;
   set surveys;                                           
   AverageSurvey = mean (survey1 , survey2 , survey3, survey4);       
   If AverageSurvey <60; /*with Conditional logic*/
   PUTLOG 'WARNING: Score below the minimum: ' employee_name= survey1= survey2= survey3= survey4= AverageSurvey= 5.2; 
/*PUTLOG: with Conditional logic*/
RUN;

/* Use temporary variables N and ERROR to debug a DATA step:
_N_ 
The number of times the DATA step iterated
Displays debugging messages for a specified number of iterations of the DATA step
_ERROR_

Initialized to 0, set to 1 when an error occurs

Displays debugging messages when an error occurs 

ERROR statement
The ERROR statement sets the automatic variable _ERROR_ to 1. 
Writing a message that you specify to the SAS log is optional. 
When _ERROR_ = 1, SAS writes the data lines that correspond to 
the current observation in the SAS log.*/

DATA surveys1_e;
   set surveys; 
   AverageSurvey = mean (survey1 + survey2 + survey3+ survey4);      
   Error '???' employee_name= survey1= survey2= survey3= survey4= AverageSurvey= 5.2; 
   If AverageSurvey <2; /*with Conditional logic*/
RUN;