Introduction
Anotomy of functions
Function Types
Returning a result
Returning a multiple values
Function overriding and overloading
local and global variables
Nested Statements and Scope
assigning function to a variable
function inside another function
function as paramter to an other 
Returing the function
pass any type
recursion
keyword argument
default arguments
returning variable number of argument
Built in Functions
Quiz
Assignment
Resources

Introduction
=============
-A set of statements which are organized together to perform a specific task is known as a function
-R provides a series of in-built functions, and it allows the user to create their own functions. Functions are used to perform tasks in the modular approach
-Functions are used to avoid repeating the same task and to reduce complexity
-To understand and maintain our code, we logically break it into smaller parts using the function. A function should be
*Written to carry out a specified task.
*May or may not have arguments
*Contain a body in which our code is written
*May or may not return one or more output values

Anotomy of functions
===================
syntax:
func_name <- function(arg_1, arg_2, ...) {  
   Function body   
}  


There are four components of function, which are as follows:
*Function Name
*Arguments
*Function Body
*Return value

-Function Name
The function name is the actual name of the function. In R, the function is stored as an object with its name.
-Arguments
In R, an argument is a placeholder. In function, arguments are optional means a function may or may not contain arguments, and these arguments can have default values also. We pass a value to the argument when a function is invoked.
-Function Body
The function body contains a set of statements which defines what the function does.
-Return value
It is the last expression in the function body which is to be evaluated.


example1 :

#design the function without argument
firstprog <- function(){
  paste("Hello world")
}

#invoking the function
firstprog()

Function Types
==============
-Similar to the other languages, R also has two types of function, i.e. Built-in Function and User-defined Function. 
-In R, there are lots of built-in functions which we can directly call in the program without defining them. R also allows us to create our own functions

Built-in function
-----------------
The functions which are already created or defined in the programming framework are known as built-in functions

#print the seq from 4 to 20
print(seq(4,20))

#finding the mean from 10 to 20
print(mean(10:20))

#sum of the number in range
print(sum(10:20))

*refer the number and string functions in the fundamental modules

User defined function
---------------------
-R allows us to create our own function in our program
-A user defines a user-define function to fulfill the requirement of user


function without an argument
*--------------------------*
#write a function to find the square of number within that range

new.square <- function(){
  for (i in 1:5){
    print(i^2)
  }
    
}

#calling the function
new.square()


function with an argument
*------------------------*
#write a function to find the square of number within that range

new.square <- function(b){
  for (i in 1:b){
    print(i^2)
  }
  
}

#calling the function with arugment for b
new.square(10)


Function calling with Argument Values
*------------------------------------*
new.reslt <- function(a,b,c){
  result <- a*b+c
  print(result)
}

#calling the function with position
new.reslt(4,3,5)

Returning a result
==================
function returning the value based on the return function

check <- function(x){
  if(x>0)
    result <- "postive"
  else if (x<0)
    result <- "negative"
  else
    result <-"zero"
  return(result)
}

#calling the function
check(4)

Now the question is what is the diff between Return and Print .
The return keyword allows you to actually save the result of the output of a function as a variable. The print() function simply displays the output to you, and also save to the varible

#lets take an example
check <- function(x){
  if(x>0)
    result <- "postive"
  else if (x<0)
    result <- "negative"
  else
    result <-"zero"
  
  #return(result)
  print(result)
}

#invoking the functions 
#calling the function
check(4)
#val <- check(4)
val <- check(4) #store the value
val

Returning a multiple values
=============================
#using return function use only single object not multiple value
cal <- function(a,b){
  sum=a+b
  sub=a-b
  mul=a*b
  div=a/b
  return(sum,sub,mul,div)
}

#calling the function
cal(4,3)


#Use a list to return multiple values
cal <- function(a,b){
  sum=a+b
  sub=a-b
  mul=a*b
  div=a/b
  my_list <- list(sum,sub,mul,div)
  return(my_list)
}

#calling the function
cal(4,3)
Function overriding and overloading
===================================
Overiding
---------
#in this the it takes the latest method from the top to down approach
add <- function(a,b){
  sum=a+b
  paste("add1",sum)
}

add <- function(b,c){
  sum=b+c
  paste("add2",sum)
}

add(4,3)

Overloading
-----------
add <- function(a,b){#here the the same function name but different arguments
  sum=a+b
  paste("add1",sum)
}

add <- function(a,b,c){  #here the the same function name but different arguments
  sum=a+b+c
  paste("add2",sum)
}

add(4,3)
#Thatâ€™s because methods and functions in R are limited to one function signature per name

local and global variables
============================
-if there is a local variable inside the function, local variables takes the precidence then the global variable.
-if there is no local variables, the global variables take precedence

Example
x = 66

#function  that return the value
display <- function() {
  print(x) #accessgin the global variable
  x=32
  paste('changed local x to ',x)
}

#invoking the functions
display() #calling the function which as local variable
paste(a) #accessing the global variable

Nested Statements and Scope
===========================
Now that we have gone over writing our own functions, it's important to understand how R deals with the variable names you assign. 
When you create a variable name in R the name is stored in a name-space. Variable names also have a scope, the scope determines the visibility of that variable name to other parts of your code.

#ex1: checking the local and global variable
a = 421
display <- function(){
  a = 32    #local variables
  paste(a)
}

display()
paste(a)

This idea of scope in your code is very important to understand in order to properly assign and call variable names.
In simple terms, the idea of scope can be described by 3 general rules:

-Name assignments will create or change local names by default.
-Name references search (at most) four scopes, these are:
*local
*enclosing functions
*global
*built-in
-Names declared in global and nonlocal statements map assigned names to enclosing module and function scopes.

Local
-----
When you declare variables inside a function definition, they are not related in any way to other variables with the same names used outside the function - i.e. variable names are local to the function. 
This is called the scope of the variable. 
All variables have the scope of the block they are declared in starting from the point of definition of the name.

x = 66

#function  that return the value
display <- function(x) {
  paste('x is ', x) #accessgin the passing value which will be local
  x=32
  paste('changed local x to ',x)
}

display(9) #calling the function which as local variable
paste(x) #accessing the global variable


Enclosing function locals
-------------------------
name = 'This is a global name'

greet <- function() {
    name = 'Sammy'  # Enclosing function
    print(name) 
    great1 <- function(){ 
      paste('Hello ',name)
    } 
    great1()
}

greet()
greet1() #cannot access the einner function 


Globals functions:
------------------
If you want to assign a value to a name defined at the top level of the program (i.e. not inside any kind of scope such as functions or classes), 
then you have to tell R that the name is not local, but it is global. We do this using the global statement. 
It is impossible to assign a value to a variable defined outside a function without the global statement

b = 66 #global variables

#function  that return the value
display <- function(x) {
  x=32
  paste('local and global ',x,b)

#invoking the functions
display()


Using global assignment operator:
display <- function() {
  num1<<-32 #this values stores globally using <<- operator
}

display() #calling the function
num1 #now access as a global varible

assigning function to a variable
==================================
a=421 #global variables

#function  that return the value
display <- function(){
  print(a) #accessing the global variables
  a=32
  return(a) #accessing the global variables
}

#invoking the functions
print(a) 
z=display() #assining a function to a variable, then that variable behaves like a functions
z #stored the actual value

function inside another function
================================

display <- function(name){
  message<- function(){  #inner functions
    print("hello")
  }
  result = paste(message()," ",name)
  return(result)
}

display("ganesh")

function as paramter to an other
================================

ex:
display <- function(name) {  #first function
  paste("Hello",name)
  #return("Hello",name) #not permitted in R
}

name<- function(){ #second functions
  return("ganesh")
}

#calling other function as paramter
display(name())

Returing the function
=====================

display <- function() {
  message <- function() {
    return("hello")
  }
  return(message()) #returing a function to caller of the functions
}

fun <-display()
fun

pass any type
=============
-pass any type to a functions

## regular case
foo <- function(a, b, c)  a + b - c ## does something
foo2 <- function(b, c)  b + c ## also some function
foo(a=1, b=2, c=5)  #names argument
foo2(b=2, c=5)  ## repeating list of multiple arguments

## passing a list
arg.list <- list(b=2, c=5)
arg.list
arg.list <- list(5,4)
arg.list
do.call(foo, c(list(a=1), arg.list))
do.call(foo2, arg.list)

#does not work in this fashion
display <- function(lst) {
  print(class(lst))
  for(i in lst){
    print(i)
  }
}

aa = list(1,3,4,5,3)
do.call(display,aa)

recursion
=========
fact <- function(num){
  factorial = 1
  # check is the number is negative, positive or zero
  if(num < 0) {
    print("Sorry, factorial does not exist for negative numbers")
  } else if(num == 0) {
    print("The factorial of 0 is 1")
  } else {
    for(i in 1:num) {
      factorial = factorial * i
    }
    print(paste("The factorial of", num ,"is",factorial))
  }
}

fact(4)

#using the factorial function instead of above custom functions
factorial(4)

Named argument(keyword)
================
-changing the argument values based on the named assignment

average <- function(a=20,b=40){
  print(a)
  print(b)
  return(a+b/2)
}

average(10,20)  #normal call type
average(a=30,b=20)
average(b=22,a=23)#interchanging the keyword argument

default arguments
=================

average <- function(a=20,b=40){
  print(a)
  print(b)
  return(a+b/2)
}

average() 
average(b=43) 

Returning variable number of argument
=====================================
#a is vector
sum <- function(a){
  return(a*5)
}

do.call(sum,list(c(3,3,2)))

Built in Functions
==================
all() and any()
---------------
all() and any() are built-in functions in R that allow us to conveniently check for boolean matching in an iterable. all() will return True if all elements in an iterable are True. It is the same as this function code:
x <- 1:10
any(x < 8)
any(x > 11) 

all(x < 8)
all(x > 8)
all(x > 11) 

Quiz:
=====
1.What is the difference between return the value and printing the value?
2.what is the difference between print and paste functions

Assignment:
===========
a)Define a function myfunc that takes in a name and prints "Hello Name" Note: Do not use f-string
b)Define a function that takes a boolean value (True or False). if True 'Hello' and if False , return 'Goodbye'
c)Define a functions that takes three arguments x, y , z (any value as boolean literals), if z is true , return x. if z if false, return y.
d)Define a functions that takes one argument and returns True if passed in value is even, False if it is not.
e)Define a functions that takes two argument and returns True if the first value is greater that the second ,False if it is less then.
f)Write a function that computes the volume of a sphere given its radius
g)Write a function that checks whether a number is in a given range (inclusive of high and low)
h)Write a  function that accepts a string and calculates the number of upper case letters and lower case letters.
	Sample String : 'Hello Mr. Rogers, how are you this fine Tuesday?'
	Expected Output : 
	No. of Upper case characters : 4
	No. of Lower case Characters : 33
i)Write a  function that takes a list and returns a new list with unique elements of the first list.
	Sample List : [1,1,1,1,2,2,3,3,3,3,4,5]
	Unique List : [1, 2, 3, 4, 5]
j)Write a  function to multiply all the numbers in a list.
	Sample List : [1, 2, 3, -4]
	Expected Output : -24
k)Write a  function that checks whether a word or phrase is palindrome or not
Note: A palindrome is word, phrase, or sequence that reads the same backward as forward, 
e.g., madam,kayak,racecar, or a phrase "nurses run". Hint: 
You may want to check out the .replace() method in a string to help out with dealing with spaces.
Also google search how to reverse a string in R, there are some clever ways to do it with slicing notation
L)Write a R function to check whether a string is pangram or not. (Assume the string passed in does not have any punctuation)
	Note : Pangrams are words or sentences containing every letter of the alphabet at least once.
	For example : "The quick brown fox jumps over the lazy dog"
	Hint: You may want to use .replace() method to get rid of spaces.
	Hint: Look at the string module(https://stackoverflow.com/questions/16060899/alphabet-range-in-python)
	Hint: In case you want to use set comparisons(https://medium.com/better-programming/a-visual-guide-to-set-comparisons-in-python-6ab7edb9ec41Z)
i)Write a funciton that takes arbitrary number of arguments and returns a list contianing only those arguments that are even.
	ex: myfun(45,44,3,4,6) --> [44,4,6]
j)Write a function that takes in a string and returns a matching string where every even letter is uppercase and every odd letter is lower .
	ex: myfun('ganeshbabu') --. 'GaNeShBaBu'

--------------------
1)create a function and prints only the even values
2)create a function which returns the even values and stored in a variable
3)create a functions which returns the list of even numbers
4)create a functions which returns the list of even numbers or odd numbers
5)Create a function where The employee of the month function will return both the name and number of hours worked for the top performer (judged by number of hours worked).
	work_hours = [('Abby',100),('Billy',400),('Cassie',800)]
6)Write a function that returns the lesser of two given numbers if both numbers are even, but returns the greater if one or both numbers are odd.
	lesser_of_two_evens(2,4) --> 2
	lesser_of_two_evens(2,5) --> 5
7)Write a function takes a two-word string and returns True if both words begin with same letter
	lettercheck("Dalai Lama") --> False
	lettercheck("Ganjan Gang") --> True
8)Given two integers, return True if the sum of the integers is 20 or if one of the integers is 20. If not, return False
	makes_twenty(12,8) --> True
	makes_twenty(2,3) --> False
9)Write a function that capitalizes the first and fourth letters of a name
	old_macdonald('macdonald') --> MacDonald
	Note: `'macdonald'.capitalize()` returns `'Macdonald'`
10)Write a function and Given a sentence, return a sentence with the words reversed
	master_yoda('I am home') --> 'home am I'
	master_yoda('We are ready') --> 'ready are We'
11)Write a function and Given an integer n, return True if n is within 10 of either 100 or 200
	NOTE: abs(num) returns the absolute value of a number
	almost_there(104) --> True
	almost_there(150) --> False
12)Write a function and Given a list of ints, return True if the array contains a 3 next to a 3 somewhere.
	has_33([1, 3, 3]) â†’ True
	has_33([1, 3, 1, 3]) â†’ False
13)Write a function and Given a string, return a string where for every character in the original there are three characters
	paper_doll('Hello') --> 'HHHeeellllllooo'
	paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'
14)Write a function and Given three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST
	blackjack(5,6,7) --> 18
	blackjack(9,9,9) --> 'BUST'
	blackjack(9,9,11) --> 19
15)Write a function and Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 9 (every 6 will be followed by at least one 9). Return 0 for no numbers.
	summer_69([1, 3, 5]) --> 9
	summer_69([4, 5, 6, 7, 8, 9]) --> 9
	summer_69([2, 1, 6, 9, 11]) --> 14
16)Write a function that takes in a list of integers and returns True if it contains 007 in order
	spy_game([1,0,2,4,0,5,7]) --> True
	spy_game([1,7,2,0,4,5,0]) --> False
17)Write a function that returns the number of prime numbers that exist up to and including a given number
	count_primes(100) --> 25  By convention, 0 and 1 are not prime.
18)Write a function that takes in a single letter, and returns a 5x5 representation of that letter
	print_big('a')

	out:   *  
 	      * *
	     *****
	     *   *
	     *   *
HINT: Consider making a dictionary of possible patterns, and mapping the alphabet to specific 5-line combinations of patterns.
For purposes of this exercise, it's ok if your dictionary stops at "E".


Resources
=========
https://www.oreilly.com/library/view/the-art-of/9781593273842/ch02s05.html
https://www.datamentor.io/r-programming/return-function/
https://www.dataquest.io/blog/write-functions-in-r/
