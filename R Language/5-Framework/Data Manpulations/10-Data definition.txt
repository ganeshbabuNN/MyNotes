Intro 
Creating new tables/dataframe
how to add one or more row/columns to an existing table(alter tabled add column)
how to change the structure of existing tables(Alter the table)
how to change the definition of existing columns in a table(alter table modify column)
how to use various statements to drop one or more columns from a table(drop the column)
how to delete dataframe(Drop the table)
delete all data from a table faster and more efficiently(delete the the data )
process of renaming a dataframe and columns(rename the column)

Intro
===== 
-DataFrames are generic data objects of R which are used to store the tabular data
-Data frames are considered to be the most popular data objects in R programming because it is more comfortable to analyze the data in the tabular form.
-Data frames can also be taught as mattresses where each column of a matrix can be of the different data types
-DataFrame are made up of three principal components, the data, rows, and columns

Common Dataframe operations are
*Creating a DataFrame
*Accessing rows and columns
*Selecting the subset of the data frame
*Editing dataframes
*Adding extra rows and columns to the data frame
*Add new variables to dataframe based on existing ones
*Delete rows and columns in a data frame

Creating new tables in the database
===================================

creating a empty dataframe
-------------------------
df=data.frame()

converting dataframe from vector
--------------------------------
stu.data <- data.frame(
  student_id = c(14:19),
  student_name=c("ganesh","vee","vaib","prave","rudresh","sontosh"),
  student_age =c(32,44,34,56,34,23),
  student_class= c("MCA","BCA","BTECH","BE","MTECH","MSC"),
  student_join=as.Date(c("2021-01-20","2022-01-22","2000-03-18","2012-01-11","2022-01-14","2000-03-24")),
  stringsAsFactors = FALSE
)

stu.data
class(stu.data)
typeof(stu.data)
print(stu.data)

or

#converting named vector to dataframe
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))

employ.data <- data.frame(employee, salary, startdate)
employ.data
str(employ.data)

#using dplr
library(dplyr)
testVect <- structure(c("11.2.0.3.0", "12.89", "12.71"), .Names = c("db_version", 
                                                                    "elapsed_time", "cpu_time"))
testVect %>% bind_rows() #using dplyr

#converting a vector of fixed length
myvector <- c("1", "darkorange", "16876", "16890", "2", "pink", "6833", "7189", 
              "2", "pink", "9181", "9279", "2", "darkgreen", "1846", "2170")
myvector
m1 <- matrix(myvector, ncol=4, byrow=TRUE)#convert to matrix with fixed column
m1
d1 <- as.data.frame(m1, stringsAsFactors=FALSE)
d1

#read.table method
m2=read.table(text = paste(myvector, collapse = " "), 
              col.names = paste0("V", 1:4))
m2

converting dataframe from list
------------------------------
#base R
test1 <- list( c('a','b','c'), c(a='d',b='e',c='f'))
data.frame(t(sapply(test1,c)))

#data.table library
library(data.table)
test1 <- list(col1 <-list(a=1,b=2,c=3),
              col2 <- list(a=4,b=5,c=6))
rbindlist(test1)

#using dplyr
library(dplyr)
test1 <- list(col1 <-list(a=1,b=2,c=3),
              col2 <- list(a=4,b=5,c=6))
bind_rows(test1)

converting dataframe from matrix
--------------------------------
Mat1 = matrix(c(1, 5, 14, 23, 54, 9, 15, 85, 3, 42, 9, 7, 42, 87, 16), ncol=3)
Mat1

DF2 = as.data.frame(t(Mat1))
DF2

#using col names
Mat1 = matrix(c(1, 5, 14, 23, 54, 9, 15, 85, 3, 42, 9, 7, 42, 87, 16), ncol=3)
Mat1

DF2 = as.data.frame(t(Mat1), row.names= c('name1', 'name2', 'name3'))
DF2

Converting array to dataframe
-----------------------------
ar <- array(c(1, 5, 14, 23, 54, 9, 15, 85, 3, 42, 9, 7, 42, 87, 16))
ar
as.data.frame(ar)
#using dimension
ar <- array(c(1, 5, 14, 23, 54, 9, 15, 85, 3, 42, 9, 7, 42, 87, 16),dim =c(1,15))
ar
as.data.frame(ar)

How to add one or more columns(variables) to an existing table
===================================================

Base R
------


Using dplyr
-----------
rm(starwars)
starwars <- read.csv("starwars.csv")
is.na(starwars)
starwars$mass <- as.numeric(starwars$mass)
starwars$mass
glimpse(starwars)

# Newly created variables are available immediately
starwars %>% select(name,mass) %>% 
  mutate(mass2 = mass*2,mass2_squared =mass2 * mass2)

glimpse(starwars)

## As well as adding new variables, you can use mutate() to
# remove variables and modify existing variables.
starwars %>% select(name,height,mass,homeworld) %>% 
  mutate(
    mass=NULL,
    height = height * 0.0328084 # convert to feet
  )

# Use across() with mutate() to apply a transformation to multiple columns in a tibble.
starwars %>%
  select(name, homeworld, species) %>%
  mutate(across(!name, as.factor))

# Window functions are useful for grouped mutates:
starwars %>%
  select(name, mass, homeworld) %>%
  group_by(homeworld) %>%
  mutate(rank = min_rank(desc(mass)))



# By default, new columns are placed on the far right.
# Experimental: you can override with `.before` or `.after`
df <- tibble(x = 1, y = 2)
df %>% mutate(z = x + y)
df %>% mutate(z = x + y, .before = 1)
df %>% mutate(z = x + y, .after = x)

# By default, mutate() keeps all columns from the input data.
# Experimental: You can override with `.keep`
df <- tibble(x = 1, y = 2, a = "a", b = "b")
df %>% mutate(z = x + y, .keep = "all") # the default
df %>% mutate(z = x + y, .keep = "used")
df %>% mutate(z = x + y, .keep = "unused")
df %>% mutate(z = x + y, .keep = "none") # same as transmute()

# Grouping ----------------------------------------
# The mutate operation may yield different results on grouped
# tibbles because the expressions are computed within groups.
# The following normalises `mass` by the global average:
starwars %>%
  select(name, mass, species) %>%
  mutate(
    mass_nor = mass/mean(mass,na.rm = TRUE)
    )

## Whereas this normalises `mass` by the averages within species levels
starwars %>%
  select(name, mass, species) %>%
  group_by(species) %>%
  mutate(mass_norm = mass / mean(mass, na.rm = TRUE))

#learning ?dplyr_data_masking

how to change the structure of existing datastructure
=======================================================
..ctd


How to change the definition of existing columns in a table
===========================================================
#using tranform function
sapply(df,mode)     
sapply(df,class)
transform(df,Age=as.character.default(Age))
df
multiple variable
df=transform(df,Age=as.character.default(Age),
             new_age=as.character(Age))


#base R
sapply(df,mode)     
sapply(df,class)
df$Age <- as.character(df$Age)

How to use various statements to drop one or more columns from a table
======================================================================
df
df[,-3] #column name

df[c("Age")] <- list(NULL) #using null
df

health[c("name","gender")] <- NULL
health

how to delete dataframe
=======================
ls() #list all objects in current R workspace
rm(df) #remove df1
rm(df2,df3) #remove df1 and df2
rm(list=ls(all=TRUE)[sapply(mget(ls(all=TRUE)), class) == "data.frame"]) #remove all objects of type "data.frame"
rm(list = ls()[grepl("df", ls())]) #remove all objects that contain "df"

Ref:https://www.statology.org/delete-data-frame-in-r/

delete all data from a table faster and more efficiently
=========================================================
df <- NULL

process of renaming a dataframe and columns
===========================================
renaming the dataframe
----------------------
new_df <- df
rm(df)

renaming the column
-------------------
using base R:
colnames(df) #get the column names
names(df)[names(df)=="Language"] <-"Programming.Language"
df

using dplyr:
library(dplyr)
df
df %>% rename("Programing.Language" =Language,
               "Full.Name"=Name) #its revierse


renaming the rowname
---------------------
row.names(df)[rownames(df)==1] <-"mynamerow"
df


Quiz
====

Assignment
==========


Resources:
=========