Intro
how to insert a row into a table  -insert
Insert data into a table from the result of a query --insert
Insert multiple rows/columns into a table or multiple tables -insert
How to change the existing values of a table -update
updating the missing values i,e NA to 0 -update
Resetting the row index -update
Writing the conditional statment in R
Writing a Custom function in R
How to delete one or more row from a table - delete
Performing a mixture of insertion, update, and deletion using a single statement -mix of all
how to concat the two columns- concat

Intro
=====
in this you will learn how to modify the data like insert, update,delete

#data
name <- c("vyvan","vedha","venu","nitya","vinay","veera","sandeep","arun",'saraswati','monica','rocky')
gender <- c("M", "F", "M", "F", "M", "M", "M", "Not disclosed", "M", "F", "M")
age <- c(29,67,40,23,26,34,55,42,18,73,18)
weight <- c(52,65,80,57,71,90,67,78,85,50,85)
height <- c(165,171,183,154,173,167,169,180,190,145,190)
maristatus <- c(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)
dob <- as.Date(c("1988-01-20","1983-01-22","1983-03-18","1978-01-11","1968-01-14","1999-03-24","1988-03-22","1955-01-19","1986-03-21","1968-04-26","1987-02-23"))

health <- tibble(name,gender,age, weight, height,maristatus,dob) #tibble create the dataframe

using new dplyr
---------------
-Mutate() is used to add new variables, often from performing calculations on the original variables (e.g.calculate body mass index ( bmi ) from weight / (height/ 2))
-Important arguments in the function are (i) data source, (ii) new variable name and (iii) new variable function
	mutate(data source, new variable name = function to create new variable, …)
-For example, using the health data set, we can create the bmi variable from a simple arithmetic function of weight/(height/100)^2
	mutate(health, bmi = weight/(height/100)^2)



health2 <- mutate(health, bmi = weight/(height/100)^2)

#the cut() function can be used to create a categorical variable from a continuous variable using defined cut-off limits
mutate(health2, bmi_classification = cut(bmi, breaks = c(0, 18.5, 24.9, Inf),
                                         labels = c("Underweight", "Normal", "Overweight")))



how to insert a row into a table
================================
# A vector which is a character vector
Name = c("Ganesh", "Vedha", "Ashu")

# A vector which is a character vector
Language = c("R", "Python", "Java")

# A vector which is a numeric vector
Age = c(22, 25, 45)

# To create dataframe use data.frame command and
df = data.frame(Name, Language, Age)
new_df=data.frame(Name="nishu",Language="Perl",Age=23)
rbind(df,new_df)

insert data into a table from the result of a query
===================================================
R is a resuble objects which can be treated as a query.

Insert multiple rows/columns into a table or multiple tables
============================================================
Multiple rows
-------------
This code should be used when each element in the list is supposed to hold a row in the dataframe

listHolder <- list(
  row1 = list(name = "foo", surname = "bar", age = 90),
  row2 = list(name = "foo", surname = "foo", age = 29),
  row3 = list(name = "bar", surname = "foo", age = 45),
  row4 = list(name = "bar", surname = "bar", age = 10)
)

listHolder

# A simple rbind won't work (each column is still a list)
data1 <- do.call(rbind, listHolder)
data1
str(data1)

# General Approach
data2 <- do.call(rbind, lapply(listHolder, data.frame))
data2
str(data2)

This works when each element in listHolder contains a column of the dataframe
df <- data.frame(lapply(listHolder, function(x) Reduce(c, x)))

Multiple columns
---------------
listHolder <- list(
  A = rep(list(1, 2), 80),
  B = rep(c(3, 4), 80),
  C = rep(c("a", "b"), 80),
  D = rep(list("c", "d"), 80),
  E = rep(as.POSIXct(10485849600, origin = "1582-10-14", tz = "GMT"), 160)
)

listHolder

#1st approach
data1  <-  as.data.frame(matrix(unlist(listHolder), nrow=length(unlist(listHolder[1]))))
data1 
str(data1) #(mess up with types)

#2st approach
data2 <- data.frame(do.call(cbind, listHolder))
data2
str(data2) #(each column becomes a list)

#general approach
data3 <- data.frame(lapply(listHolder, function(x) Reduce(c, x)))
data3
str(data3)

This works when each element in listHolder contains a row of the dataframe
df <- do.call(rbind, lapply(listHolder, data.frame))

using cbind functions
---------------------
car = c("Audi","Toyota","Bugati","Audi","Agera R","Bugati","Audi")
gender=c("M","M","M","M","M","M","F")
#multiple columns
cbind(celebrities,"cars"=car,"Gender"=gender)

How to change the existing values of a table -update
====================================================
df[1,3] <- 37 # affect the all columns
df

df[1,] <- 0 # affect the all rows
df

df[,3] <- 0 # affect the all columns
df

df[1,3] <- 0 # affect the specific row and column
df

updating the missing values i,e NA to 0
=======================================
Celebrities = data.frame(name = c("Andrew", "Mathew", "Dany", "Philip", "John", "Bing", "Monica"),
                         age = c(28, 23, 49, 29,NA, 23, NA),
                         income = c(25.2, 10.5, 11, 21.9, 44, 11.5, 45))

Celebrities

#Now use the function is.na() with the data frame
Celebrities[is.na(Celebrities)]<- 0
Celebrities

Resetting the row index
=======================
listHolder <- list(
  row1 = list(name = "foo", surname = "bar", age = 90),
  row2 = list(name = "foo", surname = "foo", age = 29),
  row3 = list(name = "bar", surname = "foo", age = 45),
  row4 = list(name = "bar", surname = "bar", age = 10)
)

listHolder

# General Approach
data2 <- do.call(rbind, lapply(listHolder, data.frame))
data2
str(data2)

#resting the rows index
rownames(data2)= seq(length=nrow(data2))
data2


Writing the conditional statment in R
======================================
-we can achieve using the switch statement

name <- c("sasi","vedha","venu","nitya","vinay","veera","sandeep","arun",'saraswati','monica','rocky')
gender <- c("M", "F", "M", "F", "M", "M", "M", "Not disclosed", "M", "F", "M")
age <- c(29,67,40,23,26,34,55,42,18,73,18)
weight <- c(52,65,80,57,71,90,67,78,85,50,85)
height <- c(165,171,183,154,173,167,169,180,190,145,190)
maristatus <- c(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)
dob <- as.Date(c("1988-01-20","1983-01-22","1983-03-18","1978-01-11","1968-01-14","1999-03-24","1988-03-22","1955-01-19","1986-03-21","1968-04-26","1987-02-23"))

health <- tibble(name,gender,age, weight, height,maristatus,dob) #tibble create the dataframe
health
view(health)

using Case when statement
-------------------------
ex1:with single conditions
library(dplyr)
health %>% mutate(new_sex = case_when(.$gender=="M" ~ "Male",
                                      .$gender=="F" ~ "Female")
)

ex2:with multiple conditions
health %>% mutate(new_sex = case_when((age<18) < (age<30)  ~ "Adult",
                                      (age>20) < (age<45)  ~ "Uncle",
                                      (age>45) < (age<60)  ~ "Citizen",
                                      (age>60) ~ "Grandpa",
                                      TRUE ~'Not categorised'))
)

Using recode function
---------------------
health$type <- recode(health$gender,
                      "M" = 'Male',
                      "F" = 'Female',
                      "Not disclosed" = "NA"
                    )
health


Writing a Custom function in R
==============================
traditional way 
---------------
#sample dataset
dat <- data.frame(
  a = letters[1:3],
  b = LETTERS[4:6],
  c = 7:9
)

#create a custom functions note data is dataframe and col is a column
my.function <- function(data, col){
  data[, col]
}

#adding a new column
dat$res <- my.function(dat, "b" )

Using apply function
--------------------
celebrities=data.frame(name=c("Andrew","matt","Dany","Philip","John","bing","Monica"),
                       age=c(28,23,49,29,38,23,29),
                       income=c(25.2,10.5,11,21.9,44,11.5,45))

#custom function
f2=function(x,output){
  age=as.numeric(x[2])#locate the index where the logic to be built
  income=as.numeric(x[3])
  sum(age,income)
}

#call the function using apply functions
celebrities$new <- apply(celebrities,1,f2)
celebrities

celebrities %>% rowwise %>% mutate(age_plus_income = sum(age, income)) #appraoch 2
celebrities$newcol <- with(celebrities, age + income) #appraoch 3
celebrities$newcol <- apply(celebrities[-1], function(x) sum(x) ) #appraoch 4
apply(celebrities[c("age","income")], 1, sum) #appraoch 5

Using dplyr package
-------------------
library(tidyverse)
#create a new dataframe
data.frame(
  A = c(1,1,2,2),
  B = c(1,2,1,2),
  str = c('1, 2, 5', NA, NA, '1, 3')
) -> df
df

#create a custom functions
getCounts <- function(str, x, y){
  if (is.na(str)){
    return(as.integer(0))
  }
  vec <- as.integer(unlist(strsplit(str, ',')))
  count <- 0
  for (i in vec) {
    if (i >= x & i <= y){
      count <- count + 1
    }
  }
  return(as.integer(count))
}


#calling the custom functions
#using rowwise
df %>%
  rowwise() %>%
  mutate(res = getCounts(str, 0, 2)) %>%
  ungroup()

#Vectorize
df %>%mutate(res = Vectorize(getCounts)(str, 0, 2))

#using sapply
df %>%  mutate(res = sapply(str, getCounts, x = 0, y = 2))

How to delete one or more row/column from a table - delete
==========================================================
In R we cannot actually delete a row, but you can access a data frame without some rows specified by negative index. This process is also called subsetting in R language.

Celebrities = data.frame(name = c("Andrew", "Mathew", "Dany", "Philip", "John", "Bing", "Monica"),
                         age = c(28, 23, 49, 29, 38, 23, 29),
                         income = c(25.2, 10.5, 11, 21.9, 44, 11.5, 45))

Delete by row
-------------
celebrities
#assume we need to delete a first row
celebrities[-1,] #remove 1st row but not from the dataframe
celebrities[-c(1,4),] #remove multiple rows
celebrities[-c(3:5),] #remove multiple range of rows

Delete by Column
-----------------
To delete a column from R Data Frame, you may select the columns you want to keep using extract columns of data frame and overwrite the existing data frame
celebrities <- data.frame(celebrities$name,celebrities$income) #assume you want to delete the age column
celebrities

#using NULL keyworkd
celebrities$age <- NULL

celebrities[,-2] #remove 2st column

Ref:https://www.tutorialkart.com/r-tutorial/r-dataframe-delete-row/

Performing a mixture of insertion, update, and deletion using a single statement
================================================================================
All data are stored in the R objects, this objects are resuable in nature can perform mixed operations

Quiz
====
1)Create a new variable called Petal. Area, which multiples Petal.Length by Petal.Width
2)Create a new variable called Sepal.LW.ratio , which divides Sepal.Length by Sepal.Width
3)Create a new variable called Petal.Length.Classification , which categorises Petal.Length into small (<2),normal (2 5) and tall (>5)


How to concat the two columns- concat
====================================

Concatenate Two Columns in R
----------------------------
dataf$MY <- paste(dataf$Month, dataf$Year)

#to add a separateor 
dataf$MY <- paste(dataf$Month, "-", dataf$Year)
#use a sep parameter
dataf$MY <- paste(dataf$Month, dataf$Year, sep= "-")

Combine Multiple Columns in R
-----------------------------
dataf$DMY <- paste(dataf$Date, dataf$Month, dataf$Year)

Concatenate Two Columns in R with the str_c() Function (stringr)
---------------------------------------------------------------
library(tidyverse) # or library(tidyr)

#simple method
-First, we used a new operator (i.e., %>%). Among a lot of things, this enables us to use unite() without the $ operator to select the columns.
-we name the new column we want to add (“DM”)
-second we select all the columns from “Date” to “Month” and combine them into the new column
dataf <- dataf %>%
  	unite("DM", Date:Month)

#using REMOVE parameter
-If we want to keep the original columns after we have concatenated them we can set the remove parameter to FALSE
dataf <- dataf %>%
  unite("DM", Date:Month, 
        remove = FALSE)

#using the SEP parameter
unite() function together with the sep parameter to change the separator to “-” (hyphen):
dataf <- dataf %>%
  unite("DM", Date:Month, sep= "-", 
        remove = FALSE)


Assignment
==========


Resources:
=========
https://www.marsja.se/how-to-concatenate-two-columns-or-more-in-r-stringr-tidyr/
