Intro
Handling Text files
Handling csv files
Handling excel files
Handling Binary files
Handling XML files
Handling JSON Files
Handling SAS files
Handling SPSS files
Handling STATA files
Handling web Data
Connecting to Database

Intro
=====
-In R, we can read data from files stored outside the R environment
-We can also write data into files which will be stored and accessed by the operating system
-R can read and write into various file formats like csv, excel, xml etc.

setting your directory
----------------------
# Get and print current working directory.
print(getwd()) 

# Set current working directory.
setwd("C:/Users/gbag/Downloads/pratice/pandas-Datasets/pandas-Datasets")

# Get and print current working directory.
print(getwd())

Handling Text files
===================
-A text file present on your local machine can be read using a slightly modified read.table command
-Because it’s designed for reading tables, you can set the separator to an empty string ("") to read a text file line by line

read.table("employees.csv",sep=",")

-The path to the file may also be the relative path to the file. If your rows have unequal length, you have to set fill = TRUE as well. The output of this command is a data frame in R.
-If your file is too large to be read in one go, you can try reading it in steps using the skip and nrow options. For instance, to read the lines 6–10 in your file, run the following commands:

read.table("employees.csv",sep=",",nrow=5) #limit the rows
read.table("employees.csv",sep=",",skip=2,nrow=5) #limit the rows

exporting the tabe limited file
-------------------------------
write.table(data_frame, file = "data.txt", sep = "\t")


Handling csv files
==================
# Get and print current working directory.
print(getwd()) 

# Set current working directory.
setwd("C:/Users/gbag/Downloads/pratice/pandas-Datasets/pandas-Datasets")

# Get and print current working directory.
print(getwd())

read the csv files
------------------
emp <- read.csv("employees.csv")

#analysing the csv file
print(is.data.frame(emp))
print(ncol(emp))
print(nrow(emp))
str(emp) #structure of the dataframe
emp$Start.Date <-as.Date(emp$Start.Date,format="%m/%d/%y")
str(emp) #structure of the dataframe

#some operations
library(dplyr)
emp %>% slice_max(Salary,n=10) #max operations

#filtering
max(emp$Salary) #maximum salary of the dataframe
subset(emp,Salary == max(Salary)) #person detail with max salary
subset(emp,Team=='Finance') #single conditions
subset(emp,Team=='Finance' & Salary > 140000) #multiple conditions
subset(emp,as.Date(Start.Date) > as.Date("2020-11-01")) #filtering dates

Writing into a CSV File
-----------------------
newdata <- subset(emp,as.Date(Start.Date) > as.Date("2020-11-01")) #filtering dates
write.csv(newdata,"tempouput.csv") #column X comes from the data set new
write.csv(newdata,"tempouput.csv",row.names = FALSE)#this can dropped as above statement
read.csv("tempouput.csv")

Handling excel files
====================
-Microsoft Excel is the most widely used spreadsheet program which stores data in the .xls or .xlsx format
-R can read directly from these files using some excel specific packages.

Install.packages("xlsx")
# Verify the package is installed.
any(grepl("xlsx",installed.packages()))
# Load the library into R workspace.
library("xlsx")

#Reading the Excel File
emp1<-read.xlsx("Data - Single Worksheet.xlsx",sheetIndex = 1)
emp_sheet1<- read.xlsx("Data - Multiple Worksheets.xlsx",sheetIndex = 1)#reading diff sheet1
emp_sheet2<-read.xlsx("Data - Multiple Worksheets.xlsx",sheetIndex = 2) #reading diff sheet2

#writing the excel file
write.xlsx(emp_sheet1,"output.xlsx")
read.xlsx("output.xlsx",sheetIndex = 1)

#dynamically write into many sheets using loop
for (i in 1:noctry) {
     write.xlsx(tab110rev[i,,], file="table.xlsx", sheetName = countrylist[i],
                col.names=FALSE, row.names=FALSE, append = T)  
}

#write into multiple sheets
library(openxlsx)
#create a named list of your dataframes. The list names will be the worksheet names.
xl_lst <- list('df1_name' = iris, 'df2_name' = mtcars)
write.xlsx(xl_lst, file = "xl_with_2_worksheets.xlsx")

Handling Binary files
=====================
-A binary file is a file that contains information stored only in form of bits and bytes.(0’s and 1’s).
-They are not human readable as the bytes in it translate to characters and symbols which contain many other non-printable characters
-The binary file has to be read by specific programs to be useable

-The binary file has to be read by specific programs to be useable
-For example, the binary file of a Microsoft Word program can be read to a human readable form only by the Word program. Which indicates that, besides the human readable text, there is a lot more information like formatting of characters and page numbers etc., which are also stored along with alphanumeric characters.
-And finally a binary file is a continuous sequence of bytes. The line break we see in a text file is a character joining first line to the next
-Sometimes, the data generated by other programs are required to be processed by R as a binary file. Also R is required to create binary files which can be shared with other programs

-R has two functions WriteBin() and readBin() to create and read binary files.

writeBin(object, con)
readBin(con, what, n )

Following is the description of the parameters used −
	con is the connection object to read or write the binary file.
	object is the binary file which to be written.
	what is the mode like character, integer etc. representing the bytes to be read.
	n is the number of bytes to read from the binary file.

Writing the Binary File
-----------------------
library(MASS)
mtcars
# Read the "mtcars" data frame as a csv file and store only the columns 
write.table(mtcars, file = "mtcars.csv",row.names = FALSE, na = "",col.names = TRUE, sep = ",")
read.csv("mtcars.csv")

# Store 5 records from the csv file as a new data frame.
new.mtcars <-read.table("mtcars.csv",sep = ",",header = TRUE,nrows = 5)
new.mtcars

# Create a connection object to write the binary file using mode "wb".
write.filename = file("binmtcars.dat", "wb")

# Write the column names of the data frame to the connection object.
writeBin(colnames(new.mtcars), write.filename)

# Write the records in each of the column to the file.
writeBin(c(new.mtcars$cyl,new.mtcars$am,new.mtcars$gear), write.filename)

# Close the file for writing so that it can be read by other program.
close(write.filename)


Reading the Binary File
-----------------------
# Create a connection object to read the file in binary mode using "rb".
read.filename <- file("binmtcars.dat", "rb")
read.filename

# First read the column names. n = 3 as we have 3 columns.
column.names <- readBin(read.filename, character(),  n = 3)
column.names

# Next read the column values. n = 18 as we have 3 column names and 15 values.
read.filename <- file("binmtcars.dat", "rb")
read.filename
bindata <- readBin(read.filename, integer(),  n = 18)
bindata

# Print the data.
print(bindata)

# Read the values from 4th byte to 8th byte which represents "cyl".
cyldata = bindata[4:8]
print(cyldata)

# Read the values form 9th byte to 13th byte which represents "am".
amdata = bindata[9:13]
print(amdata)

# Read the values form 9th byte to 13th byte which represents "gear".
geardata = bindata[14:18]
print(geardata)

# Combine all the read values to a dat frame.
finaldata = cbind(cyldata, amdata, geardata)
finaldata 
colnames(finaldata) = column.names
print(finaldata)
finaldata
typeof(finaldata)
class(finaldata)

Handling XML files
==================
-XML is a file format which shares both the file format and the data on the World Wide Web
-It stands for Extensible Markup Language (XML). Similar to HTML it contains markup tags. 
-But unlike HTML where the markup tag describes structure of the page, in xml the markup tags describe the meaning of the data contained into he file
-You can read a xml file in R using the "XML" package. This package can be installed using following command.

Employee.xml
------------
<RECORDS>
   <EMPLOYEE>
      <ID>1</ID>
      <NAME>Rick</NAME>
      <SALARY>623.3</SALARY>
      <STARTDATE>1/1/2012</STARTDATE>
      <DEPT>IT</DEPT>
   </EMPLOYEE>
	
   <EMPLOYEE>
      <ID>2</ID>
      <NAME>Dan</NAME>
      <SALARY>515.2</SALARY>
      <STARTDATE>9/23/2013</STARTDATE>
      <DEPT>Operations</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>3</ID>
      <NAME>Michelle</NAME>
      <SALARY>611</SALARY>
      <STARTDATE>11/15/2014</STARTDATE>
      <DEPT>IT</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>4</ID>
      <NAME>Ryan</NAME>
      <SALARY>729</SALARY>
      <STARTDATE>5/11/2014</STARTDATE>
      <DEPT>HR</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>5</ID>
      <NAME>Gary</NAME>
      <SALARY>843.25</SALARY>
      <STARTDATE>3/27/2015</STARTDATE>
      <DEPT>Finance</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>6</ID>
      <NAME>Nina</NAME>
      <SALARY>578</SALARY>
      <STARTDATE>5/21/2013</STARTDATE>
      <DEPT>IT</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>7</ID>
      <NAME>Simon</NAME>
      <SALARY>632.8</SALARY>
      <STARTDATE>7/30/2013</STARTDATE>
      <DEPT>Operations</DEPT>
   </EMPLOYEE>
   
   <EMPLOYEE>
      <ID>8</ID>
      <NAME>Guru</NAME>
      <SALARY>722.5</SALARY>
      <STARTDATE>6/17/2014</STARTDATE>
      <DEPT>Finance</DEPT>
   </EMPLOYEE>
	
</RECORDS>

Reading XML File
----------------
# Load the package required to read XML files.
install.packages("XML")
library("XML")

# Also load the other required package.
install.packages("methods")
library("methods")

## Get and print current working directory.
print(getwd()) 
# Set current working directory.
setwd("C:/Users/gbag/Downloads/pratice/pandas-Datasets/pandas-Datasets")
# Get and print current working directory.
print(getwd())

# Give the input file name to the function .
result <- xmlParse(file = "employee.xml")
result

# Print the result.
print(result)
result

Get Number of Nodes Present in XML File
----------------------------------------
# Load the packages required to read XML files.
library("XML")
library("methods")

# Give the input file name to the function.
result <- xmlParse(file = "employee.xml")
result

# Exract the root node form the xml file.
rootnode <- xmlRoot(result)
rootnode

# Find number of nodes in the root.
rootsize <- xmlSize(rootnode)
rootsize

# Print the result.
print(rootsize)

Details of the First Node
-------------------------
# Load the packages required to read XML files.
library("XML")
library("methods")

# Give the input file name to the function.
result <- xmlParse(file = "employee.xml")
result

# Exract the root node form the xml file.
rootnode <- xmlRoot(result)

# Print the result.
print(rootnode[1])
print(rootnode[3])

Get Different Elements of a Node
--------------------------------
# Load the packages required to read XML files.
library("XML")
library("methods")

# Give the input file name to the function.
result <- xmlParse(file = "employee.xml")
result

# Exract the root node form the xml file.
rootnode <- xmlRoot(result)
rootnode

# Get the first element of the first node.
print(rootnode[[1]][[1]])

# Get the fifth element of the first node.
print(rootnode[[1]][[5]])

# Get the second element of the third node.
print(rootnode[[3]][[2]])


XML to Data Frame
-----------------

#To handle the data effectively in large files we read the data in the xml file as a data frame
# Load the packages required to read XML files.
library("XML")
library("methods")

# Convert the input xml file to a data frame.
xmldataframe <- xmlToDataFrame("employee.xml")
xmldataframe
print(xmldataframe)


Handling JSON Files
-------------------
-JSON file stores data as text in human-readable format.
-JSON is other form of XML
-Json stands for JavaScript Object Notation. R can read JSON files using the rjson package

Install rjson Package
install.packages("rjson")

input
-----
employee.json
{ 
   "ID":["1","2","3","4","5","6","7","8" ],
   "Name":["Rick","Dan","Michelle","Ryan","Gary","Nina","Simon","Guru" ],
   "Salary":["623.3","515.2","611","729","843.25","578","632.8","722.5" ],
   
   "StartDate":[ "1/1/2012","9/23/2013","11/15/2014","5/11/2014","3/27/2015","5/21/2013",
      "7/30/2013","6/17/2014"],
   "Dept":[ "IT","Operations","IT","HR","Finance","IT","Operations","Finance"]
}

Read the JSON File
------------------
install.packages("rjson")

# Load the package required to read JSON files.
library("rjson")

## Give the input file name to the function.
result <- fromJSON(file = "employee.json")
result

# Print the result.
print(result)

Convert JSON to a Data Frame
----------------------------
# Load the package required to read JSON files.
library("rjson")

## Give the input file name to the function.
result <- fromJSON(file = "employee.json")
result

# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
json_data_frame

print(json_data_frame)

Handling SAS files
==================
Haven enables R to read and write various data formats used by other statistical packages by wrapping the fantastic ReadStat C library written by Evan Miller. Haven is part of the tidyverse.
-Haven is also the part of the Tidyverse package.

SAS: read_sas() reads .sas7bdat + .sas7bcat files and read_xpt() reads SAS transport files (version 5 and version 8)

# The easiest way to get haven is to install the whole tidyverse:
install.packages("tidyverse")

# Alternatively, install just haven:
install.packages("haven")

read_sas() syntax:
read_sas(
  data_file,
  catalog_file = NULL,
  encoding = NULL,
  catalog_encoding = encoding,
  col_select = NULL,
  skip = 0L,
  n_max = Inf,
  cols_only = "DEPRECATED",
  .name_repair = "unique"
)

Reading the sas datasets
------------------------
-read_sas() supports both sas7bdat files and the accompanying sas7bcat files that SAS uses to record value labels.
read_sas("ae.sas7bdat")

Writing the sas datasets
------------------------
-this is under experimental

write_sas(emp,"emp.sas7bdat")

Ref:https://haven.tidyverse.org/



Handling SPSS files
===================1
# The easiest way to get haven is to install the whole tidyverse:
install.packages("tidyverse")

# Alternatively, install just haven:
install.packages("haven")

library(tidyverse)
nba<- read_csv("nba.csv") 

read_sav("nba.sav")
write_sav(nba,"nba.sav")


Handling STATA files
====================
# The easiest way to get haven is to install the whole tidyverse:
install.packages("tidyverse")

# Alternatively, install just haven:
install.packages("haven")

library(tidyverse)
nba<- read_csv("nba.csv") 
read_dta("nba.dta")
write_dta(nba,"nba.dta")


Handling web Data
=================
-Many websites provide data for consumption by its users.
-For example the World Health Organization(WHO) provides reports on health and medical information in the form of CSV, txt and XML files
-Using R programs, we can programmatically extract specific data from such websites

install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")

Input Data
-----------
#https://www.geos.ed.ac.uk/~weather/jcmb_ws/

# Read the URL.
url <- "https://www.geos.ed.ac.uk/~weather/jcmb_ws/"

# Gather the html links present in the webpage.
links <- getHTMLLinks(url)

# Identify only the links which point to the JCMB 2015 files. 
filenames <- links[str_detect(links, "JCMB_2015")]
filenames

# Store the file names as a list.
filenames_list <- as.list(filenames)

# Create a function to download the files by passing the URL and filename list.
downloadcsv <- function (mainurl,filename) {
  filedetails <- str_c(mainurl,filename)
  download.file(filedetails,filename)
}

# Now apply the l_ply function and save the files into the current R working directory.
l_ply(filenames,downloadcsv,mainurl = "http://www.geos.ed.ac.uk/~weather/jcmb_ws/")

Connecting to Database
======================
-The data is Relational database systems are stored in a normalized format.
-So, to carry out statistical computing we will need very advanced and complex Sql queries
-But R can connect easily to many relational databases like MySql, Oracle, Sql server etc.
-and fetch records from them as a data frame. Once the data is available in the R environment, it becomes a normal R data set and can be manipulated or analyzed using all the powerful packages and functions

RMySQL Package
--------------
install.packages("RMySQL")


Connecting R to MySql
---------------------
# Create a connection Object to MySQL database.
# We will connect to the sampel database named "sakila" that comes with MySql installation.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila',
   host = 'localhost')

# List the tables available in this database.
 dbListTables(mysqlconnection)

Querying the Tables
-------------------
-We can query the database tables in MySql using the function dbSendQuery()
-The query gets executed in MySql and the result set is returned using the R fetch() function.
-Finally it is stored as a data frame in R.

# Query the "actor" tables to get all the rows.
result = dbSendQuery(mysqlconnection, "select * from actor")

# Store the result in a R data frame object. n = 5 is used to fetch first 5 rows.
data.frame = fetch(result, n = 5)
print(data.fame)


Query with Filter Clause
------------------------
-We can pass any valid select query to get the result.

result = dbSendQuery(mysqlconnection, "select * from actor where last_name = 'TORN'")

# Fetch all the records(with n = -1) and store it as a data frame.
data.frame = fetch(result, n = -1)
print(data)

Updating Rows in the Tables
---------------------------
-We can update the rows in a Mysql table by passing the update query to the dbSendQuery() function.

dbSendQuery(mysqlconnection, "update mtcars set disp = 168.5 where hp = 110")

Inserting Data into the Tables
------------------------------
dbSendQuery(mysqlconnection,
   "insert into mtcars(row_names, mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)
   values('New Mazda RX4 Wag', 21, 6, 168.5, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4)"
)

Creating Tables in MySql
------------------------
-We can create tables in the MySql using the function dbWriteTable(). It overwrites the table if it already exists and takes a data frame as input.

# Create the connection object to the database where we want to create the table.
mysqlconnection = dbConnect(MySQL(), user = 'root', password = '', dbname = 'sakila', 
   host = 'localhost')

# Use the R data frame "mtcars" to create the table in MySql.
# All the rows of mtcars are taken inot MySql.
dbWriteTable(mysqlconnection, "mtcars", mtcars[, ], overwrite = TRUE)

Dropping Tables in MySql
------------------------
We can drop the tables in MySql database passing the drop table statement into the dbSendQuery() in the same way we used it for querying data from tables.

dbSendQuery(mysqlconnection, 'drop table if exists mtcars')

Quiz
====

Assignment
==========


Resources:
=========
https://www.tutorialspoint.com/r/r_web_data.htm
https://statistics.berkeley.edu/computing/faqs/reading-web-pages-r
https://www.sitepoint.com/how-to-import-data-and-export-results-in-r/