Intro
Numeric Data Type
Number Type Conversion or Datatype casting
Built in functions
Number system Conversions
Quiz
Assignment
Resources

Intro
=====
Number data types store numeric values. They are immutable data types, means that changing the value of a number data type results in a newly allocated object

Number objects are created when you assign a value to them. For example −
x <- 32 
.Internal(inspect(x))
y <- 33
.Internal(inspect(y))
y <- 32
.Internal(inspect(y)) #get the memory address

You can also delete the reference to a number object by using the rm function. The syntax of the del statement is −
a<-3
b<-'ga'
rm(a,b)

Numeric Data Type
=================
there are numeric and integer

Number Type Conversion or Datatype casting
=================================================
-The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion.
-there are two types
1)Implicit Type Conversion
2)Explicit Type Conversion

1)Implicit Type Conversion
*------------------------*
-In Implicit type conversion, R automatically converts one data type to another data type. This process doesn't need any user involvement.

ex:
xx <- c(1.7, "a")
xx #check and observea
xx <- c(TRUE, 2)
xx
xx <- c("a", TRUE)
xx

The coersion rule goes logical -> integer -> numeric -> complex -> character.

ex:
1 < "2"
# TRUE
"1" > 2
# FALSE
1 < "a"
# TRUE

2)Explicit Type Conversion
*------------------------*
-In Explicit Type Conversion, users convert the data type of an object to required data type. 

#explicity converting it
as.numeric(43L)
as.integer(32.2)
as.character('ga32')
as.vector(list(3,2,4))
as.matrix(list(2,3,3,2))
as.data.frame(list(32,3,23,32))

Same for sequence data types
**-----------------------***
from  logical -> integer -> numeric -> complex -> character.


Key Points to Remember
----------------------
1)Type Conversion is the conversion of object from one data type to another data type.
2)Implicit Type Conversion is automatically performed by the R interpreter.
3)Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.
4)In Type Casting, loss of data may occur as we enforce the object to a specific data type

Built in functions
==================
#abs value
It returns the absolute value of input x.	
abs(-394)

#ceiling value
It returns the smallest integer which is larger than or equal to x.	
ceiling(4.323)

#floor value
It returns the largest integer, which is smaller than or equal to x.	
floort(3.455t)

#log value
It returns common logarithm of input x.	
log10(3.32)
It returns natural logarithm of input x.	
lg(3.32)

#truncating the decimal
It returns the truncate value of input x.	
trunc(5.99)

#round
It returns round value of input x.	
round(2.36222,digit=2)

#commong log
log10(3.23)

#sign functions
signif(2.323,digit=4)

#exponentia
It returns exponent.	
exp(32)

#sin cos  tan
sin(3)
cos(3)
tan(32)

#calculating percentage
mystu <- data.frame(name=c('a','b','c','d','e','f','g'),
                    marks=c(43,45,67,32,56,23,54))

#simple method
mystu$markpc <- mystu$marks/sum(mystu$marks)
mystu

#dplyr method no need to specify any method
library(dplyr)
mystu <- mutate(mystu,marks/sum(marks))
mystu

#With Loops for Automation
#apply to all the columns
sapply(names(mystu)[-1], function(x) {
  mystu[paste0(x, "_pct")] <<- mystu[x] / sum(mystu[x])
})
mystu

#Solution 2: with a for() loop 
for(col in names(mystu)[-1]) {
  mystu[paste0(col, "_pct")] = mystu[col] / sum(mystu[col])
}
mystu

From Math functon
----------------
#sqrt value
It returns the square root of input x.	
sqrt(4)

#max min function
x <-c(1.234,2.342,-4.562,5.671,12.345,-14.567)
max(x)
min(x)
##data with  NA
x <-c(1.234,2.342,-4.562,5.671,12.345,-14.567,NA)
max(x, na.rm=TRUE)
min(x, na.rm=TRUE)
##data with character vector
y<-c("d","e","a","x")
max(y)
min(y)
##data with dataframe
mystu <- data.frame(name=c('a','b','c','d','e','f','g'),
                    marks=c(43,45,67,32,56,23,54))
mystu
min(mystu$marks)
max(mystu$marks)

#column wise maximum using max min function:
mapply(max,mystu[c(1,2)])
mapply(min,mystu[c(1,2)])

#pi
print(pi)

#cos(x), sin(x), tan(x) functions
It returns cos(x), sin(x) value of input x.	
x<- 4
print(cos(x))
print(sin(x))
print(tan(x))


#It returns sum.	
syntax:
  sum(x)	
a<-c(0:10, 40)
xm<-sum(a)
print(xm)

#It returns differences with lag indicating which lag to use.	
syntax:
  max(x)	
a<-c(0:10, 40)
xm<-diff(a)
print(xm)

#Column center or standardize a matrix.	
syntax:
  scale(x, center=TRUE, scale=TRUE)

a <- matrix(1:9,3,3)
scale(x)

statistical functions
---------------------
#It is used to find the height of the probability distribution at each point to a given mean and standard deviation
syntax: dnorm(x, m=0, sd=1, log=False)
a <- seq(-7, 7, by=0.1)
a         
b <- dnorm(a, mean=2.5, sd=0.5)
b
png(file="dnorm.png")
plot(x,y)
dev.off()

#it is used to find the probability of a normally distributed random numbers which are less than the value of a given number.
syntax: pnorm(q, m=0, sd=1, lower.tail=TRUE, log.p=FALSE)
a <- seq(-7, 7, by=0.2)
a
b <- dnorm(a, mean=2.5, sd=2)
b
png(file="pnorm.png")
plot(x,y)
dev.off()

#It is used to find a number whose cumulative value matches with the probability value.
syntax:  qnorm(p, m=0, sd=1)
a <- seq(1, 2, by=002)
a
b <- qnorm(a, mean=2.5, sd=0.5)
b
png(file="qnorm.png")
plot(x,y)
dev.off()

#It is used to generate random numbers whose distribution is normal.
syntax:  rnorm(n, m=0, sd=1)
y <- rnorm(40)
y
png(file="rnorm.png")
hist(y, main="Normal Distribution")
dev.off()

#It is used to find the probability density distribution at each point.	
syntax:  dbinom(x, size, prob)	
a<-seq(0, 40, by=1)
a
b<- dbinom(a, 40, 0.5)
b
png(file="pnorm.png")
plot(x,y)
dev.off()

#It is used to find the cumulative probability (a single value representing the probability) of an event.	
syntax:  pbinom(q, size, prob)	
a <- pbinom(25, 40,0.5)
print(a)

#It is used to find a number whose cumulative value matches the probability value.	
sytnax:  qbinom(p, size, prob)
a <- qbinom(0.25, 40,01/2)
a

#It is used to generate required number of random values of a given probability from a given sample.	
syntax:  rbinom(n, size, prob)
a <- rbinom(6, 140,0.4)
a

#it is the probability of x successes in a period when the expected number of events is lambda (λ)	
syntax:  dpois(x, lamba)
dpois(a=2, lambda=3)+dpois(a=3, lambda=3)+dpois(z=4, labda=4)

#It is a cumulative probability of less than or equal to q successes.	
syntax:  ppois(q, lamba)
ppois(q=4, lambda=3, lower.tail=TRUE)-ppois(q=1, lambda=3, lower.tail=TRUE)

#It is used to generate random numbers from the poisson distribution.	
syntax:  rpois(n, lamba)
rpois(10, 10)

#This function provide information about the uniform distribution on the interval from min to max. It gives the density.	
syntax:  dunif(x, min=0, max=1)
dunif(x, min=0, max=1, log=FALSE)

#It gives the distributed function	
syntax:  punif(q, min=0, max=1)
punif(q, min=0, max=1, lower.tail=TRUE, log.p=FALSE)

#It gives the quantile function.	
sytnax:  qunif(p, min=0, max=1)	
qunif(p, min=0, max=1, lower.tail=TRUE, log.p=FALSE)

#It generates random deviates.	
syntax:  runif(x, min=0, max=1)	
runif(x, min=0, max=1)

#It is used to find the mean for x object	
syntax: mean(x, trim=0, na.rm=FALSE)
a<-c(0:10, 40)
xm<-mean(a)
print(xm)

#It returns standard deviation of an object.	
a<-c(0:10, 40)
xm<-sd(a)
print(xm)

# median.	
a<-c(0:10, 40)
xm<-meadian(a)
print(xm)

#It returns quantile where x is the numeric vector whose quantiles are desired and probs is a numeric vector with probabilities in [0, 1]	
syntax:  quantilie(x, probs)	
#It returns range.	
syntax:  range(x)	
a<-c(0:10, 40)
xm<-range(a)
print(xm)


Random Functions
----------------
#Generate a random number between 5.0 and 7.5
x1 <- runif(1,5.0,7.5)
x1

#If you want to generate multiple random value
x2 <- runif(4, 5.0, 7.5)
x2

#Generate a random integer between 1 and 10
x3 <- sample(1:10, 1)
x3

#f we want to generate more than one random number, 
x4 <- sample(1:10, 5, replace=T)
x4

#Select 6 random numbers between 1 and 40, without replacement
x5 <- sample(1:40, 6, replace=F)
x5

#Select 10 items from a list of 50
state.name #list of states
length(state.name)
sample(state.name, 10)

> ?runif
> ?sample
> ?.Random.seed

Range Function
--------------
Range function in R, returns a vector containing the minimum and maximum of all the given arguments

# R Range function - for a numeric vector
x <- c(2,7,1,-17,Inf,35,21,7)
x

#Range function with NA:
x <- c(2,7,1,-17,Inf,35,21,7,NA)
range(x,na.rm=TRUE)

#Range function for a character vector:
x<-c("a","h","x","i","j")
range(x)

#range() function in R of the dataframe column
mystu <- data.frame(name=c('a','b','c','d','e','f','g'), marks=c(43,45,67,32,56,23,54))
range(mystu$marks)

summary
range() function is used to find the lowest and highest value of the vector
range() function of a vector with NA values  by using na.rm = FALSE
Highest and lowest value of the column in dataframe is also accomplished using range() function.

zip liek functions using mapply
-------------------------------
dict <- new.env(hash = TRUE)
dict
Add <- function(key, val) dict[[key]]<- val
Add

name=c('a','b','c','d','e','f','g')
marks=c(43,45,67,32,56,23,54)
mapply(Add, name, marks)

Number system conversion
========================

Binary type
-----------
# R Program to convert an integer to binary
# Loading library
library(binaryLogic)
# Calling as.binary() function
as.binary(1)
as.binary(10)
as.binary(-1)
as.binary(0xAB)

Hexadecimal Type
----------------
# R Program to convert an integer to hexadecimal

library(gmp)
x <- '6917530144339624323'
x_bigz <- as.bigz(x)
as.character(x_bigz, b = 16)

#convert to the hexi to integer
strtoi('0x7f8cff8b')

V <- c(0xa373, 0x115c6, 0xa373, 0x115c6, 0x176b3)
sprintf("%d", V)
-WW345RFV 

Octal  Type
-----------
on <- as.octmode(c(16, 32, 127:129))
on

Boolean Type
------------
-boolean has two  logical values of values True or False
-R comes with Booleans (with predefined True and False displays that are basically just the integers 1 and 0). It also has a placeholder object called None. Let's walk through a few quick examples of Booleans (we will dive deeper into them later in this course).

Ex:
x=FALSE
y=TRUE
x = (1 == TRUE) #In R, True represents the value as 1 and False as 0
x
y = (1 == TRUE)
y
a = TRUE + 4
a
b = FALSE + 10
b

#We can use None as a placeholder for an object that we don't want to reassign yet:
#None placeholder
 b = None
#Show
print(b)
None

Number System
*------------*
1)Base 10(Decimal)- Represent any number using 10 digits [0–9]
2)Base 2 (Binary) — Represent any number using 2 digits [0–1]
3)Base 8 (Octal) — Represent any number using 8 digits [0–7]
4)Base 16(Hexadecimal) — Represent any number using 10 digits and 6 characters [0–9, A, B, C, D, E, F]

a=363
print((a) ,"Decimal system")
print(bin(a) ,"binary system")
print(oct(a) ,"octal system")
print(hex(a) ,"hex system")
 
Ref
https://www.quora.com/What-is-the-use-of-number-system-in-computer
https://www.tutorialspoint.com/computer_logical_organization/number_system_conversion.htm

Know ASCII , unicode and Numbers systems
----------------------------------------
-All computer data is just numbers,Each character of text is stored as a number.When you press a key on the keyboard, the keyboard sends a number, corresponding to the key that was pressed,When text is displayed on your monitor, each character is read from memory as a number.Computer doesn't understand English or Hindi or any language.But computer do understand only 0 and 1.
-0 means False ,1 means True
-ASCII codes represent text in computers, communications equipment, and other devices that use text
-UNicod is the subset of ASCII and extended upto 2^21 characters

test<-utf8ToInt("Apples")
test

tes1=intToUtf8(test)
test1


Refer ASCII_Tables.jpg

ref:
http://www.asciitable.com/ - ASCII table
http://www.differencebetween.net/technology/software-technology/difference-between-unicode-and-ascii/ - Def
https://youtu.be/61Bs7-ycL64
https://byjus.com/maths/number-system/
https://byjus.com/maths/hexadecimal-number-system/

Quiz:
=====

Assignment:
===========


Resources:
=========
https://resbaz.github.io/2014-r-materials/lessons/01-intro_r/data-structures.html
https://www.statmethods.net/management/typeconversion.html
https://rforexcelusers.com/calculate-percent-column-r/
https://blog.revolutionanalytics.com/2009/02/how-to-choose-a-random-number-in-r.html
https://www.datasciencemadesimple.com/range-function-in-r/
