Tokens
Comments
Not basic element
	statements
	indentations
	Expression
Syntax
variables

Tokens
======
-Tokens are the elementary building blocks of a programming language.
-Tokens can be defined as a punctuator mark, reserved words and each individual word in a statement.
-Token is the smallest unit inside the given program

There are following tokens in Python:
 Keywords
 Identifiers
 Literals
 operators

Keywords
--------
-Keywords are special reserved words which convey a special meaning to the compiler/interpreter. 
-Each keyword have a special meaning and a specific operation. 
-These keywords can't be used as variable. 

list of keywords:
Following is the List of Keywords.
if
else
while
repeat
for
function
in
next
break
TRUE
FALSE
NULL
Inf
NaN
NA
NA_integer
NA_real
NA_complex_
NA_character

Identifiers
-------------
-Variables are used to store data, whose value can be changed according to our need. Unique name given to variable (function and objects as well) is identifier
-Each program elements in a program are given a name called identifiers.
-An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.
-An Identifier is used to identify the literals used in the program. 

-The rules to name an identifier are given below.
*----------------------------------------------*
Identifiers can be a combination of letters, digits, period (.) and underscore (_).
It must start with a letter or a period. If it starts with a period, it cannot be followed by a digit.
Reserved words in R cannot be used as identifiers.

Valid identifiers in R
**-------------------**
total, Sum, .fine.with.dot, this_is_acceptable, Number5

Invalid identifiers in R
**--------------------**
tot@l, 5um, _fine, TRUE, .0ne

Best Practices
*------------*
Earlier versions of R used underscore (_) as an assignment operator. So, the period (.) was used extensively in variable names having multiple words.
Current versions of R support underscore as a valid identifier but it is good practice to use period as word separators

For example, a.variable.name is preferred over a_variable_name or alternatively we could use camel case as aVariableName

Literals
--------
-a literal is a notation for representing a fixed value in source code. ... In contrast to literals

operators
---------
-operators are like +, - , * ...etc
Ex
3+3 = 6

in detail will be discussion in Operator chapter

Comments
========
-Comments are very important while writing a program. They describe what is going on inside a program, so that a person looking at the source code does not have a hard time figuring it out.
-this are ignore by the intrepreter
 
Types of comments
-----------------
Genearlly there are three types
1)single line comment
2)multi line comment
3)docstrings

single line comment
*-----------------*
we use the hash (#) symbol to start writing a comment
Ex:
#how are you ?
#print("hello world")

R doesn’t support Multi-line and Documentation comments. It only supports single-line comments drafted by a ‘#’ symbol.
control + shift + C(windows) as shortcut in R studio.

how to write a better comments
**-------------------------**
-Use comments to describe what a function does and not the specific details on how the function does it.
-Try to remove as many redundant comments as possible. Try writing code that can explain itself, using better function/variable name choice.
-Try to make the comments as short and concise as possible

Statements
==========
-Instructions that a interpreter can execute are called statements
-Each statement is not ended with semicolon. its is identified by 
-For example, 

a = 1 
print(a) is an assignment statement. 

if statement, for statement, while statement, etc. are other kinds of statements which will be discussed later

in this language Multi-line statement does not support


Different type of statements
----------------------------
there two type so statements
1)control flow statements
2)looping statements.

...we shall learn in details in upcoming chapters.

Indentation
===========
-there is no indentations in this  language

Expression
==========
-An expression is a combination of values, variables, and operators
-if you type an expression on the command line, the interpreter evaluates it and displays the result:

1+1

-Although expressions contain values, variables, and operators, not every expression contains all of these elements. A value all by itself is considered an expression, and so is a variable.
-Confusingly, evaluating an expression is not quite the same thing as printing a value

Assign:
Write a expression for 100 
50+50
110-10
10*10

Syntax
======
its nothing but a set of rules for specific purpose

Example:
print('hello')
print 'hello' # cannot write like this.
'hello' print  #cannot write like this as well.

Variable
========
its nothing but the value stored temporarily

var =1   #using assignment operator 
var1<- 0 #using the Lesser and - operator combinations

...we shall learn in details in upcoming chapters.

Quiz:
=====

Assignment:
===========

Resources:
=========

