Intro
Creating Strings
Printing Strings
Accessing String elements
String Properties
Escape characters
String Formatting(Huge chapters)
String Regular expressions
String Methods

Intro
=====
*Strings are a group of characters written inside a single or double-quotes
*Internally R stores every string within double quotes, even when you create them with single quote

Creating a String
================
'Hello World' #using Single quotes
"Hello world" #using double quotes

mychar <- "R is a Super Programming language"
cat(mychar,"\n")
class(mychar)

mychar <- 'R is a Super Programming language'
cat(mychar,"\n")
class(mychar)

mystr<-' I'm using single quotes, but this will create an error'# Be careful with quotes!
#for correcting the above , use double quotes
mystr<-"I'm using single quotes, but this will create an error"

Rules Applied in String Construction
------------------------------------
*The quotes at the beginning and end of a string should be both double quotes or both single quote. They can not be mixed.
*Double quotes can be inserted into a string starting and ending with single quote.
*Single quote can be inserted into a string starting and ending with double quotes.
*Double quotes can not be inserted into a string starting and ending with double quotes.
*Single quote can not be inserted into a string starting and ending with single quote.

Printing a String
=================
using R studio, you can directly enter

# We can simply declare a string
'Hello world'

cat("hello world") #using cat function
print("Hello world") #using print
paste("hello world","welcome to R programming") #using paste functions

Example of valid strings
*----------------------*
a <- "learn the R Programming language"
print(a)

a <- 'learn the R Programming language'
print(a) #observe the output R takes internally Double quotes

a <- "learn the R 'Programming language"  
print(a) #observer the output 

a <- 'learn the R "Programming language'
print(a) #observer the output 

example of In-valid strings
*----------------------*
a <- "learn the R "Programming language'
a <- 'learn the R 'Programming language'
a <- "learn the R"Programming language"

Accessing String elements
=========================
-The individual characters of a string can be extracted from a string by using the indexing methods of a string
-There are two R’s inbuilt functions in order to access both the single character as well as the substrings of the string
-substr() or substring() function in R extracts substrings out of a string beginning with the start index and ending with the end index

Syntax:
substr(..., start, end)
or 
substring(..., start, end)

x <- "Learn R programming"
substr(x,1,1) #grapping from start 1 to end 1
substr(x,1,5) #grapping from start 1 to end 4
substr(x,7,7) #grapping from start 7 to end 7
substr(x,8,8) #grapping from start 8 to end 8

String Properties
=================
String in R are mutable in nature.

x <- 'hello world'
x <- 'ganesh' #its is able to override.

#Joining the strings
x <-'ganesh'
y <-'babu'
paste(x,y)

#length of the string
x <- 'hello world'
nchar(x)

Escape characters
=================
To insert characters that are illegal in a string, use an escape character
An escape character is a backslash \ followed by the character you want to insert.

Ex:
txt="we are so- called "Humans" to serve others"
txt="we are so- called \"Humans\" to serve others" # fix the problem insert the backlash

There are difference types:
\': single quote. You don’t need to escape single quote inside a double-quoted string, so we can also use "'" in the previous example.
\": double quote. Similarly, double quotes can be used inside a single-quoted string, i.e. '"'.
\n: Starts a new line.
\t: tab character.
\b: Backspace.
\": Double quote.
\r: Carriage return.
\\: Single Backslash

Example:
print("positive\\negative") #backslash (\)
print("\'positive\'") #Single quote (')
print("\"positive\"") #Double quote (")

String Formatting
=================
String formatting lets you inject items into a string rather than trying to chain items together using commas or string concatenation. As a quick comparison, consider:

for example
company='Novo nordisk'
experience='7'
name ='Ganesh babu'

#using cat functions
cat("Myself,",name,'working in',company,' for past ',experience,' years.') 
#using paste functions
paste("Myself,",name,'working in',company,' for past ',experience,' years.') 

There are three ways to perform string formatting
1)using cat functions (classical way)
2)using paste functions (classical way)
3)using stringf() in R

Using stringf()
--------------
stringf()
sprintf("%s is %f feet tall\n", "Sven", 7.1)      # OK
sprintf("%s is %i feet tall\n", "Sven", 7  )  # OK
sprintf("%.0f%% said yes (out of a sample of size %.0f)", 66.666, 3)
sprintf("%f", pi)
sprintf("%.3f", pi) #Format Places Before Decimal Point
sprintf("%1.0f", pi)#Format Places Before Decimal Point
sprintf("%5.1f", pi)#Format Places Before Decimal Point
sprintf("%05.1f", pi)#Format Places Before Decimal Point
sprintf("%+f", pi) #To print the Non-Numeric Values in R,
sprintf("% f", pi) #
sprintf("%-10f", pi) # left justified
sprintf("%e", pi) #Control Scientific Notation using sprintf() function
sprintf("%E", pi) #Control Scientific Notation using sprintf() function
sprintf("%g", pi) #Control Scientific Notation using sprintf() function
sprintf("%g",   1e6 * pi) # -> exponential
sprintf("%.9g", 1e6 * pi) # -> "fixed"
sprintf("%G", 1e-6 * pi)

sprintf("%1.f", 101)## no truncation:

## re-use one argument three times, show difference between %x and %X
xx <- sprintf("%1$d %1$x %1$X", 0:15)
xx
xx <- matrix(xx, dimnames = list(rep("", 16), "%d%x%X"))
noquote(format(xx, justify = "right"))

sprintf("%09s", month.name)
n <- 1:18
sprintf(paste0("e with %2d digits = %.", n, "g"), n, exp(1))

## Using arguments out of order using %
sprintf("second %2$1.0f, first %1$5.2f, third %3$1.0f", pi, 2, 3)

## Using asterisk for width or precision
sprintf("precision %.*f, width '%*.3f'", 3, pi, 8, pi)

## Asterisk and argument re-use, 'e' example reiterated:
sprintf("e with %1$2d digits = %2$.*1$g", n, exp(1))

## re-cycle arguments
sprintf("%s %d", "test", 1:3)

## binary output showing rounding/representation errors
x <- seq(0, 1.0, 0.1); y <- c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1)
cbind(x, sprintf("%a", x), sprintf("%a", y))

String Regular expressions
==========================
The regular expressions can be defined as the sequence of characters which are used to search for a pattern in a string. 

The details concepts are explained in API/Regular Expressions chapters.

Basic Built-in String methods
=============================
Objects are usually have built-in methods. These methods are functions inside the object (we will learn about these in much more depth later) that can perform actions or commands on the object itself.

split case
---------
x <- "ganesh babu"
strsplit(x," ") #split based on delimiter
strsplit(x," ")[[1]] #extract only that element

#using str_split
https://stringr.tidyverse.org/reference/str_split.html

Strips the spaces
-----------------
#generally used to trimt he leading and lagging spaces in the given string.
a=" ganesh babu ";
trimws(a, which = c("left")) #Strip Leading Space left
trimws(a, which = c("right")) #Strip Trailing Space
trimws(a, which = c("both")) #Strip leading and trailing space
gsub('\\s+', '', a) #Strip all the Spaces in Column in R:

find functions
--------------
Searches the string for a specified value and returns the position of where it was found

text <- "This should be supported on all platforms as it is a feature of C99. The format is not uniquely defined"
grep("ganesh",text) #return the position of the string of the first index

text1 <- c("gbag","gbag","brga",'rubn','prkh','zktu')
grep("brga",text1)

count function get the occurrence of a string.
-----------------------------------------------
text1 <- c("gbag","gbag","brga",'rubn','prkh','zktu')
length(grep("gbag",text1))

replace
-------
text <- "This should be supported on all platforms as it is a feature of C99. The format is not uniquely defined"
gsub("supported","support",text)

#in file handing scenario
x <- c("file_a.csv", "file_b.csv", "file_c.csv")
y <- gsub("file_","", x)
y

case changes
------------
a<-"hello world"
a
to_upper(a) #upper case
tolower(a) #lower case

library(stringr)
#https://stringr.tidyverse.org/
str_to_title(a) #title CASE

Text alignment 
---------------
install.packages("DescTools")
library("DesTools")
x='  Ganesh Babu'
x.center(20) # The center() method will center align the string, using a specified character (space is default) as the fill character.
x.ljust(20) #for left 
x.rjust(20) #for right

length of the string
--------------------
library(DescTools)
x="ganesh babu"
str_length(x)

Concatentations
---------------
cat("ganesh","babu")
paste("ganesh","babu","g")

start ,end and contains of string
-----------------------

#using grepl functions
x="ganesh babu"
grepl('^ga',x)
grepl('bu$',x)

#using substr funcionts
substr(x, 1, 2) == 'ga'
substr(x, nchar(x)-1, nchar(x)) == 'bu'

#r3.3 the below functions exists
startsWith(x,"ga")
endsWith(x,"bu"

-for text contain.
x <- 'ganesh babu'
#using grepl function
grepl("ne",x)
grepl("za",x)

#using str_dection function
library(stringr)
str_detect(x,"ne")
str_detect(x,"za")

checking numeric or string
--------------------------
x="ganesh"
y=23
z=32L
is.character(x) #check string
is.numeric(y)  #check numeric
is.integer(z)  #check integer

using membership operators
---------------------------
x= c("ganesh","vedha","rect","rocky")

#using in operator
'ganesh' %in% x
'rect' %in% x
'nadi' %in% x

#using not in operator using !
`%!in%` <- Negate(`%in%`) #this is tricky
'ganesh' %!in% x
'rect' %!in% x
'nadi' %!in% x

Occurence of character in string
--------------------------------
x <- 'ganesh babu'

#using str_count function
library(stringr)
str_count(x,"b")
str_count(x,"a")

#base R
lengths(lapply(x, grepRaw, pattern = "b", all = TRUE, fixed = TRUE))

#using gregexpr
lengths(gregexpr('a', x))

encoding the string
-------------------
txt = "My name is Ståle"
txt

#using stringi package
library(stringi)
stri_trans_general(txt, "Latin-ASCII")

Tabing the string
------------------
x <-'ganesh babu'

#using cat function
cat(x,"\t",3,"\n")
ot=cat(x,"\t",3,"\n")

#using paste function
paste(x,3,sep="\t")
#store in a output
ot=paste(x,3,sep=":\t")
ot

index
------
x<-"ganesh babu"

#using substr function
i=1
substr(x,i,i+1)

#using grep and strsplit function
grep("[gb]", strsplit(x, split="")[[1]])

Quiz:
=====

Assignment:
===========

Resources:
=========
https://www.tutorialspoint.com/r/r_strings.htm
https://www.gastonsanchez.com/r4strings/
https://www.geeksforgeeks.org/r-strings/
https://www.r-bloggers.com/2020/01/objects-that-feel-mutable-in-r/
https://www.tutorialkart.com/r-tutorial/find-length-of-string-in-r-programming/
https://rstudio-pubs-static.s3.amazonaws.com/74603_76cd14d5983f47408fdf0b323550b846.html
https://bookdown.org/yihui/rmarkdown-cookbook/latex-output.html
https://cran.r-project.org/doc/manuals/R-lang.html#Literal-constants  --officials
https://www.datacamp.com/community/tutorials/strings-in-r
#https://stringr.tidyverse.org/
https://www.rdocumentation.org/packages/DescTools/versions/0.99.41/topics/StrAlign