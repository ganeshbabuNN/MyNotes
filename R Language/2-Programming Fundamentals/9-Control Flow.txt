Control Flow
============
Introduction
Type of statments
	1)Selection(conditional) statements 
	2)Iteration statements
	3)Transfer statements

Introduction
============
Control flow statements govern the flow (order) of control (execution) in a program during execution. There are three main categories of control flow statements:

Selection(conditional) statements:
=================================
Decision making is the most important aspect of almost all the programming languages. As the name implies, decision making allows us to run a particular block of code for a particular decision. Here, the decisions are made on the validity of the particular conditions. Condition checking is the backbone of decision making.

*If statement
*if else statment
*else-if statment
*Switch Statment

if statement
------------
The if statement is used to test a specific condition. If the condition is true, a block of code (if-block) will be executed.

syntax:
ex:
if(boolean_expression) {  
   // If the boolean expression is true, then statement(s) will be executed.   
}  
	
if TRUE{
  print("it is true")
}


#ex1:program to check even number of not
num=as.integer(readline("enter the number"))
if(num%%2==2){
  print("this is a even number")
}

#ex2:Program to print the largest of the three numbers
a=2
b=3
c=2

if(a>b){
  cat("a is largest")
}

if(b>a){
  cat ("b is largest")
}

if(c>a){
  cat("c is largest")
}

NOTE: do not forget to put a parentheis in a single boolean expression or else it shall throw an error.

If else statment
----------------
The if-else statement is similar to if statement except the fact that, it also provides the block of the code for the false case of the condition to be checked. If the condition provided in the if statement is false, then the else statement will be executed.

Syntax:
if(boolean_expression) {  
   // statement(s) will be executed if the boolean expression is true.  
} else {  
   // statement(s) will be executed if the boolean expression is false.  
} 

#Ex1: Program to check your eligablity to vote.
age <- 43
if (age>18){
  cat("your eligable for vote")
}else{
  cat("your not eligable for vote")
}


#ex2:program to check even number of not
num <- 3
if(num%%2==0){
  print("The number is even")
}else{
  print("the nubmer is odd")
}

Else-if statment
----------------
The elif statement enables us to check multiple conditions and execute the specific block of statements depending upon the true condition among them. We can have any number of elif statements in our program depending upon our need. However, using elif is optional.

Syntax:
if(boolean_expression 1) {  
   // This block executes when the boolean expression 1 is true.  
} else if( boolean_expression 2) {  
   // This block executes when the boolean expression 2 is true.  
} else if( boolean_expression 3) {  
   // This block executes when the boolean expression 3 is true.  
} else {  
   // This block executes when none of the above condition is true.   
}
	
#ex1:Program to check which number is equal to 10 or 50 or 100
num <- 20
if (num==10){
  print("Number is equal to 10")
}else if(num==50){
  print("number is equal to 50")
}else if(num==100){
  print("numbe ris equal to 100")
}else{
  print("number is not equal to either 10 or 50 or 100")
}
	
#ex:Program to check the Grade of the student marks
#A --> greater 85 and less or equal to 100
#B+ --> greater 60 and less or equal to 85
#B --> greater 40 and less or equal to 60
#C --> greater 30 and less or equal to 40
#Fail --> < 30

marks = 40
if (marks >85 & marks<=100){
  print("Grade A")
}else if(marks >60 & marks<=85){
  print("Grade B+")
}else if(marks >40 & marks<=60){
  print("Grade B")
}else if(marks>30 & marks<=40){
  print("Grade C")
}else{
  print("Fail")
}

NOTE: do not forget to put a parentheis in a double boolean expression or else it shall throw an error.+

Switch Statment
---------------
-A switch statement is a selection control mechanism that allows the value of an expression to change the control flow of program execution via map and search.
-There are basically two ways in which one of the cases is selected:
1)If the cases are values like a character vector, and the expression is evaluated to a number than the expression's result is used as an index to select the case.
2)When the cases have both case value and output value like ["case_1"="value1"], then the expression value is matched against case values. If there is a match with the case, the corresponding value is the output

syntax:
	switch(expression, case1, case2, case3....)  

#ex1
x <- switch(
  2, 
  "ganesh",
  "babu",
  "Veer",
  "gyn"
)

print(x) #prints by index

#ex2
x=1
y=2
a<- switch(
  paste(x,y,sep=""),
  "11"="Hello 11",
  "12"="Hello 12",
  "22"="Hello 22",
  "42"="Hello 42",
  "42"="Hello 42",
  "66"="Hello 66",
)

print(a)

#ex3
a="14"
x=1
y=2

m<-switch(
  a,
  "12"=cat("additions",x+y),
  "13"=cat("Subractions",x-y),
  "14"=cat("Multiplications",x*y),
  "15"=cat("Division",x/y)
)

print(m)


Iteration statements:
=====================
The flow of the programs written in any programming language is sequential by default. Sometimes we may need to alter the flow of the program. The execution of a specific code may need to be repeated several numbers of times.
*For Loop
*While Loop

1)For loop
----------
The for loop is used in the case where we need to execute some part of the code until the given condition is satisfied. The for loop is also called as a per-tested loop. It is better to use for loop if the number of iteration is known in advance.

Syntax:
for (initialization_Statement; test_Expression; update_Statement)  
{  
    // statements inside the body of the loop   
}  		

Ex: Program to iterate the sequences types, list, tuple, dict and sets

#iterate a vector
names <- c("Ganesh","babu","Kumar","Veeresh")
for(i in a){
  print(i)
}

#iterate a list
names <- list("Ganesh","babu","Kumar","Veeresh",12,TRUE,12L)
for(i in names){
  print(i)
}

#iterate a matrix
names <- matrix(c("Ganesh","babu","Kumar","Veeresh"),nrow=2,ncol=2,byrow = TRUE)
for(r in 1:nrow(names))
  for (c in 1:ncol(names))
    print(paste("names[",r,",",c,"]=",names[r,c]))

print(names)

#create a list of three vectors
company<- list(empname=c("ganesh","babu","kumar","jaitely"),
               age=c(12,34,23,45),
               status=TRUE)
for(p in company){
  print(p)
}

#count of no of evens numbers in a vector
x <- c(2,5,3,9,8,11,6,44,43,47,67,95,33,65,12,45,12)  
count=0
for (val in x){
  if(val%%2==0){
    count=count+1
    #print(val)#to display the those number
  }
}
print(count)

#iterate a string
x<-"Ganesh babu"
count=0
for (i in x){
  print(i[count])
  count=count+1
}


Nested for loop in python
*-----------------------*
syntx:
for <variable_Name1> in <iterable/Sequence>: #outer loop
	for <variable_Name2> in <iterable/Sequence>: #inner loop 
		#statements
	#other statments

#print the tables 
for(i in c(1:10)){
  for (j in c(1:5)){
    print(paste(i,"X",j,"=",i*j))
  }
}

Repeat Loop
-----------
-A repeat loop is used to iterate a block of code
-It is a special type of loop in which there is no condition to exit from the loop
-For exiting, we include a break statement with a user-defined condition
-A repeat loop constructs with the help of the repeat keyword in R

syntax:
repeat {   
   commands   
   if(condition) {  
      break  
   }  
} 

#using vector
v <- c("Hello","World","bangaluru")
length(v)
cnt <- 2
repeat{
    print(v)
    cnt=cnt+1
    if(cnt ==length(v)){
      break
    }
}

#Example 3: Infinity repeat loop
total <- 0
num<-10
repeat{
  total=total+num
  num=num+1
  cat("sum is =",total,"\n")
}

#Ex 4:repeat loop with next
a<- 1
repeat{
  if(a==10)
    break
  if(a==7){ #skip the 7
    a=a+1
    next
  }
  print(a)
  a=a+1
}


while loop
-------------
The while loop is to be used in the scenario where we don't know the number of iterations in advance. The block of statements is executed in the while loop until the condition specified in the while loop is satisfied. It is also called a pre-tested loop.

sytnax:
while (test_expression) {  
   statement  
}  


#print the number from 1 to 10
i <- 1
while (i<10){
  print(i)
  i=i+1
}

#print the table for given number
num=3
i=1
while (i<11){
  print(paste(num,"X",i,"=",num*i))
  i=i+1
}

#print using a list
mylist =list("H","yellow",3,03,99,'Ganesh')
i=0
while (i<length(mylist)){
  print(mylist)
  i=i+1
}

infinite loop
If the condition is given in the while loop never becomes false, then the while loop will never terminate, and it turns into the infinite while loop.

mylist =list("H","yellow",3,03,99,'Ganesh')
i=0
while (i<length(mylist)){
  print(mylist) 
}

Transfer statements:
====================
1)break
2)next 

We can use break, continue, and pass statements in our loops to add additional functionality for various cases. The three statements are defined by:

break statement
---------------
Break Statement - When the break statement is encountered, it brings control out of the loop.
Breaks out of the current closest enclosing loop.

#break in repeat loop
a <- 1
repeat {
  print("hello")
  if(a>=5)
    break
  a=a+1
}

a<-c("hello","world")
count<- 2
repeat {
  print(v)
  count <- count+1
  if (count >5){
    break
  }
}

#break in while loop
a <-1
while (a<10){
  print(a)
  if(a==5){
    break
  }
  a=a+1
}

#break in a for loop
for(i in c(2,4,6,8,10)){
  for(j in c(1,3)){
    if (i==6){
      break
    }
    print(i)
  }
  
}


Next statment
-------------
-The next statement is used to skip any remaining statements in the loop and continue executing. 
-In simple words, a next statement is a statement which skips the current iteration of a loop without terminating it

#next in repeat looop
a<-1
repeat{
  if(a==10)
    break
  if(a==5)
    next
  print(a)
  a<-a+1
}

#next in while loop
a<-1
while(a<10){
  if(a==5)
    next
  print(a)
  a=a+1
}

#next in for loop
for(val in c(1:10)){
  if(val==3)
    next
  print(val)
}

#
j<-0
while(j<10){
  if(j==7){
    j=j+1
    next
  }
  cat("the number is=",j,"\n")
  j=j+1
}

break and continue statements can appear anywhere inside the loop’s body, but we will usually put them further nested in conjunction with an if statement to perform an action based on some condition.

Quiz:
=====

Assignment:
===========
A1)how to check if a greater then b
A2)how to check if the given value is a number or not
A3)how to check if the given value is a odd or not
A4)how to check if the given value is a even or not
A5)how to check is given year is a leap year or not
A6)how to check is given value is a even or not
A7)how to check if the given value is a string or number.
A8)how to check the given value is available in the given string("Life","is","Beautiful") or not
A9)how to check if given value is less, show if it is a even or odd and same for value is greater then 20 , show if it even or odd
A10)how to check given character is vowel or constant?
A11)how to check if the given age is child(<18) or a old guy(>30) or a adult
A12)how to check if the marks given is first class(>75), second class(>65) and third class(>35) and fail(<35)
A13)Build a calculator for options addition,subraction,multiplications and divisions.
A14)how to find which is the largest of given 4 numbers
A15)Print the table of the given number
A16)Print the below Star
*
**
***
****
*****
A17)Print the cumulative sum of that given number
A18)Print the number from 1 to 20 , skip the odd numbers
A19)Print the number from 1 to 20 ,but add first print odd sequence like 3
A20)Print the cube of the number of the given number in cumulative way.
A21)Program to find the sum of the digits of the number
A22)Program to check a number is palindrome or not
A23)program to find the frequency of a digit in the number
A24)Program to check a number is Armstrong or not 
A25)How to check the number is a prime number or not
A26)Print the sum of all positive numbers in array c(10L,-11L,12L,-13L,14L,-15L,16L,-17L,18L) 
Resources
=========
https://www.tutorialspoint.com/r/r_decision_making.htm
https://www.tutorialspoint.com/r/r_loops.htm