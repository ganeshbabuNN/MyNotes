-------------------------------------------------------------------------------------------------------------
-- Employee attendance is stored in the EmployeeMuster table. This Attendance column of this table holds Present, Absent or Sick Leave.
-- Write a procedure that:
-- 1. Accepts employee number as a parameter
-- 2. Calculates the number of leaves from the data available in the EmployeeMuster table
-- 3. Provides the updated number of leaves as a value
-------------------------------------------------------------------------------------------------------------
	CREATE OR REPLACE PROCEDURE CalculateEmpLeaves(varEmployeeNo IN Varchar2, varLeaves OUT Number) IS
		BEGIN
		/* Retrieving the number of leaves from EmployeeMuster. */
			SELECT COUNT(*) INTO varLeaves FROM EmployeeMuster 
				WHERE EmployeeNo = varEmployeeNo AND Attendance <> 'Present';
		END;
	/
--------------------------------------
-- Test the procedure using SQL
--------------------------------------
	VARIABLE varNoOfLeaves Number;
	EXEC CalculateEmpLeaves(4, :varNoOfLeaves);
	PRINT varNoOfLeaves;
--------------------------------------
-- Test the procedure using PL/SQL
--------------------------------------
	SET SERVEROUTPUT ON
	DECLARE
		varNoOfLeaves Number;
		varEmpNo Number;
	BEGIN
		varEmpNo := &EmployeeNumber;
		CalculateEmpLeaves(varEmpNo, varNoOfLeaves);
		DBMS_OUTPUT.PUT_LINE('Employee No: ' || varEmpNo || ' has taken ' || varNoOfLeaves || ' leaves till date.');
	END;
	/

-------------------------------------------------------------------------------------------------------------
-- The Accounts table holds a column called CurrentBalance. This column is regularly updated with the credits or debits.
-- Write a procedure that:
-- 1. Accepts Account Number and the amount to be credited
-- 2. Updates the CurrentBalance column value in the Accounts table
-- 3. Adds a new account in the Accounts table if the Account number specified is not found
-------------------------------------------------------------------------------------------------------------
	CREATE PROCEDURE AccountCredit (
		varAccountNo Number, varCreditAmount Number) AS 

		varBalance Number; 
		varUpdatedBalance Number; 

		BEGIN
		/* Defining SQL query to retrieve the current balance */
			SELECT CurrentBalance INTO varBalance FROM Accounts 
				WHERE AccountNo = varAccountNo FOR UPDATE OF CurrentBalance;
		/* Calculating the new balance */
			varUpdatedBalance := varBalance + varCreditAmount; 
		/* Updating current balance in the Accounts table */
			UPDATE Accounts SET CurrentBalance = varUpdatedBalance 
				WHERE AccountNo = varAccountNo; 
		/* Making the changes permanent */
			COMMIT; 

			EXCEPTION 
			/* Defining an exception to handle new account opening */
				WHEN NO_DATA_FOUND THEN 
					INSERT INTO Accounts (AccountNo, CurrentBalance) 
						VALUES(varAccountNo, varCreditAmount); 
			/* Defining an exception to handle other errors */
				WHEN OTHERS THEN 
					ROLLBACK; 
		END AccountCredit;
	/
--------------------------------------
-- Execute the procedure
--------------------------------------
	EXEC AccountCredit(2, 2000);
	EXEC AccountCredit(15, 10000);

-------------------------------------------------------------------------------------------------------------
-- Write a procedure that:
-- 1. Accepts Department Number and the percentage of raise in salary
-- 2. Updates the Salary of all those employees under that department
-------------------------------------------------------------------------------------------------------------
	CREATE OR REPLACE PROCEDURE IncrementDeptSal(varDeptNo Number, varIncrement Number DEFAULT 1.10) IS
	/* Defining a cursor to hold salary of all employees in a particular department */
		CURSOR curEmployees (varDeptNo Number) IS
			SELECT Salary FROM Employees WHERE DeptNo = varDeptNo
				FOR UPDATE OF Salary;
		BEGIN
		/* Defining a For loop */
			FOR typEmployees IN curEmployees(varDeptNo)
		/* Traversing through the loop */
			LOOP
			/* Updating salary of the current employee in the loop */
				UPDATE Employees SET Salary = typEmployees.Salary *((100 + varIncrement)/100)
					WHERE CURRENT OF curEmployees;
			END LOOP;
		/* Making the changes permanent */
			COMMIT;
		END IncrementDeptSal;
	/
--------------------------------------
-- Execute the procedure
--------------------------------------
	EXEC IncrementDeptSal(3);
	EXEC IncrementDeptSal(1, 5);

------------------------------------------------------------------------------------------------------------
-- Write a function that accepts AccountNo and returns Current balance
------------------------------------------------------------------------------------------------------------
	CREATE FUNCTION FetchAccountBal(varAccountNo IN Number) RETURN NUMBER IS 
		varCurrentBalance Number(12, 2);
		BEGIN
		/* Retrieving the current balance */
			SELECT CurrentBalance INTO varCurrentBalance FROM Accounts 
				WHERE AccountNo = varAccountNo; 
			RETURN(varCurrentBalance); 
		END;
	/

--------------------------------------
-- Execute the function
--------------------------------------
	SELECT FetchAccountBal(2) FROM DUAL;

-----------------------------------------------------------------------------------------------------------
-- Write a function that accepts DeptNo and returns Total salaries of all the employees in that department
-----------------------------------------------------------------------------------------------------------
	CREATE FUNCTION SalOfDept(varDeptNo Number) RETURN NUMBER IS
		varTotalSal Number;

		BEGIN
			varTotalSal := 0;
		/* Defining a For loop with an inline cursor */
			FOR typSal IN (SELECT Salary FROM Employees WHERE DeptNO = varDeptNo) 
			LOOP
			/* Calculating total salary */
				varTotalSal := varTotalSal + typSal.Salary;
			END LOOP;
			RETURN varTotalSal;
		END SalOfDept;
	/
--------------------------------------
-- Execute the function
--------------------------------------
	SELECT SalOfDept(2) FROM DUAL;