Intro
=====
-Oracle Recently introduced the DML error logging features
-This features is useful in situations such as
*Updating 30 millions records. the update operations fails after 30 mintues just because on of the record amongst those 30 millions fails a check constraint
*An INSERT AS SELECT command fails on the row number 800 out of 1000 just coz one column value is too large.

-The DML Error logging features allows adding a clause to the INSERT statemetns that causes the 999 correct records to the be inserted successfully and the one erroneous record to be written out to a error logging table for resolving laters.

Creating the Error Logging Table
================================
-Create the error logging table to hold the DML Errors.
-Oracle provides a buil-in PL/SQL packaged named DBMS_ERRLOG, Specially for this purpose


begin
DBMS_errlog.create_error_log(<tableName>,<ErrorTable Name>);
end;
/

Logging An Error
================

Syntax:
	LOG ERRORS [INTO <Schema>.<Table>] [(<SimpleExpression>) [REJECT LIMIT{Integer|UNLIMITED}]
where
1)Schema.Table is the name of the error logging table
2)REJECT LIMIT clause is technically optional, the default reject limit is zero. the error logging clause is ineffective if a reject limit is not specified
3)SimpleExpression sub clause allows specifying a statement tag, which is logged in the ora_ERR_TAG$ field of error logging table, to identify which statement caused the error.

example
LOG ERROR INTO erroremployee('Record number: '|| TO_CHAR(i)) REJECT LIMIT 1;
-this populates the ORA_ERR_TAG$ field with the iterations number held in the counter variable named i;

select ORA_ERR_NUMBER$,ORA_ERR_MESG$,ORA_ERR_ROWID$,ORA_ERR_OPTYP$,ORA_ERR_TAG$
from errorEmployeeTable;

Exp:-
ORA_ERR_NUMBER$ holds the oracle error number.
ORA_ERR_MESG$ holds the oracle error message.

ROWID is null as the DML command that failed was INSERT

if the insert operations are rolled back as:

Sol:
	ROLLBACK;

the error log table ErrEmployeetable still holds the failed insert entry.

-Oracle logs the DML erros as autonomous transaction and hence rolling back to the DML that spwaned the error does not clear the error logging table.
-*The error loggint table can be emptied using standard DELETE statements.
The standard pratice that is followed with DML Error logging is:
a)Execute DML Statement
b)Query the Error logging table to determine errors if any.
c)If the error logging table holds errors

COMMIT

otherwise: ROLL BACK

-the application develoeprs find the this features very useful as appropriate informations on exactly which rows failed can be passed on to the application or the debug log.

