JOINS
=====

-A JOIN is an SQL query that combines records from two or more tables. Oracle performs a join whenever multiple tables appears in the FROM clause
-it specified how to relate multiple tables in the SQL Query
-When data need to be retrieved from more then one table, in that situations JOINS are used.
-Mostly JOIN key is the primary key of one table and a foreign key in another table.
-as long as the column are matched, the join can be performed

TYPES OF JOINS
--------------
1)Inner join
2)Outer Join
 a)left outer join
 b)right outer join
 c)full outer join
3)Cross Join
 a) cartesian product
4)Self Join
5)Non-Equi Joins

Syntax
=======

ANSI Style
----------
-In the ANSI SQL-92 standards , joins are performed in the JOIN Clause of the query. This join methods is known as the ANSI Style.

SELECT <Column_name1>,<Column_name2>,<Column_nameN>
FROM <TableName1> <JOIN TYPE> <TableName2>
ON <TableName1>.<Column_name1>=<TableName2>.<Column_name1>
WHERE <Condition>
ORDER BY <Column_name1>,<Column_name2>,<Column_nameN>;


Theta Style
-----------
-In Non-ANSI standard implementations the join operation is performed in the WHERE clause. this join method is known as the Theta style

SELECT <Column_name1>,<Column_name2>,<Column_nameN>
FROM <TableName1> ,<TableName2>
WHERE <TableName1>.<Column_name1>=<TableName2>.<Column_name1>
AND <Condition>
ORDER BY <Column_name1>,<Column_name2>,<Column_nameN>;

Where
-<Column_name1> in <TableName1> is usually that table Primary Key
-<Column_name2> in <TableName2> is a Foreign Key in that table.
-Both <Column_name1>,<Column_name2> must have a same data type and for certain data types, the same size


1)Inner join
------------
-This type of joins is usually a choice in situtations where selecting only those rows that have values in common, in the columns specified in the join conditions
-In Shortly, it returns all rows from both tables where there is a match.

2)Outer Join
-----------
-It does not require each record in the two joined table to have same record. it may exits or no. In this situation outer join are used
-It returns all the rows that are returned by an inner join with all those rows of one table that do not match with rows of other table.

*Left outer join :
-A left outer join returns all the values from the left table, plus mathcing values from the right table ( or NUll in case of no mathcin join predicate).

*Right Outer Join:
-A right outer join returns all the values from the right table and matched values fromt he left table(NULLin case of no mathing join predicate)

*Full outer join:
-A Full outer join combines the result of both left and right outer joins. The joined table contains all records from both tables with NULLS for missing matches on either side.


3)Cross Join
------------
-it always returns a Cartesian product. It combines every row from the left able with every row in the right table.
-In SOme situations it is used, where to select all possible combinations of rows and columsn from both tables.

Cartesian Product
-----------------
--THe conditions join plays a important role to display a meaning full informations. if the conditions not exists, the query returns all rows from one table with all the rows from the other table. this result set is known as Cartesian product.
-this type of queries Return lot of rows

Example:
if the table named employees holds 100 records and another table name departments holds 20 records.
In such scenario, if both these table are joined with a join conditions, the result will be 2,000 Recrods. The reason , each row from employee table would be joined in each row in deparment table, which would yield a total of 100 rows multiplied by 20 rows i,e 2,000 rows.

4)Self Join
-----------
-this type join do not include two different tables.
-A table can be joined by itself, in Some situations, it is useful when values from one column need to be compared with other values in the same column ,same table.
-it executed logically making two copies of the same table.



Non-Equi Joins
=============
- it uses an operator other than the equality operator [=] in the join.

some of the operators are
-Not-Equal [<>]
-Less than [<]
-Greater Than [>]
-Less than or equal to [<=]
-Greate then or equal to [>=]
-LIKE
-IN
-BETWEEN

-Non-Equi join are rarely used
