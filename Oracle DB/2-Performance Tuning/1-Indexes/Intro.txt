Intro
=====
-Index helps retrieving the requied data quicker.
-For example, there exists a bok called "java for professional". A person having the book wants to read a topic on views.instead of reading the book right from the very first chapter until the topic on views is found, it would have been much quicker to locate the index section which is usually available at the end of the book, determine the page number of the book that holds the topic on views and finally jump to that page directly. Going to Index saves lot of time and is therefore a more efficient method of lcoating the information required. 
The Same principle applies when retrieving data from a database table.
-In the absence of an index on the database table, oracles scans through the entire table to locate the desired information.if an index is in place, oracle simply locates the index to determine the place that holds the required data and then jumps to the identified place directly to get the required data. this is much faster.
-It recommended to created index on the tables. An index is a physical storage structure that provides rapid access to rows of a table based on values of one ore more columns.(it consuems additional disk space, it is required to update the index every time a row is added to a table and every time an index column is updated in existing rows.

How it works
============
-When an index is created on a table column, Oracle internally forms a two dimensional matrix completely independent of a table on which the index is being created
1)One column stored sorted data, extracted from the the table column on which index is created
2)the other column storeds the actual location/physical address of the record in the oracle DB tables that holds the Data.It uses ROWID values against each column the holds the index data in the matrix.(it is a pseudo column that uniquely identifies a rows within a table)
-Every time data inserted in the table, Oracle automatically inserts the same value in the index.
-This is done for every data value inserted into the index. This ROWID indicates exactly where the records is stored in the table.
-Each Key in an Index is associated with a rowID that points to the associated row's address for fast access.

When to Uses Indexes
====================
-In general indexes improves performance when they are created on fields used in table joins not dealing with the small tables.
-Use indexes when most of the queries retrieve relatively small datasets.
-if queries retrieve most of the data most of the time, having indexes in such a scenario will actually slow the data retreivel.

rules of creations
------------------
1)if the SQL SELECT query retrieves less than 25% of table data
2)on primary key column
3)on the common column that are used in JOIN operations


After Index is Created
======================
Each time a record is inserted into the table
-oracle locates free space in the blocks in the data files
-then inserts a record in all the indexes associated with the table
-then index entries are sorted in the ascending order as well.
*if too many indexes are created on a table, Oracle takes longer to insert a record in a table, since index processing is done for each record that is inserted, updated or deleted. thus while indexes speeds up data retrieval, data insertion slows down considerably.

How DB choses an Index
======================
-Oracle prepares a query plan to decide on the index that must be used for specific data retrievel based on the WHERE clause or the ORDER BY clause specified in the SELECT statements
-When A SELECT Statment is executed, it prepares a query plan that looks for the data retrieval method and it holds the table name which data iwll be retrieved and the index name that must be used for data retreival
-if the SELECT statement is fired witout a WHERE clause and without ORDER BY clause, oracle do not uses indexes
-if a WHERE clause or an ORDER BY clause is specified. it uses the indexes created on a column on which the WHERE clause or the ORDER BY clause is specified.

When Oracle invokes an Index
============================
-A SELECT query with a WHERE clause specified on the column on which an index exists
-A SELECT query with an ORDER BY clause specified on the column on which an index exists

When Oracle Does not invoke An index
=====================================
-An index even through it exists will not always be used by Oracle. the following are rules
1)if an SQL SELECT query is fired without a WHERE clause.
2)if an SQL SELECT query is fired with a WHERE clause specified on the column on which an index is not defined
3)if an SQL SELECT query is fired with an ORDER BY clause specified on the column on which an index is not defined.
4)if an SQL SELECT query is fired with a WHERE clause with a!=conditions
5)if an SQL SELECT query is fired with IS NULL or IS NOT NULL operator
6)Anytime the seconary index key is used
7)if an SQL SELECT query includes a conditions that uses the OR Logical operator for comparing column values out of which one of the column is indexed.
8)if an SQL SELECT query includes a functions or an expression on left hand side of relational operator
9)An index is created on multiple table column such col1,col2 and col3. SQL queries that access only col1 or only col1 and col2, use index. however, an SQL query that access only col2 or only col3 or only col2 and col3 do not used the index

Example
The below is the book table contains the book name, here we have applied the index on the book name column where the index holds

Row ID			book name
AAASVAAAEAAAAMUAAB	Java for Beginner
AAASVAAAEAAAAMUAAC	Hadoop for Java Developers
AAASVAAAEAAAAMUAAD	Java for Experienced Architect

Select * from books where bookname='Java for Beginner';

-when the above select query is fired, oracle locates the appropriate the ROWID from the index data by scanning the index data to search for a specific data value [i,e bookname='Java for Beginner']

AAASVAAAEAAAAMUAAB	Java for Beginner

-Once the rows ID is determined, oracle locates the actual address using the retrieved rowid value and retreives the record stored at the specified address

Create Index
============
An index
-Can be created on one or more column
-Can allow duplicate values
-Can deny duplicates values

Sytnax[On A Single value]
	CREATE INDEX <indexname> ON <TableName> (<columnName>);

Sytnax[On Mutliple Column]
	CREATE INDEX <indexname> ON <TableName> (<columnName1>,<columnName2>);

Explicit Unique Indexes
-----------------------
-the above indexes which you created do not enforces uniquenesss i,e the column included in the index can hold duplicate values
-Unique indexes guarentess that no two rows of a table have duplicate values in the key column[or columns]. 
-Non-Unique indexes do not impose this restriction on the column values

Create a Unique Index
*----------------------*

Sytnax[On A Single value]
	CREATE UNIQUE INDEX <indexname> ON <TableName> (<columnName>);

Sytnax[On Mutliple Column]

	CREATE UNIQUE INDEX <indexname> ON <TableName> (<columnName1>,<columnName2>);

-where a unique index exists on a column and a single value is being searched in the indexed column, Oralce is completely sure about the fact that there will be maximum of one possible value or row.

Implicit Unique Indexes
----------------------
-When the users defines a primary key or unique key constraints at table or column level. Oracle automatically creates a unique index on the primary key or unique key columns
-Even though oracle creates these indexes implicitly, the creations can be explicity controlled in the create table command using the USING index clause
-the using index clauses allows to 
1)specify an existing index that oracle should use to enforce the constraint
2)specify a create index statement that oracle use to create the index and enforce the constraints


Altering the Index  CONSTRIANT
*-------------------------------------------*

Reverse key indexes
-------------------
-Creating a reverse key index, compared to a standard index, reverses the bytes of each column indexed[except the rowID] while keeping the column order.
-Reversing the key of the index distributes the data insertion of all leaf keys in the index.

syntax
	CREATE INDEX <indexname> ON <TableName> (<columnName>) REVERSE;


Why reverse indexes
*----------------------*
-In the index leaf block , oracle stores the indexed value and the 6 bytes RowID

example

-Take an table customers exists with a sequence primary key column named customerNo.
-the uniqueness of primary key value is generated by a unique index and the primary key value is always ascending
-suppose 3 individually concurrently hit the database to insert rows with customer number 101,102 and 103.
-Assume the non reversed unique index. to the find out.

select DUMP(101),DUMP(102),DUMP(103) from dual;

output
DUMP(101)            DUMP(102)            DUMP(103)          
-------------------- -------------------- --------------------
Typ=2 Len=3: 194,2,2 Typ=2 Len=3: 194,2,3 Typ=2 Len=3: 194,2,4 

-notice thelast byte which differe for ever employees no. In such scenario, when such values hit the database, the index entries for the customer 101,102 and 103 will be inserted in the same leaf block.
-This situation causes buffer busy waits
-if the index was a reverse unique index, then the folowing values would have been inserted in the index leaft blocks

select DUMP(101),DUMP(201),DUMP(301) from dual;

DUMP(101)            DUMP(201)            DUMP(301)          
-------------------- -------------------- --------------------
Typ=2 Len=3: 194,2,2 Typ=2 Len=3: 194,3,2 Typ=2 Len=3: 194,4,2 

-now if data is inserted concurrently , it will not hit the same leaf bock.


-A Reverse index provides a more even distribution of hits on the various leaf blocks.
-the main advanatages is the inability to perform index range scans , as such values are now distributed all over the place, only fetch -by-key or full-index[table] scans can be performed.

Altering the index to NORMAL State
*---------------------------------*

-A reverse index can be rebuilt into a normal non-reverse index using the keyword NOREVERSE
syntax
	ALTER INDEX <IndexName REBUILD NONREVERSE;


-A nomral 

index cannot be rebuilt as a reversee key index.the Same can be achieved using the CREATE INDEX command.
-in a non-reverse index, the rows are stored together in one block, as the values are almost the same for all rows.In a reverse index, the column values are stored in different blocks as the starting values differs.


Bitmap Indexes
--------------
used only
-Dealing with low cardinality column i,e columns is which the number of distinct values is small compared to the number of rows in the table
-Data is not frequently updated by many concurrent systems
-SQL Queries reference muliple, low cardinality values in the WHERE clause.

How it works
*----------*
-In bitmap indexes, oracle creates a two-dimentional array with one column for every row in the table being indexed.
-Each column represents a distinct value within the bitmapped index.
-This two-dimensional array represent each value within the index multiplied by number of rows in the table.
-When record are retrieved, oracledecompresses the bitmap into the RAM data buffers to rapidly scan for matching values.
These matching values are delivered to oracle in the form a list of rwoid and the roid values may direclty access the required informations.
-A bitmap index is useful when on table includes multiple bitmapped indexes. if in a table each individual column has a low cardinality,multiple bitmap indexes, provide a very powerful method for rapidly answering complex SQL queries.

consider the employee table

select employee_id,first_name,last_name,job_id,department_id
from employees
where job_id='IT_PROG' AND department_id=60 AND employee_Id=207;

EMPLOYEE_ID FIRST_NAME           LAST_NAME                 JOB_ID     DEPARTMENT_ID
----------- -------------------- ------------------------- ---------- -------------
        207 seeta                rao                       IT_PROG               60 

-Oracle uses a special optimzer method called bitmapped index merge to service this query
-in a bitmapped index merge, each ROWID, is built independtly by using the bitmaps and a special merge routineis used to compare the ROWIDs and fin the insersecting values.
-AND and OR Conditions in the WHERE clause of a query can be quickly resolved by performing the corresponding boolean operations direclty on the bitmaps before converting the resulting bitmap to rowIDs

sytnax
	CREATE BITMAP INDEX <indexname> ON <TableName> (<ColumnName>);

Function Based INdex
--------------------
-There are some times when even through an index exists, oracle does not use it and instead follows the normal table scans.
-This usually happens when an index is created on a column, but the SQL query reference the column with a function or an arithmatic expression or an expression that uses PL/SQL function , package function or SQL functions.
-*Function based indexes are very useful when the WHERE clause contains functions or expression to evaluate a query.
-*the expression  cannot contain any aggregate functions.

for example
-for the table employee , job_id column has the index created, the below querys fired to retrieve all those customers who belong to IT_PROG.

select employee_id,first_name,last_name,job_id,department_id
from employees where upper(job_id)='IT_PROG' ;

-The query reference the job_Id column along with the strings function UPPER() and hence, oracle does not use index data  while reteriving the results for the above query
-To overcome such an issues, oracle provides function based index, A funcion based index allows creating indexes based on a function or expression mapped to one ore more columns in a table.

syntax
	CREATE INDEX <indexname>
		on <TableName>(<Function>(<ColumnName>));

Key Compressed index
--------------------
-Key compression is an index that is compressed
-A Key compressed index allows saving in space, thus allowing more keys to be stored in each index block, which can lead to les I/O and better performance
-*Although key compression reduces the storage requirement of an index, it increases the CPU time required to reconstruct the key column values during an index scan.
-Key compression is very useful when dealing with non-unique index.

How compressed index work?
*------------------------*
-In a key compressed index, oracle breaks an index key into prefix and a suffix entry.
-Compression is achieved by sharing the prefix entries among all the suffix entries in an index block.
--Key compression can be useful
*for a non-unique index with ROWID appended to make the key unique,
In such a situation, the duplicate keys is stored as a prefix entry on the index block without the rowID. the remainig rows become suffix entires consisting of only the rowID
*For a unique muli-column index.
-Compression can be neabled using the COMPRESS Clause.

sytnax
	CREATE INDEX <indexname> ON <tableName> 
		(<columnName>,<columnName2>,......)COMPRESS


-The prefix length which is the number of key column can be specified along with the compress clause to identify how the key columns are broken into a prefix and suffix entry.


Altering the Compressed index to reverse
*--------------------------------------*

Dropping indexes
================
-Indexes associated with the tables can be removed by using the DROP INDEX command

syntax
	DROP INDEX <indexname>;

-when a table with indexes is dropped, all the associated indexes are automatically dropped














