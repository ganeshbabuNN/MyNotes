
1.Introduction
2.First function
3.Returning a result
4.Returning a multiple values
5.local and global variables
6.accessing global variable with same name
7.assigning function to a variable
8.function inside another function
9.function as paramter to an other 
10.Returing the function
11.pass any type
12.recursion
13.keyword argument
14.default arguments

1.Introduction
=============


First Function
==============
function syntax

syntax:
	def <function_name>(argument1,argument2....):
	    statment
	    statment


example1 :

#function without arguments
def sum():
    print("the sum of ss numbers")

#invoking the functions
sum()


example2:
#function  arguments
def sum(a,b):
    print a+b

#invoking the functions 
sum(2,3)

3.Returning a result
=====================
function returning the value based on the return keyword

#function  that return the value
def sum1(a,b):
    return a+b

#invoking the functions 
x=sum1(2,3)
print x

4.Returning a multiple values
=============================

#function  that return the value
def cal(a,b):
    sum1=a+b
    sub=a-b
    mul=a*b
    div=a/b
    return sum1,sub,mul,div

#invoking the functions  
print cal(8,3)

5.local and global variables
============================
-if there is a local variable inside the function, local variables takes the precidence then the global variable.
-if there is no local variables, the global variables take precedence

Example
a=421 #global variables

#function  that return the value
def display():
    a=32    #local variables
    return a; 

#invoking the functions
print display()


6.accessing global variable with same name
==========================================
-use the globals() functions followed by the variable name

a=421 #global variables

#function  that return the value
def display():
    a=32    #local variables
    print a
    print(globals()['a']) #accessing global variables

#invoking the functions
print display()

7.assigning function to a variable
==================================

a=421 #global variables

#function  that return the value
def display():
    a=32    #local variables
    print a
    print(globals()['a']) #accessing global variables

#invoking the functions
print(a) 
z=display #assining a function to a variable, then that variable behaves like a functions
print "----"
z()
print "----"
z()
print "----"
z()

8.function inside another function
==================================

ex:
def display(name):
    def message(): #inner functions
        return "hello"
    result = message()+ " " +name
    return result

print display("bharath")

9.function as paramter to an other
==================================

ex:
def display(name): #first function 
    return "hello " + name

def name(): #second functions
    return "Ganesh"

#calling other function as paramter
print display(name())

10.Returing the function
========================

def display():
    def message():
        return "hello"
    return message #returing a function to caller of the functions

fun = display()
print fun

11.pass any type
================
-pass any type to a functions

def display(lst):
    for i in lst:
        print(i)
        
        
aa = [1,3,4,5,3]
display(aa)

12.recursion
============

def factorial(n):
    if n==0:
        result =1
    else:
        result=n*factorial(n-1) #this is where the recurusion happening
    return result

print factorial(5)

13.keyword argument
===================
-changing the argument values based on the keyword assignment

def average(a,b):
    print a
    print b
    return (a+b)/2

print average(10,20)  #normal call type
print("--------")
print(average(a=10, b=20))
print("--------")
print(average(b=10, a=20))#interchanging the keyword argument

14.default arguments
====================

def average(a=20,b=30):
    print a
    print b
    return (a+b)/2

print average() 
print "------"
print average(b=43) 
print "------"