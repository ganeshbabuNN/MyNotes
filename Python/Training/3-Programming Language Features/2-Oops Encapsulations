Encapsulations
==============
1.Introduction
2.Private Fields and Name Mangling
3.Implementating Encapsulations
4.Encapsulation(quiz)


1.Introduction
==============
-Encapsulation is also an important aspect of object-oriented programming. It is used to restrict access to methods(functionality) and variables(properties). 
-In encapsulation, code and data are wrapped together within a single unit from being modified by accident

{
	data,
	code
}

2.Private Fields and Name Mangling
==================================
-For private use the __ (double underscore symbol as keyword) of the field name.

class student:
    
    def __init__(self,name,age):
        self.__name=name
        self.__age = age
    
    def display(self):
        print self.__name
        print self.__age
        
s1 = student("ganesh","36")

# cannot access the variables.
# print s1.__name
# print s1.__age

#accessing the private using the method
s1.display()

#using name mangling
print s1._student__name


3.Implementating Encapsulations
===============================
-instead of using name mangling users and getter and setter method.

class Employee:
    def setempId(self,empId):
        self.empId=empId
    
    def getempId(self):
        return self.empId
    
    def setName(self,name):
        self.name=name

    def getName(self):
        return self.name

s1= Employee()

s1.setempId(42)
s1.setName("ganesh")

print s1.getempId()
print s1.getName()