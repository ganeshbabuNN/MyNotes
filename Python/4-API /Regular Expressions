Content
Regular Expressions
Sequence Characters
search()
findall() and match()
split()
subsitute()
Quantifiers
using quantifiers
Matching dates
special characters
using special characters

Regular Expressions
===================
-The regular expressions can be defined as the sequence of characters which are used to search for a pattern in a string. 
-The module re provides the support to use regex in the python program. 
-The re module throws an exception if there is some error while using the regular expression.

The re module must be imported to use the regex functionalities in python.
import re 

Functions
---------
match   - This method matches the regex pattern in the string with the optional flag. It returns true if a match is found in the string otherwise it returns false.
search  - This method returns the match object if there is a match found in the string.
findall - It returns a list that contains all the matches of a pattern in the string.
split   -  Returns a list in which the string has been split in each match.
sub     - Replace one or many matches in the string.

Sequence Characters
===================
-A regular expression can be formed by using the mix of meta-characters, special sequences, and sets.

Special sequences
----------------
-Special sequences are the sequences containing \ followed by one of the characters.

\d- It returns a match if the string contains digits [0-9].
\D- It returns a match if the string doesn't contain the digits [0-9].
\s- It returns a match if the string contains any white space character.
\S- It returns a match if the string doesn't contain any white space character.
\w- It returns a match if the string contains any word characters.
\W- It returns a match if the string doesn't contain any word.
\b- It returns a match if the specified characters are present at the beginning or the end of the string.
\B- It returns a match if the specified characters are present at the beginning of the string but not at the end.
\A- It returns a match if the specified characters are present at the beginning of the string.
\Z- it returns a match if the specified characters are at the end of the string.


Meta-Characters
---------------
Metacharacter is a character with the specified meaning.

[]-It represents the set of characters-	"[a-z]"
\-It represents the special sequence -"\r"
.-It signals that any character is present at some specific place -"Ja.v."
^-It represents the pattern present at the beginning of the string -"^Java"
$-It represents the pattern present at the end of the string-"point"
*-It represents zero or more occurrences of a pattern in the string-"hello*"
+-It represents one or more occurrences of a pattern in the string-"hello+"
{}-The specified number of occurrences of a pattern the string-"java{2}" {m,n} m is max and n is Min
|-It represents either this or that character is present-"java|point"
()-Capture and group

Sets
----
A set is a group of characters given inside a pair of square brackets. It represents the special meaning.

[arn]-Returns a match if the string contains any of the specified characters in the set.
[a-n]-Returns a match if the string contains any of the characters between a to n.
[^arn]-Returns a match if the string contains the characters except a, r, and n.
[0123]-Returns a match if the string contains any of the specified digits.
[0-9]-Returns a match if the string contains any digit between 0 and 9.
[0-5][0-9]-Returns a match if the string contains any digit between 00 and 59.
[a-zA-Z]-Returns a match if the string contains any alphabet (lower-case or upper-case).

search()
========
import re
str1 = "I love you banu,hope your are doing good ,hope your family of 4 members"

result=re.search(r'h\w\w\w', str1)
print(result.group())

result=re.search(r'\d', str1)
print(result.group())

# result=re.search(r'\D', str)
# print(result.group())

result=re.search(r'\s', str1)
print(result.group())

try:
    result=re.search(r'ho\w', str1)
    print(result.group())
except:
    pass


try:
    result=re.search(r'ho\W', str1)
    print(result.group())
except:
    pass
 
try:
    result=re.search(r'I\b', str1)
    print(result.group())
except:
    pass 

try:
    result=re.search(r'sre\B', str1)
    print(result.group())
except:
    pass 

try:
    result=re.search(r'lo\A', str1)
    print(result.group())
except:
    pass

try:
    result=re.search(r'ers\Z', str1)
    print(result.group())
except:
    pass

findall() and match()
=====================
import re
str1 = "I love you banu,hope your are doing good ,hope your family of 4 members"
str2 = "How are you. How is everything"  

result=re.findall(r'h\w', str1)
print(result)


result=re.match(r'Ho\w', str2)
print(result.group())

split()
=======
import re
str1 = "I love you banu,hope your are doing good  hope your family of 4 members"

result=re.split(r'you\w', str1)
print(result)

subsitute()
===========
import re
str1 = "I love you banu,hope your are doing good ,hope your family of 4 members"

result=re.sub(r'lov','wo', str1)
print(result) 

Quantifiers
===========
-we use quantifiers to match multiple characters using the meta characters like + * {}
	

using quantifiers
=================
import re
str1 = "Take up One idea. One idea at a time On"

result=re.findall(r'O\w+', str1)
print(result)

result=re.findall(r'O\w+', str1)
print(result)

result=re.findall(r'O\w{2}', str1)
print(result)

result=re.findall(r'O\w{1,2}', str1)
print(result)

Matching dates
==============
-returns to the matching dates

result=re.findall(r'\d{1,1}-\d{1,1}-\d{4}', str1)
print(result)

result=re.findall(r'\d{1,2}-\d{1,2}-\d{4}', str1)
print(result)

special characters
==================
-special characters like \ . ^ $ [...] [^...] (...) (R|S)


using special characters
========================
import re
str1 = "Take up 1-3-2019 One idea. One idea at a time On 12-11-2020"

result=re.findall(r'^T\w', str1)
print(result)