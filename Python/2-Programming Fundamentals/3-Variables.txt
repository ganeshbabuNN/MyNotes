introduction 
Delecration of variables
Assigning values to variable
Rules and Naming Convention for Variables
Variable Scope 
Literals

Introduction
============
-Variable is a name which is used to refer memory location
-Variable also known as identifier and used to hold value
-In Python, we don't need to specify the type of variable because Python is a type infer language and smart enough to get variable type.
-It is recomended to use lowercase letters for variable name

Delecration of variables
========================
-Python does not bound us to declare variable before using in the application
-It allows us to create variable at required time
-We don't need to declare explicitly variable in Python, its a dynamic typing language.
-Python uses dynamic typing, meaning you can reassign variables to different data types. This makes Python very flexible in assigning data types; it differs from other languages that are statically typed.

Pros and Cons of Dynamic Typing
-------------------------------
Pros of Dynamic Typing
-very easy to work with
-faster development time

Cons of Dynamic Typing
-may result in unexpected bugs!
-you need to be aware of `type()`

Assigning values to variable
=============================
-When we assign any value to the variable that variable is declared automatically
-The single equal sign(=) operator is used to assign value to a variable

a=10 
print(a)

a=10.88
print(a)

b=False
print(b)

c='ravi'
print(c)

Multiple Assignment
-------------------
-Python allows us to assign a value to multiple variables in a single statement which is also known as multiple assignment.

1. Assigning single value to multiple variables
x=y=z=5
print(x)
print(y)
print(z)

2.Assigning multiple values to multiple variables:
The values will be assigned in the order in which variables appears.

a,b,c = 3,4,5
print(a)
print(b)
print(c)

Rules and name conventions
==========================
1)names can not start with a number
2)names can not contain spaces, use _ intead
3)names can not contain any of these symbols
	:'",<>/?|\!@#%^&*~-+
4)names are lowercase with underscores if space between
5)avoid using Python built-in keywords like list and str
6)avoid using the single characters l (lowercase letter el), O (uppercase letter oh) and I (uppercase letter eye) as they can be confused with 1 and 0

Follow this URL for the standard name 
https://www.python.org/dev/peps/pep-0008/#function-and-variable-names

Variable Scope
==============
In programming languages, variables need to be defined before using them
These variables can only be accessed in their area where they are defined, this is called scope.

Type of scope
1)Local scope
2)Enclosing Scope
3)Global scope
4)Built in 

Local scope
-------------
Local scope variables can only be accessed within its block.

a = 10
def function():
    print("Hello")
    b = 20
function()
print(a)
print(b) #local scope

Global Scope
------------
The variables that are declared in the global scope can be accessed from anywhere in the program

a = 10
def function():
    print(a ," Inside the func")
    print("Hello")
    b = 20
function()
print(a ," outside the func")

Enclosing Scope
---------------
A scope that isn’t local or global comes under enclosing scope.

def vehicle():
  fun= “Start”
  def car():
    model= “Toyota”
    print(fun)
    print(model)
	car()
vehicle()

the variable fun is used inside the car() function. In that case, it is neither a local scope nor a global scope. This is called the enclosing scope

Builtin Scope
-------------
When the Python doesn’t find an identifier in it’s local, enclosing or global scope, it then looks in the built-in scope to see if it’s defined there

a = 5.5
int(a)
print(a)
print(type(a))

Python would see in the local scope first to see which of the variables are defined in the local scope, then it will look in the enclosing scope and then global scope.

https://techvidvan.com/tutorials/python-variable-scope/

Literals
=========
-Literal is a raw data given in a variable or constant. In Python, there are various types of literals they are as follows:
-In Python, there are various types of literals they are as follows:

1)Numeric Literals(integer,float,complext type)
2)String literals
3)Boolean literials
4)Special literals(None)
5)Collection literals(lists,tuple,dictionary,set)

1)Numeric Literals
------------------
-Numeric Literals are immutable (unchangeable).
-Numeric literals can belong to 3 different numerical types: Integer, Float, and Complex.

a = 0b1010 #Binary Literals
b = 100 #Decimal Literal 
c = 0o310 #Octal Literal
d = 0x12c #Hexadecimal Literal

#Float Literal
float_1 = 10.5 
float_2 = 1.5e2 #1.5e2 is expressed with exponential and is equivalent to 1.5 * 102.

#Complex Literal 
x = 3.14j

print(a, b, c, d)
print(float_1, float_2)
print(x)
print(x.imag) #we use imaginary literal (x.imag)
print(x.real) #real literal (x.real) to create imaginary and real parts of complex numbers

2)String literals
-----------------
-A string literal is a sequence of characters surrounded by quotes
-We can use both single, double, or triple quotes for a string

strings = "This is Python" #is a string literal

print(strings)

3)Boolean literials
-------------------
-A Boolean literal can have any of the two values: True or False.
-This can be even given as 1 or 0

x=False
y=True

print(x)
print(y)

4)Special literals
------------------
-Python contains one special literal i.e. None. We use it to specify that the field has not been created.

ex: 
a=None
print(a)

5)Collection literals
----------------------
-there are four types of lists,tuple,dictionary,set

fruits=["apple","mango","orange","banana"] #list
number = (1,2,3) #tuple
student={'1':'ganesh','2':'vedha' ,'3':'kal'} #dictionary having key and values
vowels ={'a','e','i','o','u','u'} #sets

print(fruits)
print(number)
print(student)
print(vowels)

-this will be discussed in detaild in the data structures and data types chapter.

Quiz:
=====

Assignment:
===========

Resources:
=========