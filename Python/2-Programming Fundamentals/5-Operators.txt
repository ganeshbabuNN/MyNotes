Intro
Type of operators
operator precendenc and associativity

Intro
=====
The operator can be defined as a symbol which is responsible for a particular operation between two operands.
Operators are the pillars of a program on which the logic is built in a specific programming language. 
Python provides a variety of operators, which are described as follows.
Operators are used to perform operations on variables and values.


Type of operators
==================
There are Type of Operators.
1)Arithmetic operators
2)Comparison operators
3)Assignment Operators
4)Logical Operators
5)Bitwise Operators
6)Membership Operators
7)Identity Operators

1)Arithmetic operators
----------------------
Arithmetic operators are used to perform arithmetic operations between two operands.

Operator				Description
+ (Addition)			It is used to add two operands. 
- (Subtraction)			It is used to subtract the second operand from the first operand. If the first operand is less than the second operand, the value results negative.  
/ (divide)				It returns the quotient after dividing the first operand by the second operand. 
* (Multiplication)		It is used to multiply one operand with the other. 
% (reminder)			It returns the reminder after dividing the first operand by the second operand. 
** (Exponent)			It is an exponent operator represented as it calculates the first operand power to the second operand.
// (Floor division)	 	It gives the floor value of the quotient produced by dividing the two operands.

a=30
b=50
c=3
print("Addition operator",a+b)
print("subtractions operator",a-b)
print("Division operator",a/b)
print("Multiplications operator",a*b)
print("Reminder operator",a%b)
print("exponent operator",a**c)
print("Floor operator",a//b)
print("Floor operator1 is ",5//2) #floor rounds down a number to its nearest whole value, ceil rounds a number up to its nearest whole value
print("Floor operator2 is ",-5//2)

2)Comparison operators
----------------------
Comparison operators are used to comparing the value of the two operands and returns Boolean true or false accordingly. The comparison operators are described in the following table

Operator		Description
==				If the value of two operands is equal, then the condition becomes true.
!=				If the value of two operands is not equal, then the condition becomes true.
<=				If the first operand is less than or equal to the second operand, then the condition becomes true.
>=				If the first operand is greater than or equal to the second operand, then the condition becomes true.
>				If the first operand is greater than the second operand, then the condition becomes true.
<				If the first operand is less than the second operand, then the condition becomes true.

a=30
b=50
print("equal to operator:",a==b)
print("Not equal operator",a!=b)
print("Less then equal to operator",a<=b)
print("greater then equal to operator",a>=b)
print("greater operator",a>b)
print("Lesser operator",a<c)

3)Assignment Operators
----------------------
The assignment operators are used to assign the value of the right expression to the left operand. The assignment operators are described in the following table.

Operator		Description
=				It assigns the value of the right expression to the left operand.
+=				It increases the value of the left operand by the value of the right operand and assigns the modified value back to left operand. 
-=				It decreases the value of the left operand by the value of the right operand and assigns the modified value back to left operand. 
*=				It multiplies the value of the left operand by the value of the right operand and assigns the modified value back to then the left operand.  
%=				It divides the value of the left operand by the value of the right operand and assigns the reminder back to the left operand. 
				a = a % b and therefore, a = 0..
**=				a**=b will be equal to a=a**b
//=				A//=b will be equal to a = a// b

a=30
b=50
c=2
print("Assignment operator:",a)
a+=3 #same as a=a+3
print("plus and equal to operator ",a) 
a-=3 #same as a=a-3
print("- and equal to operator ",a) 
a*=3 #same as a=a*3
print("- and equal to operator ",a)
a%=b #same as a=a%b
print("divder and equal to operator ",a) 
a**=2 #same as a=a*2
print("exponent and equal to operator ",a)
a//=2 #same as a=a//2
print("floor and equal to operator ",a) 

4)Logical Operators
-------------------
The logical operators are used primarily in the expression evaluation to make a decision. Python supports the following logical operators.

Operator		Description
and				If both the expression are true, then the condition will be true,else false 
or				If one of the expressions is true, then the condition will be true ,else false 
not				If an expression a is true, then not (a) will be false and vice versa.

a=30
b=50 
print("And operator:",a <20 and b >30) #Returns True if both statements are true else false 
print("Or operator ",a <20 or b >30)  #Returns True if one of the statements is true
print("- and equal to operator ",not(a> 30)) # Reverse the result, returns False if the result is true 

5)Bitwise Operators
-------------------
The bitwise operators perform bit by bit operation on the values of the two operands. Consider the following example.

Operator			Description
& (binary and)		If both the bits at the same place in two operands are 1, then 1 is copied to the result. Otherwise, 0 is copied.
| (binary or)		The resulting bit will be 0 if both the bits are zero; otherwise, the resulting bit will be 1.
^ (binary xor)		The resulting bit will be 1 if both the bits are different; otherwise, the resulting bit will be 0.
~ (negation)		It calculates the negation of each bit of the operand, i.e., if the bit is 0, the resulting bit will be 1 and vice versa.
<< (left shift)		The left operand value is moved left by the number of bits present in the right operand.
>> (right shift)	The left operand is moved right by the number of bits present in the right operand.

a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 
c = 0

c = a & b;        
print(0b00001100)  # 0000 1100=12
print ("binary and - Value of c is ", c)

c = a | b;        
print(0b00111101)  # 00111101=61
print ("binary or - Value of c is ", c)

c = a ^ b;        # 49 = 0011 0001
print(0b00110001)  # 00111101=49
print ("binary xor - Value of c is ", c)

c = ~a;           # -61 = 1100 0011
print(0b11000011)  # 11000011=195
print ("negation - Value of c is ", c)

c = a << 2;       # 240 = 11110000
print(0b11110000)  # 11110000=240
print ("left shift - Value of c is ", c)

c = a >>2;       # 15 = 0000 1111
print(0b00001111)  # 00001111=15
print ("right shift- Value of c is ", c)

6)Membership Operators
----------------------
Python membership operators are used to check the membership of value inside a Python data structure. 
If the value is present in the data structure, then the resulting value is true otherwise it returns false.

Operator	 Description
in			 It is evaluated to be true if the first operand is found in the second operand (list, tuple, or dictionary).
not in		 It is evaluated to be true if the first operand is not found in the second operand (list, tuple, or dictionary).

x=["ganesh","vaibhav","rudra"]
y="praki " in x
print("in operator ",y)
y="praki " not in x
print("in operator ",y)

7)Identity Operators
--------------------
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

Operator	 Description
is			 It is evaluated to be true if the reference present at both sides point to the same object.
is not   	 It is evaluated to be true if the reference present at both sides do not point to the same object.

x=["ganesh","vaibhav"]
y=["ganesh","vaibhav"] 
z=y
print(z)
print(x is z)
print(x is not z)

operator precendenc and associativity
=====================================
The precedence of the operators is essential to find out since it enables us to know which operator should be evaluated first. 
The precedence table of the operators in Python is given below.

Operator	Description
**			The exponent operator is given priority over all the others used in the expression.
~ + -		The negation, unary plus, and minus.
* / % //	The multiplication, divide, modules, reminder, and floor division.
+ -			Binary plus, and minus
>> <<		Left shift. and right shift
&			Binary and.
^ |			Binary xor, and or
<= < > >=	Comparison operators (less than, less than equal to, greater than, greater then equal to).
<> == !=	Equality operators.
= %= /= 	Assignment operators
//= -= +=
*= **=	
is is not	Identity operators
in not in	Membership operators
not or and	Logical operator

In the above table, you can confirm that some of the groups have many operators. 
It means that all operators in a group are at the same precedence level.
And whenever two or more operators have the same precedence, then associativity defines the order of operations.
The associativity is the order in which Python evaluates an expression containing multiple operators of the same precedence. 
Almost all operators except the exponent (**) support the left-to-right associativity

# Testing Left-right associativity
print(4 * 7 % 3)
# Testing left-right associativity
print(2 * (10 % 5))
# Checking right-left associativity of ** exponent operator
print(4 ** 2 ** 2)

# Checking the right-left associativity
print((4 ** 2) ** 2)

Python does have some operators such as assignment operators and comparison operators which don’t support associativity. Instead, there are special rules for the ordering of this type of operator which can’t be managed via associativity.

For example, 
the expression 5 < 7 < 9 does not mean (5 < 7) < 9 or 5 < (7 < 9). 
Also, the statement 5 < 7 < 9 is same as 5 < 7 and 7 < 9, and gets evaluated from left-to-right.
Moreover, chaining of assignments operators like a = b = c is perfectly alright whereas the ‘a = b += c’ will result in an error