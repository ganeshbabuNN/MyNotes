Data Types
Default value of Types
Convert one data type to another
To know the type of variable used in Python
Strings
data structures(collections) in python

DataTypes
===========
-Every value in Python has a datatype. 
-Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.

In Python, the data types are Organised in five types:
1)None Type - An object that does not contain any value
2)Numeric Type - int,float, complex
3)Sequences  - can hold of other data types like str, bytes, bytearray,list,tuple,Range
4)sets - Does not allow duplicates
5)Dict - key and value

None Type
---------
None is a special constant in Python. It is a null value. None is not the same as False. None is not 0. None is not an empty string. Comparing None to anything other than None will always return False
None is the only null value. It has its own datatype (NoneType). We can assign None to any variable, but you can not create other NoneType objects. All variables whose value is None are equal to each other

type(None)
None == 0 # == operator return True or False
None == '' 
None == False
None == None
a = None
a == None
b = None
a == b

Numeric Types
-------------
Integer type:
Integers can be of any length, it is only limited by the memory available.
Ex:
a=13
b=10
c=2
print(a,b,c)
type(a)

Signed and Unsigned Integer:
Note: Variables such as integers can be represent in two ways, i.e., signed and unsigned. 
Signed numbers use sign flag or can be distinguish between negative values and positive values. 
Whereas unsigned numbers stored only positive numbers but not negative numbers

floating:
-A floating-point number is accurate up to 15 decimal places.
Ex:
a=13.23
b=10.12
c=02.22
print(a,b,c)
type(a)

Complex Type:
Complex() returns a complex number with the value real + imag*1j or converts a string or number to a complex number.
If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter. The second parameter can never be a string. Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j.
If you are doing math or engineering that requires complex numbers (such as dynamics, control systems, or impedance of a circuit) this is a useful tool to have in Python.

ex:
print(3+5j)

complex(2,3)
complex(10,1)
complex('12+2j') #We can also pass strings:

Default value of Types
======================
for number
a=0

for string
a=''

To know the type of variable used in Python
===========================================
to know the type of variable used
Syntax:
	Type <variable-name or value>

ex:
print(Type(23.2))     -> <type 'float'>
print(Type(23))       -> <type 'Int'>
print(type("Ganesh")) -><type 'str'>

String
======
-Strings are a group of characters written inside a single or double-quotes
-Python does not have a character type so a single character inside quotes is also considered as a string

Creating a String
-----------------

syntax:
	variable_name = <characteral or string literal >

strings = "This is Python" #is a string literal
char = "C" #is a character literal
multiline_str = """This is a multiline string with 
more 
than one 
line code."""

raw_str = r"raw \n string" #raw string literal

print(strings)
print(char)
print(multiline_str)	
print(raw_str)

Sequences Type or data structure in python
==========================================
-In Python, Sequences are the general term for ordered sets
-Sequences are a generic term for an ordered set which means that the order in which we input the items will be the same when we access them

Python supports six different types of sequences:
strings, lists, tuples, byte sequences, byte arrays, and range objects

List -stores any values or objects in any order and stored it dynamically
Set-  Does not allow duplicate
dictionary - stores in key and value pair

List
-----
-List is an ordered sequence that can hold a variety of object types.
-All the items in a list do not need to be of the same type.
-Lists are mutable(Changeable), meaning, the value of elements of a list can be altered.
-Items separated by commas are enclosed within brackets [ ]
-List support indexing and slicing.list can be nested and also be have variety of useful methods that can be called of of them.
-Allows duplicate members.

syntax
variable_name =[]

Example:
x=[1,2,4,'ganesh']
type(x)
print(a)

Using index and slicing
*---------------------*
Index:
Syntax: 
objectType[indexNumber]

#Using Index
print(x[0]) #grab the first element
print(type(x))
print(x[1]) #grab the second element
print(x[-1]) #grab the revesre element
print(x[-2]) #grab the revesre element

#Using Slicing
Syntax: 
objectType[start:end:skip]

print(x[1:]) #grab from 1 index
print(type(x))
print(x[1:4]) #grab from 1 till 3 
print(x[1:4:2]) #grab from 1 till 4 skip 2
print(x[:2]) #grab from second :2
print(x[:-1]) #reverse
print(x[1:-1]) #reverse

add/remove/delete the list the values
*-----------------------------------*
x.append("babu")  #adding item using a value
print(x)
x.remove("babu") #remove item using a value
print(x) 
del(x[2]) #delete the item using index
print(x)
x.pop() #remove the last index of index
print(x)

#difference between append and extend
x=[1,2,3,4]
#append
x.append([5,6,7])
x #check the the value which have inner list
# lets do for extend
x=[1,2,3,4]
x.extend([5,6,7])
x #check the value

additional methods
*----------------*
a1=[3,2,32,12,41]
# a.clear() #clear from list
# print(a)
a=max(a1) #min from list
print(a)
a=min(a1) #max from list
print(a)
a1.insert(1, 99) #inser the value from 1 index of the list a1
print(a)
a1.sort() #asscending by default
print(a)
a1.sort(reverse=True)
print(a)
print(x*2) #repeating
print(x.count(1)) #return the occurence of the value



Tuple
-----
-Tuple is an ordered sequence of items same as a list. 
-The only difference is that tuples are immutable(unchangeable) i,e once created cannot be modified.
-Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically
-Allows duplicate members
-It is defined within parentheses () where items are separated by commas.

sytnax:

variable_name=(va1l,val2,val3)

a=(3,2,"gan",4,3)
print(a)
print(type(a))
print(a[2])  #indexing
print(a[0:2])  #slicing
print(a[2:])
print(a*2)		#repeatings
print(a.count(3)) #count of 3 value
print(a.index("gan")) #get the value of that index

convert the list to tuple:
lst=[32,3,22,3]
print(type(lst))
tsl=tuple(lst)
print(tsl)
print(type(tsl))


Range Type
-----------
-Always range starts from 0th index.

syntax
 variable-name= range(upperbound,lowerbound)

r=range(5) #setting up the lower bond.
for i in r:
    print(i)

r=range(1,16) #setting up the lower and upper bond.
for i in r:
    print(i)

r=range(1,16,3) #step skips  3rd element
for i in r:
    print(i)

Set
----
-Set is an collection which is unordered and unindexed. No duplicate members.
-Set is defined by values separated by comma inside braces {} but output shows in curly braces not like dictionary as it as key value pair
-Items in a set are not ordered
-We can perform set operations like union, intersection on two sets. Sets have unique values. 
-They eliminate duplicates

syntax:
varible={va1l,val2,val3}

print("------")
st={32,45,65,78,"gan",78,32}
#print(type(st)) #check the type of set
st.update([33,65]) #update the existing the set
#print(type(st)) #check the type of set
# st[0] #cannot do indexing
# st[2:] #cannot do slicing
# st.insert(11) #cannot do insert
# st.remove(32) #cann remove
mylist=[3,2,3,3,2,2,1,3,4,5,3,2]  #creating list
st.update(mylist) #updating the list
mytuple=("G","B","E","DA") #creating tuple
st.update(mytuple) #updating the tuple
st.add(32) #adding in the list
#st.add(32,32) # cannot add more then on value

Converting to frozen set
*-----------------------*
-you cannot do any operations on this frozen set . only we can do read the eleement

st={32,45,65,78,"gan",78,32}
f=frozenset(st)
print(f)
print(type(f))
f.remove(20) #cannot do

Bytes and bytearray
*----------------*
-you cannot add or modify the bytes elements
-and no slicing and repitations are not allowed.

lst=[3,2,32,12,76]
print(type(lst))

b=bytes(lst)
print(type(b))  

c=bytearray(lst)
print(type(c))
c[3]=33
print(c)

Dictionary
----------
-Dictionary is a collection which is unordered, changeable and indexed. No duplicate members
-Dictionary are unordered mappings for storing objects, Previously we saw how lists store objects in ordered sequence.,dicitonaries uses a key-value pariing instead.
-This key-vale pair allows users to quickly grab objects without needing to know an index locations.
-it users curly buraces {} and colons to singify the kyes and their associated values.It is unordered and cannot be sorted

Sytnax:
variable-name={Key:value,key2:value}

my_dict={'k1':150,'k2':200,'k3':300,'k4':400,'k5':500,'k6':600,'k7':700} #normal dictionary
my_dict['k1']  # Call values by their key
my_dict1={'k1':100,'k2':200,'k3':[300,301,302,304],'k4':400,'k5':500,'k6':600,'k7':['num1','num2','num3']} #more then one dictionary
my_dict1['k1'] #call items from the dictionary
my_dict1['k3'][2] #Can call an index on that value
my_dict2=my_dict1['k7'][0].upper()
my_dict1['k4']=my_dict1['k4']-100 # Subtract 123 from the value
my_dict1
my_dict1['k1'] -= 50 # Set the object equal to itself minus 123 
my_dict2 = {}# Create a new dictionary
my_dict2
my_dict2['k1'] ='val1'# Create a new key through assignment
my_dict2 
my_dict2['k2'] ='val2'# Can do this with any object
my_dict2
my_dict3={'k1':{'k2':{'k3':100}}} # Dictionary nested inside a dictionary nested inside a dictionary
my_dict3['k1']['k2']['k3'] # Keep calling the keys


#task to make the value ['C']
my_dict4 = {'k1':['a','b','c']}
mylist=my_dict4['k1'] # get the key and store those value in list
mylist[2] #get those value in that list
mylist1=mylist[2] #store into a list
mylist1.upper() # now make it upper
#looking the flexiablity of python
my_dict4['k1'][2].upper() 
my_dict4

#addtional methods
my_dict1.keys() # # Method to return a list of all keys 
my_dict.values() # Method to grab all values
my_dict.items() # Method to return tuples of all items
del dict1[1] #delete the individual item in dictionary

#iterating the key
for i in k:
    print(i)

#iterating the value
for i in l:
    print(i)
	
Nesting Dictionaries
--------------------
Hopefully you're starting to see how powerful Python is with its flexibility of nesting objects and calling methods on them. Let's see a dictionary nested inside a dictionary:

# Dictionary nested inside a dictionary nested inside a dictionary
d = {'key1':{'nestkey':{'subnestkey':'value'}}}

Wow! That's a quite the inception of dictionaries! Let's see how we can grab that value:
# Keep calling the keys
d['key1']['nestkey']['subnestkey']

converting one data type to other data
======================================
from None --> numeric --> sequence -->sets --> dict  ==== any objects converstion.

myNone=None
Myint=2
myflot=3.2
mystring="ganesh"
mylist=[42,32,32,1]
mytuple={'gbag','rubn','vbhk','prkh'}
myset=(332,'ga','32','ds')
mydict={1:'g',2:'rew',3:'han'}
#creating a list 
mylist1=[mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring] #createing a new list of different types
#creating a tuple 
mytuple1=(mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring) #createing a new tuple of different types
#creating a set
myset1=(mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring) #createing a new set of different types
#creating a dict
mydict1={1:mytuple}
#adding in a existing list 
#adding in a existing tuple 
#adding in a existing set 
#adding in a existing dict 
#updating the list  
#updating the tuple 
#updating the set
#updating the dict

Quiz:
=====

Assignment:
===========

Resources:
=========