Intro
Numeric Data Type
Number Type Conversion or Datatype casting
Built in functions
Number system Conversiona

Intro
=====
Number data types store numeric values. They are immutable data types, means that changing the value of a number data type results in a newly allocated object

Number objects are created when you assign a value to them. For example −
var1 = 1
var2 = 10

You can also delete the reference to a number object by using the del statement. The syntax of the del statement is −

del var
del var_a, var_b


Numeric Data Type
=================
there are integer , long(no longer supported in python 3.x), float, complex

Number Type Conversion or Datatype casting
=================================================
-The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion.
-there are two types
1)Implicit Type Conversion
2)Explicit Type Conversion

1)Implicit Type Conversion
*------------------------*
-In Implicit type conversion, Python automatically converts one data type to another data type. This process doesn't need any user involvement.

ex:
num_int=32
num_float=32.11

num_new=num_int+num_float
print("datatype of num_int",type(num_int))
print("datatype of num_float",type(num_float))

print("value of num_new:",num_new)
print("datatype of num_new",type(num_new))

-we can see the num_new has a float data type because Python always converts smaller data types to larger data types to avoid the loss of data.

-let's try adding a string and an integer, and see how Python deals with it
num_int=32
num_string="Ganesh"
num_new1= num_int+num_string

print("datatype of num_int",type(num_int))
print("datatype of num_float",type(num_string))

print("datatype of String",num_new1)

-As we can see from the output, we got TypeError. Python is not able to use Implicit Conversion in such conditions.
However, Python has a solution for these types of situations which is known as Explicit Conversion.

2)Explicit Type Conversion
*------------------------*
-In Explicit Type Conversion, users convert the data type of an object to required data type. We use the predefined functions like int(), float(), str(), etc to perform explicit type conversion
-This type of conversion is also called typecasting because the user casts (changes) the data type of the objects.

Syntax :
  <required_datatype>(expression)
  
Type int(x) to convert x to a plain integer.
Type long(x) to convert x to a long integer.
Type float(x) to convert x to a floating-point number.
Type str(x) to convert x to a String. 
Type complex(x) to convert x to a complex number with real part x and imaginary part zero.
Type complex(x, y) to convert x and y to a complex number with real part x and imaginary part y. x and y are numeric expressions

Ex:
print(float("22.5"),"to string to  float Type") 
print(int("22"),"to string to int Type") 
print(int(22.5),"to float to int Type") 
print(float(22),"to float to float Type") 
print(str(22),"to float to String Type")

Same for sequence data types
**-----------------------***
from None --> numeric --> sequence -->sets --> dict  ==== any objects converstion.

list,tuple,set, dict
myNone=None
Myint=2
myflot=3.2
mystring="ganesh"
mylist=[42,32,32,1]
mytuple={'gbag','rubn','vbhk','prkh'}
myset=(332,'ga','32','ds')
mydict={1:'g',2:'rew',3:'han'}
#creating a list 
mylist1=[mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring] #createing a new list of different types
#creating a tuple 
mytuple1=(mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring) #createing a new tuple of different types
#creating a set
myset1=(mylist,mytuple,myset,mydict,myNone,Myint,myflot,mystring) #createing a new set of different types
#creating a dict
mydict1={1:mytuple}
#adding in a existing list 
#adding in a existing tuple 
#adding in a existing set 
#adding in a existing dict 
#updating the list  
#updating the tuple 
#updating the set
#updating the dict


Key Points to Remember
----------------------
1)Type Conversion is the conversion of object from one data type to another data type.
2)Implicit Type Conversion is automatically performed by the Python interpreter.
3)Python avoids the loss of data in Implicit Type Conversion.
4)Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.
5)In Type Casting, loss of data may occur as we enforce the object to a specific data type

Built in functions
==================

#min and max
The min() and max() functions can be used to find the lowest or highest value in an iterable:

x= min(5,10,12)
y=max(4,2,2,33)
print(x)
print(y)

#abs()
The abs() function returns the absolute (positive) value of the specified number:

abs(-20)

#pow
The pow(x, y) function returns the value of x to the power of y (xy).

x=pow(4,3)
print(x)

#sum
lst=[2,32,3,2,3,2]
sum(lst)

#rounding the value
round(4.5) #round to the nearest value
round(4.5,1) #round to the nearest value
round(4.9,2) #round to the nearest value

#calculating percentage
print(7.0/448.8)
print(str(int((7.0/448.8)*100))+'%') #direct approach
print('{:.1%}'.format((7.0/448.8)*100)) # use string formatting to specify precision
print('{percent:.2%}'.format(percent=7.0/448.8))# using format
print("{0:.0f}%".format((7.0/448.8) * 100))

ref: https://docs.python.org/3/library/functions.html

From Math Module
----------------
Python comes with a built in math module and random module. 
In this lecture we will give a brief tour of their capabilities. 
Usually you can simply look up the function call you are looking for in the online documentation.

#sqrt:
import math
y=math.sqrt(43)
print(y)

#Ceil and floor:
The math.ceil() method rounds a number upwards to its nearest integer, and 
the math.floor() method rounds a number downwards to its nearest integer, and returns the result:

import math
print(math.ceil(1.4))
print(math.floor(1.4))

#pi
import math
print(math.pi)

math.e #mathematical constant e = 2.718281…, to available precision
math.tau #he mathematical constant τ = 6.283185…, to available precision
math.inf #A floating-point positive infinity.
math.nan #A floating-point “not a number" (NaN) value. 

Ref: https://docs.python.org/3/library/math.html

Random Functions
----------------
#choice :Python number method choice() returns a random item from a list, tuple, or string.
import random
mylist=[432,234,23,21]
mystr=['a','b','c','d']
random.choice(mylist)
random.choice(mystr)

#randomrange-Python number method randrange() returns a randomly selected element from range(start, stop, step).
import random
random.randrange(100,1000,2) 

#random
Python number method random() returns a random float r, such that 0 is less than or equal to r and r is less than 1.
import random
random.random()

#seed #seed() sets the integer starting value used in generating random numbers. Call this function before calling any other random module functio
import random
random.seed(10)
random.random()

#shuffle:Python number method shuffle() randomizes the items of a list in place.
import random
mylist=[32,23,2,3,3,3,4,41,4,4]
random.shuffle(mylist)
mylist

#uniform()-uniform() returns a random float r, such that x is less than or equal to r and r is less than y.
import random
random.uniform(5, 10)

mathematical and trignometrical functions
https://docs.python.org/3/library/math.html#trigonometric-functions
https://docs.python.org/3/library/math.html#

Range Function
--------------
The range function allows you to quickly generate a list of integers, this comes in handy a lot, so take note of how to use it! There are 3 parameters you can pass, a start, a stop, and a step size. Let's see some examples

Syntax:
range(start,stop,step size)  

range(0,11)# range from start and to end
list(range(1,11))# cast to list functions # Notice how 11 is not included, up to but not including 11, just like slice notation!
list(range(1,11,3))# cast to list functions with skip

Note that this is a generator function, so to actually get a list out of it, we need to cast it to a list with list(). What is a generator? Its a special type of function that will generate information and not need to save it to memory

zip
---
Notice the format enumerate actually returns, let's take a look by transforming it to a list()
list(enumerate('abcde'))  #Notice the format enumerate actually returns, let's take a look by transforming it to a list.
It was a list of tuples, meaning we could use tuple unpacking during our for loop. 
This data structure is actually very common in Python , especially when working with outside libraries. 
You can use the zip() function to quickly create a list of tuples by "zipping" up together two list.

mylist1 = [1,2,3,4,5]
mylist2 = ['a','b','c','d','e']

# This one is also a generator! We will explain this later, but for now let's transform it to a list
zip(mylist1,mylist2)

list(zip(mylist1,mylist2))

#To use the generator, we could just use a for loop
for l1,l2 in zip(mylist1,mylist2):
    print(f"for this tuple, first item was {l1} and second item was {l2}")

Random Module
=============
Random Module allows us to create random numbers. We can even set a seed to produce the same random set every time.
The explanation of how a computer attempts to generate random numbers is beyond the scope of this course since it involves higher level mathmatics. 
But if you are interested in this topic check out:

import random
random.randint(0,100) #randomly generate the number

random.seed(33) # The value 101 is completely arbitrary, you can pass in any number you want
random.randint(0,80) # You can run this cell as many times as you want, it will always return the same number

Refer the Random module in API/Random Module chapters

You can use Numpy for more numerical functions
https://towardsdatascience.com/10-numpy-functions-you-should-know-1dc4863764c5

Number system conversion
========================

Binary type
-----------
-A number with the prefix 0b is considered binary
Ex:
print(0b101011000)

Hexadecimal Type
----------------
-A number with the prefix 0o is considered Hex
Ex:
print(0o530)

Octal  Type
-----------
-A number with the prefix 0x is considered Octal
Ex:
print(0x158)

Boolean Type
------------
-boolean has two  logical values of values True or False
-Python comes with Booleans (with predefined True and False displays that are basically just the integers 1 and 0). It also has a placeholder object called None. Let's walk through a few quick examples of Booleans (we will dive deeper into them later in this course).

Ex:
x=False
y=True
x = (1 == True) #In Python, True represents the value as 1 and False as 0
y = (1 == False)
a = True + 4
b = False + 10

print(x)
print(y)
print("x is", x)
print("y is", y)
print("a:", a)
print("b:", b)

#We can use None as a placeholder for an object that we don't want to reassign yet:
#None placeholder
 b = None
#Show
print(b)
None


Number System
*------------*
1)Base 10(Decimal)- Represent any number using 10 digits [0–9]
2)Base 2 (Binary) — Represent any number using 2 digits [0–1]
3)Base 8 (Octal) — Represent any number using 8 digits [0–7]
4)Base 16(Hexadecimal) — Represent any number using 10 digits and 6 characters [0–9, A, B, C, D, E, F]

a=363
print((a) ,"Decimal system")
print(bin(a) ,"binary system")
print(oct(a) ,"octal system")
print(hex(a) ,"hex system")
 
Ref
https://www.quora.com/What-is-the-use-of-number-system-in-computer


Know ASCII , unicode and Numbers systems
----------------------------------------
-All computer data is just numbers,Each character of text is stored as a number.When you press a key on the keyboard, the keyboard sends a number, corresponding to the key that was pressed,When text is displayed on your monitor, each character is read from memory as a number.Computer doesn't understand English or Hindi or any language.But computer do understand only 0 and 1.
-0 means False ,1 means True
-ASCII codes represent text in computers, communications equipment, and other devices that use text
-UNicod is the subset of ASCII and extended upto 2^21 characters

print(ord("h"),"is ASCII value" ) #print ASCII value
print(chr(104 ),"from binary to value")

Refer ASCII_Tables.jpg

ref:
http://www.asciitable.com/ - ASCII table
http://www.differencebetween.net/technology/software-technology/difference-between-unicode-and-ascii/ - Def
https://youtu.be/61Bs7-ycL64
https://realpython.com/python-encodings-guide/
https://byjus.com/maths/number-system/
https://byjus.com/maths/hexadecimal-number-system/

Quiz:
=====

Assignment:
===========


Resources:
=========
https://docs.python.org/3/library/functions.html -built in functions