Polymmorphism
==============
1.Introductions
2.DuckTyping
3.DuckTyping for dependency injection
4.Operator Overloading
5.Runtime polymorphism


1.Introductions
================
Poly=Multi
Morphism = Shape


2.DuckTyping
============
- here both Duck and Human object as the same method call talk , let us now understand how the one function which gives you when it invokes the talk method.

class Duck:
    def talk(self):
        print "Quak Quak"
        

class Human:
    def talk(self):
        print "Hello"


#create a function which multiple things what we do it at runtime
def callTalk(obj):
    obj.talk()


d = Duck()
callTalk(d)

h = Human()
callTalk(h)

3.DuckTyping for dependency injection(DI)
======================================
-To understand concept of ducktypting , we need to understand the dependency injection.
-DI is nothing injecting other object 

Flight --> engine
Engine --> AirbusEngine and BoingEngine

class Flight:
    def __init__(self,engine):
        self.engine = engine
        
    def startEngine(self):
        self.engine.start()
        
class AirbusEngine:
    def start(self):
        print("Starting the airbus engine")

class BoingEngine:
    def start(self):
        print ("Starting the BoingEngine engine")


ae=AirbusEngine()
f =Flight(ae)
f.startEngine()

be=BoingEngine()
f =Flight(be)
f.startEngine()

4.Operator Overloading
======================

#Using number
x=10
y=3
print(x+y)

#string 
s1 = "Hello"
s2 ="How are you"

print (x+y)

#using list
l1 = [1,2,3,4]
l2=[5,6,7,8]
print(l1+l21)

5.Runtime polymorphism
======================
-pythong takes the dynamic runtime behaviour by itself.

class BMW():
    def __init__(self,make,model,year):
        self.model=model
        self.make=make
        self.year=year
    
    def start(self):
        return "starting the the class"
    
    def stop(self):
        pass

class ThreeSeries(BMW):
    def __init__(self,curseControledEnabled,make,model,year):
        BMW.__init__(self,make, model, year)
        self.curseControledEnabled=curseControledEnabled
    
    def start(self): 
        return "Button start "
    

class FiveSeries(BMW):
    def __init__(self,parkingAssist, make, model, year):
        BMW.__init__(make, model, year)
        self.parkingAssist=parkingAssist

bmw  = ThreeSeries(True,"BMW","328i","2018")
print bmw.curseControledEnabled
print bmw.make
print bmw.model
print bmw.year
print bmw.start()

bmw.start()
bmw.stop() 
