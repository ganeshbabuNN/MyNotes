Content
Introduction
Main thread
Thread using function
printing Thread Names
Thread extending the Thread Class
Thread using class
multithreading in action
using sleep()
the Ticketbooking usecase
Thread synchronizations
Add more logic
synchronizations using lock
synchronizations using semaphore 
Thread communication
using a boolean flag
Run and summarize
Thread communication using wait and notify
Use wait and notify

Introduction
============
-presenty default so far we executed, we have used the single threaded model.
-internally it uses the main() method.
-Three ways to create thread in python
1.using a functions
   t=Thread(target=functionName,args)
   t.start()
2.Extending the Thread class
	class MyThread(Thread)
	 overide the run() method
	t.start()
3.create a class  without extending the thread class
   class MyThread
   	display()
   	t=Thread(target=functionName,args)

Main thread
===========
-we shall access the main thread, where by default python is using main thread in backend
-to get access of threading features 

import threading

print(threading.current_thread().getName())
#if you want to compare the current to main thread
if threading.current_thread()==threading.main_thread():
    print("main thread statement")
else:
    print("some other thread")

Thread using function
=====================
-let us explore the first approach by the thread
from threading import Thread

def displaynumber():
    i=0
    while(i<=10):
        print(i) 
        i=i+1

t=Thread(target=displaynumber)
t.start()

printing Thread Names
=====================
-let the print the name of thread 

from threading import *

def displaynumber():
    i=0
    print(current_thread().getName())
    while(i<=10):
        print(i) 
        i=i+1

print(current_thread().getName())
t=Thread(target=displaynumber)
t.start()

Thread extending the Thread Class
=================================
-another approach creating the thread

import threading
from threading import Thread, current_thread

class myThread(Thread):
    def run(self):
        i=0
        print(current_thread().getName() + " mythread()")
        while(i<=10):
            print(i) 
            i=i+1

print(current_thread().getName())
t= myThread()
t.start()

Thread using class
==================
-

import threading
from threading import Thread, current_thread

class myThread():
    
    def displaynumber(self):
        i=0
        print(current_thread().getName())
        while(i<=10):
            print(i)
            i=i+1


print(current_thread().getName())
obj = myThread()
t = Thread(target=obj.displaynumber)  
t.start()
 

multithreading in action
========================
-lets do the multithreading in actions

import threading
from threading import Thread, current_thread

class myThread():
    
    def displaynumber(self):
        i=0
        print(current_thread().getName())
        while(i<=10):
            print(i)
            i=i+1


print(current_thread().getName())
obj = myThread()
t1 = Thread(target=obj.displaynumber)  
t1.start()

print("\n" +current_thread().getName())
t2 = Thread(target=obj.displaynumber)  
t2.start()

print("\n" +current_thread().getName())
t3 = Thread(target=obj.displaynumber)  
t3.start()

using sleep()
============
-using the sleep() method from the which allows the thread to sleep for those seconds

import threading
from threading import Thread, current_thread
from time import sleep

class myThread():
    
    def displaynumber(self):
        i=0
        print(current_thread().getName())
        sleep(4)
        while(i<=10):
            print(i)
            i=i+1


print(current_thread().getName())
obj = myThread()
t1 = Thread(target=obj.displaynumber)  
t1.start()
sleep(4)

print("\n" +current_thread().getName())
t2 = Thread(target=obj.displaynumber)  
t2.start()
sleep(4)

print("\n" +current_thread().getName())
t3 = Thread(target=obj.displaynumber)  
t3.start()
sleep(4)


The Ticketbooking usecase
=========================
from threading import Thread

class BookMyBus():
    
    def buy(self):
        print("confirming the seat")
        print("processing the payment")
        print("printing the ticket")
        
obj=BookMyBus()
t1= Thread(target=obj.buy())
t1.start()

t2= Thread(target=obj.buy())
t2.start()

t3= Thread(target=obj.buy())
t3.start()

Thread synchronizations
=======================
-when multiple thread accessing the same resources, those objects should not crash 

Add more logic
==============
-using the thred synchronisations

from threading import Thread


class BookMyBus():
    
    def __init__(self,availableseats):
        self.availableseats=availableseats
        
    def buy(self,seatRequest):
        print("seatavailable :" , self.availableseats)
        if(self.availableseats>=seatRequest):
            print("confirming the seat")
            print("processing the payment")
            print("printing the ticket")
            self.availableseats-=seatRequest
        else:
            print("No seat available")

obj=BookMyBus(10)
t1= Thread(target=obj.buy(3,)) #buy returns the list
t1.start()

t2= Thread(target=obj.buy(2,))
t2.start()

t3= Thread(target=obj.buy(5,))
t3.start()


synchronizations using Lock
===========================
-using the syanchornizatinos using lock(),acquire() and relase()
from threading import Thread, Lock
class BookMyBus():
    
    def __init__(self,availableseats):
        self.availableseats=availableseats
        self.l = Lock() # creating the instance of the lock() class
        
    def buy(self,seatRequest):
        self.l.acquire()
        print("seatavailable :" , self.availableseats)
        if(self.availableseats>=seatRequest):
            print("confirming the seat")
            print("processing the payment")
            print("printing the ticket")
            self.availableseats-=seatRequest
        else:
            print("No seat available")
        self.l.release()

obj=BookMyBus(10)
t1= Thread(target=obj.buy(3,)) #buy returns the list
t1.start()

t2= Thread(target=obj.buy(2,))
t2.start()

t3= Thread(target=obj.buy(5,))
t3.start()

synchronizations using semaphore
================================
-using the syanchornizatinos using lock(),acquire() and relase()

from threading import Thread, Lock, Semaphore


class BookMyBus():
    
    def __init__(self,availableseats):
        self.availableseats=availableseats
        self.l = Semaphore() # creating the instance of the lock() class
        
    def buy(self,seatRequest):
        self.l.acquire()
        print("seatavailable :" , self.availableseats)
        if(self.availableseats>=seatRequest):
            print("confirming the seat")
            print("processing the payment")
            print("printing the ticket")
            self.availableseats-=seatRequest
        else:
            print("No seat available")
        self.l.release()

obj=BookMyBus(10)
t1= Thread(target=obj.buy(3,)) #buy returns the list
t1.start()

t2= Thread(target=obj.buy(2,))
t2.start()

t3= Thread(target=obj.buy(5,))
t3.start()

Thread communication
====================
-Genearlly we need to identify how the thread talk each other.. one of the common way is using producer and consumer approach.

using a boolean flag
====================
-one of the approach

from time import sleep
from threading import Thread


class Producer:
    def __init__(self):
        self.prodcuts=[]
        self.ordersplaced = False
    
    def produce(self):
        for i in range(1,5):
            self.prodcuts.append("Product "+ str(i))
            sleep(1)
            print("item added")
        self.ordersplaced=True

class Consumer:
    def __init__(self,prod):
        self.prod=prod
    
    def consume(self):
        while self.prod.ordersplaced == False:
            print("waiting for the orders")
            sleep(0.2)
        
        print("order shipped " ,self.prod.prodcuts)

p =Producer()
c=Consumer(p)

t1=Thread(target=p.produce)
t2=Thread(target=c.consume)
t1.start()
t2.start()

Run and summarize
=================

Thread communication using wait and notify
===========================================
- instead of boolean flag, you can handle the thread communication using wait and nofity method

Use wait and notify
===================

from time import sleep
from threading import Thread, Condition


class Producer:
    def __init__(self):
        self.prodcuts=[]
        self.c = Condition()
    
    def produce(self):
        self.c.acquire()
        for i in range(1,5):
            self.prodcuts.append("Product "+ str(i))
            sleep(1)
            print("item added")
        self.c.notify()
        self.c.release()
        
class Consumer:
    def __init__(self,prod):
        self.prod=prod
    
    def consume(self):
        self.prod.c.acquire()
        self.prod.c.wait(timeout=0)
        print("order shipped " ,self.prod.prodcuts)
        self.prod.c.release()

p =Producer()
c=Consumer(p)

t1=Thread(target=p.produce)
t2=Thread(target=c.consume)
t1.start()
t2.start()



Quiz:
=====

Assignment:
===========

Resources
=========