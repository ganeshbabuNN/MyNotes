Content
Regular Expressions
Functions
Meta-Characters(Quantifiers)
Sequence Characters
Sets
special characters
using special characters

Regular Expressions
===================
-The regular expressions can be defined as the sequence of characters which are used to search for a pattern in a string. 
-The module re provides the support to use regex in the python program. 
-The re module throws an exception if there is some error while using the regular expression.

Regular Expressions (sometimes called regex for short) allows a user to search for strings using almost any sort of rule they can come up. 
For example, finding all capital letters in a string, or finding a phone number in a document.
Regular expressions are notorious for their seemingly strange syntax. This strange syntax is a byproduct of their flexibility. 
Regular expressions have to be able to filter out any string pattern you can imagine, which is why they have a complex string pattern format.

Before using Re
--------------
-->text ="The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"

We'll start off by trying to find out if the string "phone" is inside the text string. Now we could quickly do this with:
->'phone' in text

The re module must be imported to use the regex functionalities in python.

Functions
=========
match   - This method matches the regex pattern in the string with the optional flag. It returns true if a match is found in the string otherwise it returns false.
search  - This method returns the match object if there is a match found in the string(only onces)
findall - It returns a list that contains all the matches of a pattern in the string(more then one occurences)
split   -  Returns a list in which the string has been split in each match.
sub     - Replace one or many matches in the string.

findall
*-----*
The findall() function returns a list containing all matches.

import re

text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall("phone",text)
x

The list contains the matches in the order they are found.
If no matches are found, an empty list is returned:
x=re.findall("ganesh",text)
x

The search() Function
*-------------------*
The search() function searches the string for a match, and returns a Match object if there is a match.
If there is more than one match, only the first occurrence of the match will be returned.

import re
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall("\s",text)
x

If no matches are found, the value None is returned:
Match Object :-
A Match Object is an object containing information about the search and the result.
Note: If there is no match, the value None will be returned, instead of the Match Object.

The Match object has properties and methods used to retrieve information about the search, and the result:

.span() returns a tuple containing the start-, and end positions of the match.
.string returns the string passed into the function
.group() returns the part of the string where there was a match

.span():
**---**
Print the position (start- and end-position) of the first match occurrence.
The regular expression looks for any words that starts with an upper case "p":

text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.search("n",text)
print(x.span())

.string
**----**
Print the string passed into the function:

text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.search("\s",text)
print(x.string)

.group()
**----**
Print the part of the string where there was a match.
The regular expression looks for any words that starts with an upper case "C":

text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.search(r"C",text)
print(x.group())

The split() Function
*------------------*
The split() function returns a list where the string has been split at each match:

import re
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.split("\s",text)
x

-You can control the number of occurrences by specifying the maxsplit parameter:

import re
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.split("\s",text,1)
x

The sub() Function
*----------------*
The sub() function replaces the matches with the text of your choice:

import re
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.sub("\s","|",text)
x

You can control the number of replacements by specifying the count parameter:
Replace the first 2 occurrences:

import re
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.sub("\s","|",text,2)
x

Meta-Characters(Quantifiers)
============================
Metacharacter is a character with the specified meaning.

[]-It represents the set of characters-	"[a-z]"
\-It represents the special sequence -"\r"
.-It signals that any character is present at some specific place -"Ja.v."
^-It represents the pattern present at the beginning of the string -"^Java"
$-It represents the pattern present at the end of the string-"point$ "
*-It represents zero or more occurrences of a pattern in the string-"hello*"
+-It represents one or more occurrences of a pattern in the string-"hello+"
{}-The specified number of occurrences of a pattern the string-"java{2}" {m,n} m is max and n is Min \D{3}-abc ,\d{2,4}-123,\w{3}-anycharacters
|-It represents either this or that character is present-"java|point"
()-Capture and group
?-Once or More [plurals?]

[]-
A set of characters
#Find all lower case characters alphabetically between "a" and "d":
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[a-d]",text) ##Find all lower case characters alphabetically between "a" and "m":
print(x)

\-
Signals a special sequence (can also be used to escape special characters)
#Find all digit characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\d",text) ##Find all digit characters:
print(x)

.-
Any character (except newline character)
#Search for a sequence that starts with "ph", followed by two (any) characters, and an "e":
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"ph..e",text)
print(x)

^-
Starts with
#Check if the string starts with 'The':
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"^The",text)
print(x)

$-
Ends with
#Check if the string ends with '23-203-11|':
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"23-203-11!$",text)
print(x)

*-
Zero or more occurrences	
#Check if the string contains "phonx" followed by 0 or more "x" characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"phonx*",text)
print(x)

+
One or more occurrences	
#Check if the string contains "phonx" followed by 1 or more "x" characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"phonx+",text)
print(x)

{} -
Exactly the specified number of occurrences
#Check if the string contains "Cal" followed by exactly two "l" characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"Cal{2}",text)
print(x)

|-
Either or
#Check if the string contains either "falls" or "stays":
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"phone|soon",text)
print(x)

Sequence Characters
===================
-A regular expression can be formed by using the mix of meta-characters, special sequences, and sets.

Special sequences(identifier)
-----------------------------
-Special sequences are the sequences containing \ followed by one of the characters.
-Characters such as a digit or a single string have different codes that represent them. 
-You can use these to build up a pattern string. Notice how these make heavy use of the backwards slash \ . 
-Because of this when defining a pattern string for regular expression we use the format:
	r'mypattern'
-placing the r in front of the string allows python to understand that the \ in the pattern string are not meant to be escape slashes.
-Below you can find a table of all the possible identifiers:

\A- It returns a match if the specified characters are present at the beginning of the string.
\b- It returns a match if the specified characters are present at the beginning or the end of the word.
\B- It returns a match if the specified characters are present at the beginning of the word but not at the end.
\d- It returns a match if the string contains digits [0-9].
\D- It returns a match if the string doesn't contain the digits [ABC].
\s- It returns a match if the string contains any white space character[a b c]
\S- It returns a match if the string doesn't contain any white space character.
\w- It returns a match if the string contains any word characters.[Yoyo]
\W- It returns a match if the string doesn't contain any word [*-+=)]
\Z- it returns a match if the specified characters are at the end of the string.

Notice the repetition of \d. That is a bit of an annoyance, especially if we are looking for very long strings of numbers. Let's explore the possible quantifiers.

\A-
Returns a match if the specified characters are at the beginning of the string
#Check if the string starts with "The":
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\AThe",text)
print(x)

\b-
Returns a match where the specified characters are at the beginning or at the end of a word
(the "r" in the beginning is making sure that the string is being treated as a "raw string")
#Check if "hone" is present at the beginning of a WORD:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\bphone",text)
print(x)

#Check if "hone" is present at the end of a WORD:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"hone\b",text)
print(x)

\B-
Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word
(the "r" in the beginning is making sure that the string is being treated as a "raw string")
#Check if "one" is present, but NOT at the beginning of a word:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\Bone",text)
print(x)

\d-
Returns a match where the string contains digits (numbers from 0-9)
#Check if the string contains any digits (numbers from 0-9):
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\d",text)
print(x)

\D-
Returns a match where the string DOES NOT contain digits
#Return a match at every no-digit character:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\D",text)
print(x)

\s-
Returns a match where the string contains a white space character
#Return a match at every white-space character:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\s",text)
print(x)


\S
Returns a match where the string DOES NOT contain a white space character
#Return a match at every NON white-space character:
#Return a match at every NON white-space character:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\S",text)
print(x)

\w-
Returns a match where the string contains any word characters (characters from a to Z, digits from 0-9, and the underscore _ character)	
#Return a match at every word character (characters from a to Z, digits from 0-9, and the underscore _ character):
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\w",text)
print(x)

\W
Returns a match where the string DOES NOT contain any word characters	
#Return a match at every NON word character (characters NOT between a and Z. Like "!", "?" white-space etc.):
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"\W",text)
print(x)

\Z-
Returns a match if the specified characters are at the end of the string	
#Check if the string ends with "23-203-11!":
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"23-203-11!\Z",text)
print(x)


Sets
====
A set is a set of characters inside a pair of square brackets [] with a special meaning:

[arn]-Returns a match if the string contains any of the specified characters in the set.
[a-n]-Returns a match if the string contains any of the characters between a to n.
[^arn]-Returns a match if the string contains the characters except a, r, and n.
[0123]-Returns a match if the string contains any of the specified digits.
[0-9]-Returns a match if the string contains any digit between 0 and 9.
[0-5][0-9]-Returns a match if the string contains any digit between 00 and 59.
[a-zA-Z]-Returns a match if the string contains any alphabet (lower-case or upper-case).

[arn]
Returns a match where one of the specified characters (a, r, or n) are present
import re
#Check if the string has any a, r, or n characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[arn]",text)
print(x)

[a-n]
Returns a match for any lower case character, alphabetically between a and n	
#Check if the string has any characters between a and n:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[a-n]",text)
print(x)

[^arn]
Returns a match for any character EXCEPT a, r, and n	
#Check if the string has other characters than a, r, or n:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[^arn]",text)
print(x)

[0123]
Returns a match where any of the specified digits (0, 1, 2, or 3) are present	
#Check if the string has any 0, 1, 2, or 3 digits:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[0123]",text)
print(x)

[0-9]
Returns a match for any digit between 0 and 9	
#Check if the string has any digits:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[0-9]",text)
print(x)

[0-5][0-9]
Returns a match for any two-digit numbers from 00 and 59	
#Check if the string has any two-digit numbers, from 00 to 59:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[0-5][0-9]",text)
print(x)

[a-zA-Z]
Returns a match for any character alphabetically between a and z, lower case OR upper case	
#Check if the string has any characters from a to z lower case, and A to Z upper case:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[a-zA-Z]",text)
print(x)

[+]
In sets, +, *, ., |, (), $,{} has no special meaning, so [+] means: return a match for any + character in the string	
#Check if the string has any + characters:
text = "The person's phone number is 408-555-1234. Call soon on phone 232-3092-302 and 23-203-11!"
x=re.findall(r"[+]",text)
print(x)

Examples
========

search()
--------
re.search() will take the pattern, scan the text, and then returns a Match object. If no pattern is found, a None is returned (in Jupyter Notebook this just means that nothing is output below the cell).

import re
str1 = "The person's phone number is 408-555-1234. Call soon on other alternate phone 232-3092-302 and 23-203-11! # I am"

result=re.search(r'ph\w\w\w', str1) #start with the char with ph with any pattern
print(result.group())

result=re.search(r'\d', str1)
print(result.group())
                 
result=re.search(r'\D', str1)
print(result.group())

result=re.search(r'\s', str1)
print(result.group())


try:
    result=re.search(r'ph\w', str1)
    print(result.group())
except:
    pass

try:
    result=re.search(r'\W\W\W', str1)
    print(result.group())
except:
    pass

try:
    result=re.search(r'I\b', str1) #It returns a match if the specified characters are present at the beginning or the end of the string.
    print(result.group())
except:
    pass

try:
    result=re.search(r'soo\B', str1) #It returns a match if the specified characters are present at the beginning of the string but not at the end.
    print(result.group())
except:
    pass

try:
    result=re.search(r'The \A', str1)
    print(result.group())
except:
    pass

try:
    result=re.search(r'I am\Z', str1)
    print(result.group())
except:
    pass

findall() and match()
---------------------
import re
str1 = "The person's phone number is 408-555-1234. Call soon on other alternate phone 232-3092-302 and 23-203-11! # I am"

result =re.findall(r'p\S\S\Se',str1)
print(result)

result =re.findall(r'p\w\w\Se',str1)
print(result)	

split()
-------
import re
str1 = "The person's phone number is 408-555-1234. Call soon on other alternate phone 232-3092-302 and 23-203-11! # I am"

result = re.split(r'phon\w',str1)
result

subsitute()
----------
import re
str1 = "The person's phone number is 408-555-1234. Call soon on other alternate phone 232-3092-302 and 23-203-11! # I am"

result = re.sub(r'phone','Telephone',str1)
result

using quantifiers
-----------------
import re
str1 = "Take up One idea. One idea at a time On"

result=re.findall(r'O\w+', str1)
print(result)

result=re.findall(r'O\w+', str1)
print(result)

result=re.findall(r'O\w{2}', str1)
print(result)

result=re.findall(r'O\w{1,2}', str1)
print(result)

#Using Pipe
re.search(r"man|woman","This man was here.")
re.search(r"man|woman","This woman was here.")
#wildcard
re.findall(r".at","The cat in the hat sat here.")
re.findall(r".at","The bat went splat")

#Notice how we only matched the first 3 letters, that is because we need a . for each wildcard letter. 
Or use the quantifiers described above to set its own rules
re.findall(r"...at","The bat went splat")

#However this still leads the problem to grabbing more beforehand. Really we only want words that end with "at".
# One or more non-whitespace that ends with 'at'
re.findall(r'\S+at',"The bat went splat")

#Starts with and Ends With $
# Ends with a number
re.findall(r'\d$','This ends with a number 2')

# Starts with a number
re.findall(r'^\d','1 is the loneliest number.') #Note that this is for the entire string, not individual words!

Exclusion
---------
#To exclude characters, we can use the ^ symbol in conjunction with a set of brackets []. Anything inside the brackets is excluded. For example
phrase = "there are 3 numbers 34 inside 5 this sentence."
re.findall(r'[^\d]',phrase)

#To get the words back together, use a + sign
re.findall(r'[^\d]+',phrase)

#We can use this to remove punctuation from a sentence.
test_phrase = 'This is a string! But it has punctuation. How can we remove it?'
re.findall('[^!.? ]+',test_phrase)
clean = ' '.join(re.findall('[^!.? ]+',test_phrase))

#Brackets for Grouping
As we showed above we can use brackets to group together options, for example if we wanted to find hyphenated words:
text = 'Only find the hypen-words in this sentence. But you do not know how long-ish they are'
re.findall(r'[\w]+-[\w]+',text)

#Parenthesis for Multiple Options
If we have multiple options for matching, we can use parenthesis to list out these options. For Example:
# Find words that start with cat and end with one of these options: 'fish','nap', or 'claw'
text = 'Hello, would you like some catfish?'
texttwo = "Hello, would you like to take a catnap?"
textthree = "Hello, have you seen this caterpillar?"

re.search(r'cat(fish|nap|claw)',text)
re.search(r'cat(fish|nap|claw)',texttwo)
# None returned
re.search(r'cat(fish|nap|claw)',textthree)


Matching dates
---------------
-returns to the matching dates

result=re.findall(r'\d{1,1}-\d{1,1}-\d{4}', str1)
print(result)

result=re.findall(r'\d{1,2}-\d{1,2}-\d{4}', str1)
print(result)

special characters
------------------
-special characters like \ . ^ $ [...] [^...] (...) (R|S)

using special characters
------------------------
import re
str1 = "Take up 1-3-2019 One idea. One idea at a time On 12-11-2020"

result=re.findall(r'^T\w', str1)
print(result)

Quiz:
=====

Assignment:
===========

Resources
=========
https://docs.python.org/3/howto/regex.html
https://www.w3schools.com/python/python_regex.asp
https://pymotw.com/3/re/index.html
https://www.geeksforgeeks.org/write-regular-expressions/
