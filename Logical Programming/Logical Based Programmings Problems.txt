LBP1
~~~~~
problem statement:

Program to check whether the given number is even or odd number.

inputs ----------> a number from the user
output  ---------> even or odd or invalid
constraint ------> n>=0

LBP2
~~~~~
Problem:
Given an integer n, perform the following conditional actions,
if n is odd, print weird,
if n is even and in the inclusive range of 2 to 5, print Not Weird.
if n is even and in the inclusive range of 6 to 20, print Weird.
if n is even and greater than 20, print Not Weird.

input-----> a number from the user
contraint-> 1<=n<=100
output----> Weird or Not Weird

LBP3
~~~~
To check whether the given year is leap year or not.

input------> year from the user
constraint-> no constraint
output-----> leap year or not leap year

hint: for century year if it is divisble by 400 then only it is leap year

LBP4
~~~~
The e-commerce company Bookshelf wishes to analyse its monthly sales data between minimum range 30 to max range 100. The company has categorized these book sales into four groups depending on the number of sales with the help of these groups the company will know which stock they should increase or decrease in their inventory for the next month. the groups are as follows

sales range		groups
30-50 ------------------> D
51-60 ------------------> C
61-80 ------------------> B
81-100 -----------------> A

write an alg to find the group for the given book sale count.

input--------> an integer salesCount represent total sales of a book
output-------> a character representing the group of given sale count
constraint---> 30<=saleCount<=100

LBP5
~~~~
Return the Next Number from the Integer Passed (IBM 2020)
implement a program that takes a number as an argument, increments the number by +1 and returns the result

input ----------> a number from the user
constraints-----> no constraints
output ---------> an incremented value

LBP6
~~~~
Free Coffee Cups
For each of the 6 coffee cups I buy, I get a 7th cup free. In total, I get 7 cups. 
Implement a program that takes n cups bought and print as an integer the total number of cups I would get.

input -------------> n number of cups from user
constraints -------> n>0
output ------------> number of cups present have

LBP7
~~~~~
Extract Digits from the number

Implement a program to extract digits from the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print digits in line sep by space

LBP8
~~~~
Sum of Digits 

Implement a program to calculate sum of digits present in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of digits


LBP9
~~~~
Sum of even Digits 

Implement a program to calculate sum of even digits present in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of even digits

LBP10
~~~~~~
Sum of odd Digits 

Implement a program to calculate sum of odd digits present in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of odd digits

LBP11
~~~~~
Sum of prime Digits 

Implement a program to calculate sum of prime digits present in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of prime digits

LBP12
~~~~~~
Sum of Digits  divisible by 3

Implement a program to calculate sum of digits that are divisible by 3 in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print sum of digits that are divisible by 3

LBP13
~~~~~
Number of digits

Implement a program to calculate number of digits in the given number

input -------------> a number from the user
constraint --------> n>0
output ------------> print number of digits in the number

					LBP14
==============================================================================================
Reverse Integer

Given an integer x, return x with its digits reversed. 

input---------> a number from user
constraint ---> n>=0
output -------> reverse of the given number

					LBP15
==============================================================================================
LBP15

Duck Number

Program to read a number and check whether it is duck number or not.

A duck number is a number which has zeros present in it, but no zero present in the begining of the number.

input-------> a number from the user
contraint --> n>=0
output------> Yes or No


					LBP16
==============================================================================================
LBP16

Number of Occurrences

Program to find number of occurences of the given digit in the number n

input ------> two numbers n and d
constraints-> no constraints
output -----> number of occurrences


LBP17 ----> Paliandrome Number
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Program to check whether the given number is paliandrome or not

A number is said to paliandrome if it is equal to the original number.

input -----> a number from the user
constraint-> n>0
output ----> Yes or No


LBP18 (IBM)
~~~~~~~~~~~~
Check BirthDay

Lisa always forgets her birthday which is on 5th July. 
So develop a function/method which will be helpful to remember her birthday.

The function/method checkBirthday return an integer 1, if it is her birthday else return 0. 
the function/method checkBirthday accepts two arguments.
Month, a string representing the month of her birth and 
day, an integer representing the date of her birthday.

input -----------> month & day 
constraints -----> no
output ----------> 1 or 0

LBP19
~~~~~~
Decimal to Binary

A network protocol specifies how data is exchanged via transmission media. 
The protocol converts each message into a stream of 1's and 0's. 
Given a decimal number, write an algorithm to convert the number into a binary form.

input ---------> a number
constraint ----> n>=0
output --------> binary number


LBP20
~~~~~~
Lucky Customer

An e-commerce website wishes to find the lucky customer who will be eligible for full value cash back. 
For this purpose,a number N is fed to the system. 
It will return another number that is calculated by an algorithm. 
In the algorithm, a sequence is generated, in which each number n the sum of the preceding numbers. initially the sequence will have two 1's in it. 
1,1,2,3,5,8......
The System will return the Nth number from the generated sequence which is treated as the order ID. The lucky customer will be one who has placed that order. 
Write an alorithm to help the website find the lucky customer.

input --------> a number
constraint ---> n>0
output -------> a number


LBP21
~~~~~~
Christmas offer

An e-commerce company plans to give their customers a special discount for the Christmas, they are planning to offer a flat discount. The discount value is calculated as the sum of all prime digits in the total bill amount.

Write an algorithm to find the discount value for the given total bill amount.

input ----> the input consists of an integer order value representing the total bill amount
condition-> no conditions
output ---> print an integer representing discount value for the given total bill amount.


LBP22
~~~~~
Niven Number

Write a program to accept a number and check and display whether it is a Niven Number or not.
Niven Number is that a number which is divisible by its sum of digits.

input -----> a number
constraint-> n>0
output ----> Niven Number or Not


LBP23
~~~~~
A Special two digit number
A special two digit number is a number such that when the sum of its digits is added to the product of its digits, the result should be equal to the original two-digit number.

Implement a program to accept a two digit number and check whether it is a special two digit number or not.

input -----> a two digit number
constraint-> 10<=n<=99
output ----> special two digit number or not

LBP24
~~~~~
Sum of even numbers
Implement a program to find sum of even number between x and y both are inclusive.

input -----> two int values
constraint-> no
output ----> sum of even numbers between x and y

LBP25:
~~~~~~~
Celsius to Fahrenheit
Create a function/method ti convert celsius to fahrenheit

input ------> celsiusconstrint --> no
output -----> Fahrenheit

F = (C*9/5)+32

LBP26
~~~~~~
Fahrenheit to Celsius

Program to convert fahrenheit to celsius.

input -------> fahrenheit
constraint --> no
output ------> celsius

formula: (F-32)*5/9

LBP27
~~~~~
Find The Sequence Sum

Given three integers i,j & k, 
a sequence sum to be the value of i+(i+1)+(i+2)..+j+(j-1)+(j-2)+..+k
(increment from i until it equals to j, then decrement from j until equals k). 
Given values i,j,k. 
caluclate the sequence sum as described.

int getSequenceSum(int,int,int);

input -------> Three int values
constraints--> no
output ------> sum based on given constraints

LBP28
~~~~~
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. 
In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

input --------> a number from the user
constriants --> no
output -------> number of ways

1----> 1
2 ---> 2
3 ---> 3
4 ---> 5
.
.
.

1 ----> 1
2 ----> 2
3 ----> 3
4 ----> 5
.
.

LBP29
~~~~~
Prime Number or Not

Write a program to check whether the given number is prime number or not. A number is said to prime if it is having only two factors. i.e. 1 and number itself.

input ------> a number from the user
constraint--> n>1
output -----> true or false


LBP30
~~~~~~
Valid Palindrome

Given a string, determine if it is a Palindrome string or not. 
A String is Palindrome if it is equal to reverse of the original string.

input ------> A String from the user
constriant--> Non-empty String
output -----> Palindrome or not


abc -----> Not Pali
aba -----> Pali
nayan ---> Pali
madam ---> pali
anna ----> pali
nitin ---> pali
radar ---> pali
level ---> pali
vobov ---> pali
malayalam -> pali

LBP31
~~~~~
Create PIN using Three given numbers

"Secure Assets Private Ltd", a small company that deals with lockers has recently started manufacturing digital locks which can be locked and unlocked using PINs (passwords). You have been asked to work on the module that is expected to generate PINs using three input numbers.

The three given input numbers will always consist of three digits each 
i.e. each of them will be in the range >=100 and <=999.

Bellow are the rules for generating the PIN.

1. The PIN should made up of 4 digits.
2. The unit (ones) position of the PIN should be the least of the units position of the three numbers.
3. The tens position of the PIN should be the least of the tens position of the three input numbers.
4. The hundreds position of the PIN should be least of the hundreds position of the three numbers.
5. The thousands position of the PIN should be the max of all digits in the three input numbers.

input ----------> three numbers
constraints ----> all the numbers must be in the range of >=100 and <=999
output ---------> PIN value

LBP32
~~~~~
Program to count number of special characters and white spaces in a given string.

input --------> A string from the user
constraint ---> non-empty string
output -------> number of special characters



LBP33
~~~~~
An e-commerce company plans to give their customers a discount for the newyears holiday. 
The discount will be calcualted on the basis of the bill amount of the order placed. 
The discount amount is the sum of all the odd digits in the customers total bill amount. 
if no odd digits is present in the bill amount, then discount will be zero.

input-> the input consists of an integer bill amount, representing the customers total bill amount.
output --> print an integer representing the discount for the given total bill amount.
constraint ---> n>0


LPB34
~~~~~~
Email validation

Email name should be starts with alphabet and should follw by number or underscore. 
It should contains either numbers or underscore finally ends with gmail.com only.
Then given email id is true otherwise false.

input ------> email id
constraint -> lowercase alphabet [a-z] followed by underscore or digit and gmail.com
output -----> true or false

abc@gmail.com --------> false
abc1@gmail.com -------> true
abc_@gmail.com -------> true
abc1_@gmail.com ------> false
abc__@gmail.com ------> false
abc34@gmail.com ------> false
abc8@gmail.com -------> true
abc@facebook.com -----> false


LBP35
~~~~~
The IT company "Soft ComInfo" has decided to transfer its messages through the N/W using new encryption technique. 
The company has decided to encrypt the data using the non-prime number concept. 
The message is in the form of a number and the sum of non-prime digits present in the message is used as the encryption key.
Write an algorithm to determine the encryption key.
input ------> The input consists of an integer numMsg representing the numeric form of the message.
output ------> print an integer representing the encryption key.

note: Digit 1 and 0 are considered as a prime number.

prime digits -----> 0,1,2,3,5,7
non-prime --------> 4,6,8,9


LBP36
~~~~~
Implement a program to return First capital letter in a String
input -------> A string from the user
constraint --> non-empty string
output ------> First Capital letter


LBP37
~~~~~~
Implement a program to calculate toggle case of each characters of a string

input -------> A String from user
constriant --> non-empty String
output ------> toggle case string

HeLlO ---> hElLo


LBP38
~~~~~
A company launched a new text editor that allows users to enter english letters, numbers and white spaces only. If a user attempts to enter any other type of characters, it is counted as miss.
Given a String text, write an algorithm to help the developer detect the number of misses by a given user in the given input.

input --------> String
constraint ---> non-empty string
output -------> number of misses

Good@morning! -----> 2


LBP39
~~~~~~
Implement the following function
	nt BlackJack(int n1,int n2);

the function accepts two +ve integers n1 and n2 as its arguments.
Implement the function on given two vlaues to return an int value as follows

return whichever value is nearest to 21 without going over. Return if they go both go over.

input --------> two int values n1 and n2
constraint ---> no
output -------> 0 or n1 or n2


LBP40
~~~~~
A company wishes to transmit data to another server. 
The data consists of numbers only. 
To secure the data during transmission, they plan to reverse the data during transmission,
they plan to reverse the data first.
Write an algorithm to reverse the data first

input -----> an integer data, representing the data to be transmitted
output ----> print an integer representing the given data in reverse form


LBP41
~~~~~
One Time Password
A company wishes to devise an order confirmation procedure. 
They plan to require an extra confirmation instead of simply auto-confirming the order at the time it is placed. 
for this purpose, 
the system will generate one time password to be shared with the customer.
The customer who is placing the order has to enter the OTP to confirm the order.
The OTP generated for the requested order ID, as the product of the digits in orderID. 

Write an algorithm to find the OTP for the OrderID.

input -----> an intger representing order id
output ----> an integer representing OTP


LBP42
~~~~~
Jackson, a math student, is developing an application on prime numbers.
for the given two integers on the display of the application, 
the user has to identify all the prime numbers within the given range 
(including the given values). 
afterwards the application will sum all those prime numbers. 
Jackson has to write an algorithm to find the sum of all the prime numbers of the given range.
Write an algorithm to find the sum of all the prime numbers of the given range.

input -----> two space sepearted integers RL and RR.
output ----> sum of the prime numbers between RL and RR.

Logic:
1------------> read x and y
2 -----------> check each number inbetween x and y
3 -----------> if it is a prime then add it into sum
4 -----------> print sum

LBP43
~~~~~
An e-Commerce company plans to give thier customers a discount for the newyears holiday. 
The discount will be calcualted on the basis of the bill amount of the order place. 
The discount amount is the product of the sum of all odd digits and the sum of all even digits of the customers total bill amount.

input ----> an integer bill amount, representing the total bill amount of the customer.
output ---> print an integer representing the discount amount for the given total bill.


LBP44
~~~~~
War of Numbers

There is a great war between the even and odd numbers. 
Many numbers already lost thier life in this war and its your task to end this. 
You have to determine which group sums larger. 
the even, or the odd, the larger group wins.

Create a function that takes an array of integers , sums the even and odd numbers seperately, then return the difference between sum of even and odd numbers.

Note: if result is -ve convert it into +ve.

input --------> number and array elements
constraint ---> no
output -------> difference between sum of even and odd numbers


LBP45
~~~~~
Perfect Number

Create a function that tests whether or not an integer is a perfect number. 
A perfect number is a number that can be written as sum of its factors. (equal to sum of its proper divisors) excluding the number itself.

input ------> a number from the user
constraint -> n>0
output -----> true or false

Eg:

6 =======> 1,2,3,6 ====> 1+2+3=6
8 =======> 1,2,4,8 ====> 1+2+4=7



LBP46
~~~~~~
Magic Date

Program to read date, month and year from the user and check whether it is magic date or not. Here are the rules for magic date.

dd-mm-yyyy
dd/mm/yyyy
dd mm yyyy ----> C lang

1) mm*dd is a 1-digit number that matches the last digit in YYYY
2) mm*dd is a 2-digit number that matches the last two digits in YYYY
3) mm*dd is a 3-digit number that matches the last three digits in YYYY

1-1-2001 ===> 1*1=1
1-1-2002 ===> 1*1=1
5-2-2010 ===> 5*2=10

input --------> three int values
constraint----> no
output -------> true or false


LBP47
~~~~~
Oddish or Evenish

Create a function that determines whether a number is Oddish or Evenish. 
A number is Oddish if the sum of all of its digits is Odd, 
and number is Evenish if the sum of all of its digits is even, 
if a number is Oddish return Oddish else return Evenish.

input ----------> a number
constraint -----> n>0
output ---------> Oddish or Evenish


LBP48
~~~~~~
video length in seconds

Accept video length in minutes the format is mm:ss in String format, create a function that takes video length and return it in seconds.

input --------> video length in mm:ss
constraint----> no
output -------> length in seconds

01:00 ====> 60
02:02 ====> 122 
02:01 ====> 121

LBP49
~~~~~~
Next Prime

Given an integer, create a function that returns the next prime. If the number is prime, return the number itself.

input ----------> a number
constraint -----> prime number
output ---------> prime number

10---->11
11---->11
14---->17 etc

LBP50
~~~~~
Sum of digits between two numbers

Create a function that sums the total number of digits between two numbers inclusive. for example, if the numbers are 19 and 22, then (1+9)+(2+0)+(2+1)+(2+2)=19.

input ----------> two numbers from the user
constraints ----> no
output ---------> sum of digits between n1 and n2

LBP51
~~~~~~
Defanging an IP address
Given a valid IP address, return a defanged version of that IP address. A defanged IP address replaces every period '.' with "[.]".
input ----------> A string
constraint -----> non-empty String
output ---------> replacement String

1.1.1.1  ====> 1[.]1[.]1[.]1

LBP52
~~~~~~
Jewels and Stones

You are given Strings jewels representing the types of stones that are jewels, and stones representing the stones you have.
Each character in stones is a type of stone you have 
you want to know how many of the stones you have are also jewels.

Letter are case sensitive. so "a" is considered as a different type of stone from "A".

input ------> A string
constriant -> no
output -----> how many of the stones

J="aA"
S="aAAbbbb"
1+2=3

LBP53
~~~~~
Shuffle String

Given a string s, and an integer array indices of the same length. 
The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string, 
return shuffled string.

input ---------> a string and an array
constraint ----> no
output --------> a string


s=art
  012
a=102
  012

ts=0=>r 1=>a 2=>t

LBP53
~~~~~
Shuffle String

Given a string s, and an integer array indices of the same length. 
The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string, 
return shuffled string.

input ---------> a string and an array
constraint ----> no
output --------> a string


s=art
  012
a=102
  012

ts=0=>r 1=>a 2=>t

LBP55
~~~~~
Check if String ending matches second String

Create a function/method that takes two Strings and returns true of the first string ends with second string, otherwise return false.

Input:  two strings
Constraints: No 
Output: true or false

abc, bc -----> true
kalyan, an --> true
kalyan, a ---> false

LBP56
~~~~~
Shuffle the Name

Create a function/method that accepts a string (of person’s first and last name) and returns a string with in first and last name swapped).

Input:  two space separated strings
Constraints: No 
Output: return last name followed by first name

Prakash Babu -----> Babu Prakash

LBP57
~~~~~
Reverse the order of a String

create a method/function that takes a string as its argument and returns the string in reversed order.

input ---------> a string 
constraint ----> no
output --------> reversed string

Hello ----------> olleH
Hello World ----> dlroW olleH

LBP58
~~~~~
Re-form the word

A word has been split into a left part and right part. Re-form the word by adding both halves together changing the first character to an uppercase letter.

input ---------> two strings from the user
constraint ----> no
output --------> concatenated string with caps in first character

prakash babu ----> Prakashbabu

LBP59
~~~~~
Anagrams

Two strings a and b are called anagrams, if they contain all the same characters in the same frequencies.

input --------> two strings a and b
constraint ---> no
output -------> true or false

abcd,dabc -----> anagrams
abcd,dabb -----> not anagrams
listen,silent -> anagrams

LBP60
~~~~~
Max Occurring Character
Given a string, implement a program to find max occurring character in the given string

input -------> A string from the user.
constraints--> No
output ------> max occurring character

welcome ----> e 
java -------> a

LBP61
~~~~~
You are given coordinates, a string that represents the coordinates of a square of the chess board. bellow is the chess board for your reference.

Return True if the saquare is in white, and false if the square is in Black.

The coordinates will always represent a valid chess board square. The coordinates will always have the letter first, and the number second.

input ----------> a string
constraint -----> length of the string is 2, a<=c[0]<=h and 1<=c[1]<=8
output ---------> true or false

LBP62
~~~~~~
Find the Bomb
Write a function that finds the word "bomb" in the given string (not case sensitive) return "DUCK!" if found, else return "Relax there's no bomb."

input ---------> a string
constraint ----> no
output --------> "DUCK!" or "Relax, There's no bomb."

LBP63
~~~~~
How many vowels
Create a function that takes a string and returns the number of vowels contained within it.

input -----------> a string
constraint ------> no
output ----------> number of vowels

LBP63
~~~~~
How many vowels

Create a function that takes a string and returns the number of vowels contained within it.

input -----------> a string
constraint ------> no
output ----------> number of vowels


LBP65
~~~~~
Stuttering Function

write a function that shutters a word as if someone is struggling to read it. 
The first two letters are repeated twice with an ellipsis ... , and then the word is pronounced with a question mark?

input ------------> a string
contraint --------> no
output -----------> xx... xx... ~~~~~~~?


abc =====> ab...ab...abc?

s=abc
r=ab...ab...abc?

LBP66
~~~~~
Repeating Letters

Create a method that takes a string and returns a string in which each character is repeated once.

input ---------------> String from the user
constraint ----------> No
output --------------> String

String ------> SSttrriinngg

LBP67
~~~~~
Double Letters

Create a function that takes a word and returns true if the word has two consecutive identical letters.

input ---------> A string
constraint-----> No
output --------> true or false

abbc -----> true
abcd -----> false
abab -----> false

LBP68
~~~~~
Andy, Ben and Charlotte are playing a board game. 
The three of them decided to come up with a new scoring system. 
A player's first initial ("A","B" & "C") denotes that players scoring a single point.
Given a string of capital letters. returns an array of the player's scores.

input --------------> A String
constraint ---------> No
output -------------> score

A ---------------> 1 0 0
AB --------------> 1 1 0
ABC -------------> 1 1 1
AABBC -----------> 2 2 1

LBP69
~~~~~
Remove Every vowel from a String

Create a function that takes a string and returns a new string with all vowels removed. 

input -------------> a string 
constraints -------> No
output ------------> a string

welcome ------> wlcm
prakash ------> prksh

Note: Search, Replacement, Removal --------> Regular Expression

LBP70
~~~~~
Space between each character

Create a function that takes a string and returns a string with spaces in between all of the characters.

input ------------> a string
constraints-------> No
output -----------> string

java -----> j a v a
prakash --> p r a k a s h
python ---> p y t h o n

LBP71
~~~~~
VOWEL REPLACER

Create a function that replaces all the vowels in a string with a specified character,

input -----------> A string from the user and a character
cons ------------> no
output ----------> A string

welcome,% ----> w%lc%m%

LBP72
~~~~~
Say "Hello" Say "Bye"

Write a function that takes a string name and number num (either 1 or 0) and 
return "Hello"+name if number is 1, 
otherwise "Bye"+name.

input ------> a string from the user
constraint -> no
output -----> a string

prakash,1 -----> Hello prakash
java,0 --------> Bye java
python,1 ------> Hello python

LBP73
~~~~~~
VALID ZIP CODE

zipcodes consists of 5 consecutive digits. 
Given a string, write a function to determine whether the input is a valid zip code. 
a valid zipcode is as follows

1. must contain only numbers.
2. it should not contain any spaces.
3. length should be only 5.

input ------> A string
constraint -> no
output -----> true or false

11111 ----> true
4564 -----> false
123 4-----> false

LBP74
~~~~~
Returns the middle character of a string

create a function that takes a string and returns, the middle character(s). 
if the word's length is odd return the midlle character.
if the word's length is even, return the middle two characters.

input -----> a string from the user
constraint-> no
output ----> middle character(s)

abc -----> 3 -> Odd ====> b
xyz -----> 3 -> Odd ====> y
abcde ---> 5 -> Odd ====> c
abcd ----> 4 -> Even ===> bc 
middle --> 6 -> Even ===> dd
012345

LBP75
~~~~~
Index of first vowel

create a function that returns the index of first vowel in a string

input ------> a string
con --------> no
output -----> an int value

test ------> e(1) -------------> 1
welcome ---> e(1),o(4),e(6) ---> 1
python ----> o(4) -------------> 4
012345

LBP76
~~~~~
Longest Word
Write a function that finds the longest word in a sentence.
If two or more words are found, return the first longest word. 
Characters such as apostophe, comma, period (and the like) count as part of the word 
(e.g. O'Connor is 8 characters long).

input ------> a string from the user
con --------> no
output------> longest word 

C C++ JAVA AND PYTHON =====> PYTHON
1  3    4   3    6

case1:

prakash sir classes are very good ====> prakash
   7     3      7   3    4    4

case2:

prakash sir classes are very good ====> classes (based on asc value)
   7     3      7   3    4    4

LBP77
~~~~~
Print all permutations of a string

Given a string str, the task is to print all the permutations of str.
A permutation is an arrangement of all or part of a set of objects, with regard to the order of the arrangement. 
For instance, the words ‘bat’ and ‘tab’ represents two distinct permutation (or arrangements) of a similar three letter word.

input ----> string from the user
con ------> no
output ---> all permutations of the string

A (1!=1)  ----> A
AB(2!=2)   ---> AB BA
ABC(3!=6)  ---> ABC ACB BAC BCA CAB CBA
ABCDE (5!=120) --> 120 

back tracking ----> 

LBP78
~~~~~
Removing Duplicate Characters from a string
Given a string S, the task is to remove all the duplicates in the given string. 

input --------> a string from the user
con ----------> remove all duplicates
output -------> a string without duplicates


hello -----> helo
program ---> progam

LBP79
~~~~~
Swap corner words and reverse middle characters

Write a Java program to take an input string and exchange the first and last word and reverse the middle word.

input -------> a string
con ---------> no
output ------> a string

Hello welcome to Java ------> Java ot emoclew Hello

fs = Hello
ls = avaJ

LBP80
~~~~~~
Valid Hex Code
Create a function that determines whether a string is a valid hex code.

A hex code must begin with a pound key # and is exactly 6 characters in length. 
Each character must be a digit from 0-9 or an alphabetic character from A-F. 
All alphabetic characters may be uppercase or lowercase.

input -----> a string from the user
con -------> no
output ----> true or false

#ABCDFE ----> invalid
#123456 ----> valid
#A1B2C3 ----> valid

0-9A-F
#[0-9a-fA-F]{6}

LBP81
~~~~~~
Even Length Words
Write a program to print even length words in a string?

input -----> a string from the user
con -------> no
output ----> list of strings with even length

hello welcome to java ----> welcome java
a ab abc abcd abcde abcdef --> ab abcd abcdef

LBP82
~~~~~
Change Every Letter to the Next Letter

Write a function that changes every letter to the next letter:

"a" becomes "b"
"b" becomes "c"
"d" becomes "e"
and so on ...
'x' becomes 'y'
'y' becomes 'z'
'z' becomes ''

note: there is no z's in test cases, be happy.

input ------> a string from the user
cons -------> no
output -----> modified string

LBP83
~~~~~
First N Vowels

Write a function that returns the first n vowels of a string.

input ------> a string from the user and an integer value
cons -------> Return "invalid" if the n exceeds the number of vowels in a string.
output -----> return first n vowels in the string

welcome to java, 1 -----> e
welcome to java, 2 -----> eo
welcome to java, 3 -----> eoe
welcome to java, 6 -----> eoeoaa 
welcome to java, 7 -----> invalid

LBP84
~~~~~
Is the String in Order?

Create a function that takes a string and returns true or false, depending on whether the characters are in order or not.

input -------> a string from the user
cons --------> for non-empty string print invalid
output ------> true or false

abc ------> true
prakash --> false

LBP85
~~~~~
Integer to English Words
Convert a non-negative integer num to its English words representation.

input ------> a number from the user
con --------> n>0
output -----> number in English words


123 ===> one hundred twenty three
9999 ==> Nine Thousand Nine Hundred Ninty Nine

LBP86
~~~~~~
C*ns*r*d Str*ngs
Someone has attempted to censor my strings by replacing every vowel with a *, l*k* th*s. Luckily, I've been able to find the vowels that were removed.
Given a censored string and a string of the censored vowels, return the original uncensored string.

input --------> original & replacement strings
con ----------> no
output -------> updated string after replacement

w*lc*m*,eoe ====> welcome

LBP87
~~~~~
parentheses balance

Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid.
Formally, a parentheses string is valid if and only if:
It is the empty string, or It can be written as AB (A concatenated with B), where A and B are
valid strings, or It can be written as (A), where A is a valid string. 
Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.

input --------> a string from the user
con ----------> no
output -------> number of parentheses to be added

() -------> 0
()( ------> 1
()()() ---> 0
(((( -----> 4

LBP88
~~~~~
American keyboard
Given a string, return the true if that can be typed using letters of alphabet on only
one row's of American keyboard like the image below.
In the American keyboard:

the first row consists of the characters "qwertyuiop",
the second row consists of the characters "asdfghjkl", and
the third row consists of the characters "zxcvbnm".

Note: 
1. You may use one character in the keyboard more than once. 
2. You may assume the input string will only contain letters of alphabet.

input -------> a string from the user
cons  -------> no
output ------> true or false

LBP89
~~~~~
Rotate String 

We are given two strings, A and B. A shift on A consists of taking string A and moving the leftmost character to the rightmost position. 
For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. 
Return True if and only if A can become B after some number of shifts on A.

input ------> two strings from the user
con --------> non-empty strings
output -----> true or false

LBP90
~~~~~
Missing Letters

Given a string containing unique letters, return a sorted string with the letters that don't appear in the string.

input ---------> a string from the user
con -----------> no
output --------> return missing characters

abc -----> defghijklmnopqrstuvwxyz

LBP91
~~~~~
Replace Letters With Position In Alphabet.
Create a function that takes a string and replaces each letter with its appropriate position in the alphabet.
"a" is 1, "b" is 2, "c" is 3, etc, etc.

Note: If any character in the string isn't a letter, ignore it.

input -----------> a string from the user
constriant ------> non-empty string
output ----------> position of characters seperated by space

abc -----> 1 2 3

LBP92
~~~~~
Replace character with it's occurrence

Implement a Program to replace a character with it's occurrence in given string.

input ---------> a string and a character from the user.
con -----------> non-empty string
output --------> replaced string

LBP93
~~~~~
first non-repeated character

Program to find first non-repeated character

input----> a non-empty string from the user
con -----> no
output --> non-repeated character

india ----> n
indian ---> d

LBP94
~~~~~
Pangrams

Implement a program to check whether the given string pangram or not. 
A pangram is a string that contains all the letters of the English alphabet. 
An example of a pangram is "The quick brown fox jumps over the lazy dog"

input ----> a string from the user
con ------> non-empty string
output ---> Yes or No

LBP95
~~~~~
Print First Letter of each Word

Implement a function/Method to return first character in each word from the given input string.

input-----> a string
con-------> no
output ---> first character in each string

LBP96
~~~~~
Number of vowels

Implement a program to return number of vowels present in the given string

input ---------> a string from the user
con -----------> non-empty string
output --------> return number of vowels

LBP97
~~~~~
Number of consonants

Implement a program to return number of consonants present in the given string

input ---------> a string from the user
con -----------> non-empty string
output --------> return number of consonants

LBP98
~~~~~
Check only digits

Implement a program to check if a string contains only digits.

input ----> a string from the user
con ------> no
output ---> Yes or No

LBP99
~~~~~
Capitalize Every word first character
Implement a program to capitalize first letter of each word in a string.

input ----> a string from the user
con ------> non-empty string
output ---> a string with capitalization

welcome to programming -----> Welcome To Programming

LBP100
~~~~~~
Student Rewarded
You are given a string representing an attendance record for a student. The record only contains the following three characters: 
'A' : Absent. 
'L' : Late. 
'P' : Present. 
A student could be rewarded if his attendance record doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).
You need to return whether the student could be rewarded according to his attendance record.

input ------> a string from the user
con --------> non empty string
output -----> Yes or No

PPP ---> Yes
PAP ---> Yes
PAA ---> No
APA ---> No
PPL ---> Yes
PLL ---> Yes
LLL ---> No
LPAPLPPLL --> Yes

LBP101
~~~~~~~
reading and writing an array
Implement a program to read an array elements and write on the screen.
input -------> size of the array and array elements 
con ---------> size<100 
output ------> the given array

5
7 5 3 1 9
7 5 3 1 9

array: it is a collection of similar type of data elements (int)
array index starts from 0 to size-1
n
for(i=0;i<n;i++)
for(i=1;i<=n;i++)

LBP102
~~~~~~
sum of all elements in array
Implement a program to read an array elements and print sum of all its elements.
input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all elements

LBP103
~~~~~~
sum of even numbers in an array
Implement a program to read an array elements and print sum of all even elements.

input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all even elements


LBP104
~~~~~~
sum of odd numbers in an array
Implement a program to read an array elements and print sum of all odd elements.

input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all odd elements


LBP105
~~~~~~~
sum of prime numbers in an array
Implement a program to read an array elements and print sum of all prime elements.
input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all prime elements

LBP106 
~~~~~~
sum of palindrome numbers in an array
Implement a program to read an array elements and print sum of all palindrome numbers in array.

input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all palindrome numbers


LBP107
~~~~~~~
sum of strong numbers in an array
Implement a program to read an array elements and print sum of all strong numbers in array.

input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of all strong numbers

145 = 1!+4!+5!=1+24+120=145 ----> strong number

LBP108
~~~~~~
sum of elements in an array ending with 3
Implement a program to read an array elements and print sum of elements ending with 3 in array.

input -------> size of the array and array elements 
con ---------> size<100 
output ------> sum of elements ending with 3

LBP109
~~~~~~
search for an element in an array
Implement a program to search for an element in an array.

input -------> size, array elements and element to search
con ---------> size<100
output ------> search for the given element and return index

5
1 2 3 5 4

1 ----> 0
2 ----> 1
3 ----> 2
5 ----> 3
4 ----> 4
6 ----> -1

LBP110
~~~~~~
sort the elements in an array ASC
Implement a program to sort the given array elements in ASC order.

input -----> size and array elements
con -------> size<100
output ----> sorted array in ASC

LBP111
~~~~~~
sort the elements in an array DESC
Implement a program to sort the given array elements in DESC order.

input -----> size and array elements
con -------> size<100
output ----> sorted array in DESC

LBP112
~~~~~~
binary search
Implement a program to search for an element in an array.

input -------> size, array elements and element to search
con ---------> size<100
output ------> search for the given element

LBP113
~~~~~~
max element in an array
Implement a program to read array elements and find the max element in an array.
input -------> size and array elements.
con ---------> size<100
output ------> return max element

5
4 2 5 1 3 ===> 1 2 3 4 5

a[n-1]====>1st max element
a[n-2]====>2nd max element
a[n-3]====>3rd max element
.
.
.
a[3-1] =====>3rd min element
a[2-1] =====>2nd min element
a[1-1] =====>1st min element

LBP114
~~~~~~
min element in an array
Implement a program to read array elements and find the min element in an array.

input -------> size and array elements.
con ---------> size<100
output ------> return min element

LBP115
~~~~~~
diff between largest and smallest element in array
Implement a program to read array elements and find the difference between max and min element in an array.

input -------> size and array elements.
con ---------> size<100
output ------> return difference between max and min element.

Logic=====> a[n-1]-a[1-1]

LBP116
~~~~~~~
second largest element in an array
Implement a program to read array elements and find the second max element in an array.

input -------> size and array elements.
con ---------> size<100
output ------> return second max element in array

LBP117
~~~~~~
second smallest element in an array
Implement a program to read array elements and find the second min element in an array.

input -------> size and array elements.
con ---------> size<100
output ------> return second min element in array

LBP118
~~~~~~~
number of occurrences of an element
Implement a program to find the number of occurrences of the given element.

input -------> size,array element and key element
con ---------> size<100
output ------> return number of occurrences

LBP119
~~~~~~
inserting element at first position in an array
Implement a program to insert an element into an array at the first position

input -------> size,array elements and element to be inserted
con ---------> size<100
output ------> return array after insertion

LBP120
~~~~~~
inserting element at last position in an array
Implement a program to insert an element into an array at the last position

input -------> size,array elements and element to be inserted
con ---------> size<100
output ------> return array after insertion

LBP121
~~~~~~
delete an element from first location in an array
Implement a program to delete an element from an array at the first position

input -------> size,array elements 
con ---------> size<100
output ------> return array after deleting from first location

5
1 2 3 4 5

2 3 4 5

LBP122
~~~~~~
delete an element from last location in an array.
Implement a program to delete an element from an array at the last position

input -------> size,array elements 
con ---------> size<100
output ------> return array after deleting from last location

LBP123
~~~~~~
delete an element from an array at the given location
Implement a program to delete an element from an array at the position

input -------> size,array elements and position
con ---------> size<100
output ------> return array after deleting from the location

LBP124
~~~~~~
delete an element from an array
Implement a program to delete the given element from an array 

input -------> size,array elements and element
con ---------> size<100
output ------> return array after deleting

LBP125
~~~~~~~
update an element in an array
Implement a program to update an element in the given array

input ------> size,array elements and element to be updated (old element & new element)
con---------> size<100
output -----> return array after updating

Eg:
5
1 2 3 4 5
3
9
output: 1 2 9 4 5

LBP126
~~~~~~~
update an element in an array
Implement a program to update an element in the given array based on position

input ------> size,array elements and element to be updated and location
con---------> size<100
output -----> return array after updating

Eg:
5
11 22 77 88 10
1
99

output: 11 99 77 88 10

LBP127
~~~~~~
array reverse
Write a program to reverse the elements present in an array

input ------> size, array elements 
con --------> size<100
output -----> return array in reverse

Eg:
5
1 2 3 4 5
output: 5 4 3 2 1

LBP128
~~~~~~~
increment every element in an array by one unit.
Implement a program to increment every element by one unit in array.

input ------> size, array elements 
con --------> size<100
output -----> increment each element by one unit

LBP129
~~~~~~
number of duplicate elements in array
Implement a program to find the number of duplicate elements present in the given array.

input ------> size, array elements 
con --------> size<100
output -----> number of duplicate elements in the array

5
12 13 14 12 13
count = 2

LBP130
~~~~~~
print unique elements in array
Implement a program to find the unique elements present in the given array.

input ------> size, array elements 
con --------> size<100
output -----> print unique elements present in the array

n=5, 1 1 2 3 4 ====> 1 2 3 4
n=5, 1 1 1 2 2 ====> 1 2

LBP131
~~~~~~
sort an array of 0s, 1s and 2s.
Implement a program to read an array and sort array elements with 0s, 1s and 2s.

input ------> size, array elements 
con --------> size<100
output -----> print sorted elements

LBP132
~~~~~~
replace every element with the greatest element on its right side
Implement a program to read an array and replace every element with the greatest element on its right side.

input ------> size, array elements 
con --------> size<100
output -----> print updated array elements

3
7 8 6 ===> 8 8 6

5
2 4 3 1 0 ===> 4 4 3 1 0

LBP133
~~~~~~
sum of two arrays.
Implement a program to find the sum of two arrays and display the result array

input -------> size and array elements
con ---------> no
output ------> print resultent array

4
1 2 3 4
4 3 2 1

5 5 5 5 

LBP134
~~~~~~
sum of elements available at even index
Implement a program to find the sum of elements avaiable at even index locations in an array.

input ----> size and array elements
con ------> no
output ---> print sum value

5
1 2 3 4 5
0 1 2 3 4 ====> 0,2,4 ===> 1+3+5=9

LBP135
~~~~~~
sum of elements available at odd index
Implement a program to find the sum of elements avaiable at odd index locations in an array.

input ----> size and array elements
con ------> no
output ---> print sum value

5
1 2 3 4 5
0 1 2 3 4 ===> 1,3 ===> 2+4=6

LBP136
~~~~~~
sum of first and last, second and second last and so on
Implement a program to find the sum of first and last, second and second last and so on in an array.

input -----> size and array elements
con -------> no
output ----> print sum of first and last, second and second last and so on

1,2,3,4,5
6,6,6

1,2,3,4,5,6
7,7,7

LBP137 
~~~~~~
print reverse of each number in an array
Implement a program to print reverse of each element in an array

input -----> size and array elements
con -------> no
output ----> print reverse of each element in an array

LBP138
~~~~~~
number of even and odd elements
Implement a program to find number of even and odd elements in the given array

input -------> size and array elements
con ---------> no
output ------> print number of even and odd elements line by line

LBP139
~~~~~~
Reverse only First half of the elements.
Implement a program to reverse only first half of the array and keep remaining elements as original.

input ------> size and array elements
con --------> no
output -----> reverse only first half of the array

LBP140
~~~~~~
Difference between two arrays.
Implement a program to find the difference between two arrays

input -------> size and array elements
con ---------> no
output ------> print difference between two arrays as third array

LBP141
~~~~~~
rearrange an array in such an order that– smallest, largest, 2nd smallest, 2nd largest and on
Implement a program to rearrange an array in such an order that- smallest,largest,2nd smallest, 2nd largest and so on.

input ------> size and array elements
con --------> no
output -----> print the elements smallest,largest,2nd smallest,2nd largest and so on.

n=4
[1,2,3,4] ====> 1,4,2,3

n=5
[1,2,3,4,5] ==> 1,5,2,4,3,3

n=6
[1,2,3,4,5,6] => 1,6,2,5,3,4

LBP142
~~~~~~
Array of multiples
Implement a program to create an array with n elements by taking multiples of m.

input -----> m and n 
con--------> size of the array must be n
output ----> return an array with n elements which contains multiples of m.

LBP143
~~~~~~
Inclusive Array Ranges
Write a function that, given the start startNum and end endNum values, return an array containing all the numbers inclusive to that range. 
Note:
The numbers in the array are sorted in ascending order.
If startNum is greater than endNum, return an array with the higher value. 

input -----> n and m values
con -------> no
output ----> return an array with elements from n to m.

LBP144
~~~~~~
Find the Average of the Letters
Create a function that returns the average of an array composed of letters. First, find the number of the letter in the alphabet in order to find the average of the array.

A = 1
B = 2
C = 3
D = 4
E = 5

average = total sum of all numbers / number of item in the set
Return the result rounded to two decimal points.

input -----> an array as string
con -------> no
output ----> Return the result rounded to two decimal points.

LBP145
~~~~~~~
Eliminate Odd Numbers within an Array
Create a function that takes an array of numbers and returns only the even values.

Note:
Return all even numbers in the order they were given.
All test cases contain valid numbers ranging from 1 to 3000.

input -----> size and an array
con -------> no
output ----> remove all odd numbers and print

LBP146
~~~~~~
Positive Count / Negative Sum
Create a function that takes an array of positive and negative numbers. Return an array where the first element is the count of positive numbers and the second element is the sum of negative numbers.

input -------> size and an array
con ---------> If given an empty array, return an empty array and 0 is not positive.
output ------> two space seperated int values.


LBP147
~~~~~~
Return the Sum of the Two Smallest Numbers.
Create a function that takes an array of numbers and returns the sum of the two lowest positive numbers.

input -------> size and an array
con ---------> Dn't count negative numbers
output ------> sum of two smallest positive numbers

LBP148
~~~~~~
Retrieve the Last N Elements
Write a function that retrieves the last n elements from an array.

input -------> size, an array and N value
con ---------> return 0 if n exceeds size of the array
output ------> last N elements

LBP149
~~~~~~
Mini Peaks
Write a function that returns all the elements in an array that are strictly greater than their adjacent left and right neighbors.

input ------> size, an array
con---------> Do not count boundary numbers, since they only have one left/right neighbor.
output -----> an array

7
4 5 2 1 4 7 2
0 1 2 3 4 5 6
5 7

LBP150
~~~~~~
All Numbers In Array Are Prime
Create a function thats takes an array of integers and returns true if every number is prime. Otherwise, return false.

input -------> size and an array
con ---------> 1 is not a prime number.
output ------> true or false

LBP151
~~~~~
Sum of adjacent Distances.
Write a program to calculate and return sum of distances between the adjacent numbers in an array of +ve integers.

input -------> size and array elements
con ---------> no
output ------> an int value

5
10 11 7 12 14 -----> 12
1+4+5+2=12
a[i]-a[i+1]

LBP152
~~~~~~
Odd Even Online Game
You are playing an online game. In the game, a list of N numbers is given. The player has to arrange the numbers so that all the odd numbers of the list come after even numbers. Write an algorithm to arrange the given list such that all the odd numbers of the list come after the even numbers.

input -------> size and array elements
con ---------> no
output ------> all even numbers and odd numbers.

LBP153
~~~~~~~
GARMENTS COMPANY APPAREL
The garments company apparel wishes to open outlets at various locations. The company shortlisted several plots in these locations and wishes to select only plots that are square shaped. Write an algorithm to help Apparel find the number of plots that it can select for its outlets.

input -----> the first line of i/p consists of an integer N, and A1,A2,...AN representing areas of outlets.
output ----> print an integer representing the number of plots that will be selected for outlets.

8
79 77 54 81 48 34 25 16 ---> 3

81, 25, 16 ----> 3

LBP154
~~~~~~~
POOLED CAB SERVICE
A compnay wishes to provide can service for their N employees. The employees have distance ranging from 0 to N-1. The company has calculated the total distance from an employee's residence to the company, considering the path to be followed by the cab is a straight path. The distance of the company from it self is 0. The distance for the employees who live to the left side of the company is represented with a negative sign. The distance for the employees who live to the right side of the company is represented with a positive sign. the cab will be allotted a range of distance. The company wishes to find the distance for the employees who live within the particular distance range.
write a alogrithm to find the distance for the employees who live within the distance range.

input ----> size of the list N ,SD,ED and an array of distance
output ---> distance within the range else -1
con ------> con

6
30 50
29 38 12 48 39 55

t=a[i];
if(t<0)	t=-t;

if t>=30 and t<=50:
	print a[i]

LBP155
~~~~~~~
Kth SHORTEST PROCESSING QUEUE
A company wishes to modify the technique by which tasks in the processing queue are executed. 
There are N processes with unique ID's from 0 to N-1. 
Each of these tasks has its own execution time.
The company wishes to implement a new algorithm for processing tasks. 
for this purpose they have identified a value K by the new algorithm, 
the processor will first process the task that has the Kth shortest execution time.

Write an algorithm to find the Kth shortest execution time.

input ----> array size, k value and array
output ---> kth shortest execution time.

Logic:
1. read an array.
2. sort the array in ASC.
3. read k value.
4. print a[k-1].

LBP156
~~~~~~
INDEX FILTERNING
Create a function that takes two inputs: idx (an array of integers) and str (a string). 
The function should return another string with the letters of str at each index in idx in order.

input ----------> a string followed by size and an array
constraint -----> output must be in lower case but input many not be.
output ---------> a string contained in the specified locations given in the array.

Ex:
welcome
0123456
4
3 0 2 1
cwle

LBP157
~~~~~~
SEVEN BOOM!
Create a function that takes an array of numbers and return "Boom!" if the digit 7 appears in the array.
Otherwise, return "there is no 7 in the array".

input ---------> an array from the user
constraint ----> no
output --------> Boom! or "there is no 7 in the array".

LBP158
~~~~~~
Positives and Negatives
Create a function which validates whether a given array alternates between positive and negative numbers.

input --------------> an array size and array
con ----------------> no
output -------------> true or false

LBP159
~~~~~~
Check if All Values Are True
Write a function that returns true if all parameters are truthy, and false otherwise

input --------------> an array size and array
con ----------------> no
output -------------> true or false

LBP160
~~~~~~
Shared Digits
Create a function that returns true if each pair of adjacent numbers in an array shares at least one digit and false otherwise.

input --------> array size and array elements
con ----------> no
output -------> true or false

LBP161
~~~~~~~
Combined Consecutive Sequence
Write a function that returns true if two arrays, when combined, form a consecutive sequence. 
A consecutive sequence is a sequence without any gaps in the integers, 
e.g. 1, 2, 3, 4, 5 is a consecutive sequence, but 1, 2, 4, 5 is not.


input --------> two array sizes and array elements
con ----------> no
output -------> true or false

LBP162
~~~~~~
Count 5s And Win
Arun is obsessed with primes, especially five. 
He considers a number to be luckiest if it has the highest number of five in it. 
If two numbers have the same frequency of five, Arun considers the last occurence of them to be luckiest, 
and if there is no five in any number, the first given number is considered luckiest. 
Help him choose the luckiest number.

input -----------> array size and elements
con -------------> no
output ----------> return luckiest number

LBP163
~~~~~~
Find the Single Number
Write a function that accepts an array of numbers (where each number appears three times except for one which appears only once) and finds that unique number in the array and returns it.

input -----------> array size and elements
con -------------> no
output ----------> return non-repeated number

LBP164
~~~~~~~
Update Every Element
Implement a progra to update every array element with multiplication of previous and next numbers in array.

input -----> size and array elements
con--------> no
output ----> updated array


LBP165
~~~~~~
Maximum Energy in Science Lab
In a science research lab, combining two nuclear chemicals produces a maximum energy that is the product of  the product of the energy of two chemicals. the energy values of the chemicals can be negative or positive. the scientist wishes to calculate the sum of the maximized energies of the two elements when the reaction happens.

Write an algorithm to find the total energy produced by the chemicals when the reaction happens.

input ------> size and array elements
con --------> no
output -----> max energy
