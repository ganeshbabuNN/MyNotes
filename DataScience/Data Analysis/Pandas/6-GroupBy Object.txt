Intro to the Groupby Module
First Operations with groupby Object
Retrieve a group from a GroupBy object with the get_group Method
Methods on the Groupby Object and DataFrame Columns
Grouping by Multiple Columns
The .agg() Method
Iterating through Groups

Intro to the Groupby Module
===========================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

type(fortune)
type(sectors)


First Operations with groupby Object
====================================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

len(sectors)

#using traditional way
fortune['Sector'].unique()
fortune['Sector'].nunique()
#in groupby object
sectors.size()


fortune.tail()
fortune.loc[45]

#using traditional way
fortune['Sector'].value_counts()
#in groupby object
sectors.first() #    Computed first of values within each group.

fortune.tail()

sectors.last()
fortune.tail()

sectors.groups
fortune.loc[45]

Retrieve a group from a GroupBy object with the get_group Method
================================================================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

sectors.first()
sectors.get_group("Chemicals")
sectors.get_group("Energy")
sectors.get_group("Retailing")

#in df
fortune[fortune['Sector']=='Retailing'] #look out the difference in betwen you want to achieve

Methods on the Groupby Object and DataFrame Columns
==================================================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

sectors.max()
sectors.min()
sectors.sum() #only numerical variables are displayed

sectors.get_group("Apparel")["Profits"].sum() #normal wau
sectors['Revenue'].sum() #other way
sectors['Employees'].sum()
sectors["Profits"].max()
sectors['Profits'].min()
sectors['Employees'].mean()

sectors[['Revenue','Profits']].sum()
sectors[['Revenue','Profits']].max()
sectors[['Employees','Industry']].count()

Grouping by Multiple Columns
============================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby(["Sector","Industry"]) #multiple column grouping
fortune.head(3)

sectors.size()
sectors.sum()
sectors['Revenue'].sum()
sectors['Employees'].mean()

The .agg() Method
=================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

sectors["Employees"].mean()
sectors["Profits"].sum()
sectors["Revenue"].sum()

#combine above using the agg()
sectors.agg({"Revenue":"sum",
             "Profits":"sum",
             "Employees":"mean"
            
})

sectors.agg({"Revenue":["sum","mean"], #mutliple aggregate
             "Profits":"sum",
             "Employees":"mean"
            
})

sectors.agg(["size","sum","mean"])#this will individuals each numeric variables along with this aggregates

Iterating through Groups
========================
fortune=pd.read_csv("fortune1000.csv",index_col='Rank')
sectors=fortune.groupby("Sector")
fortune.head(3)

sectors['Profits'].max()

df=pd.DataFrame(columns=fortune.columns)
df

#classical way using python
for sector,data in sectors: #tempovary data for group by object sector and the results stored in data variables
    high_cmpy_grp=data.nlargest(1,"Revenue")
    df=df.append(high_cmpy_grp)

df

df=pd.DataFrame(columns=fortune.columns)
df
cities=fortune.groupby("Location")
for city,data in cities:
    high_ren=data.nlargest(1,"Revenue")
    df=df.append(high_ren)
df


Quiz
====

Assignment
==========


Resources:
=========
https://pandas.pydata.org/docs/user_guide/groupby.html