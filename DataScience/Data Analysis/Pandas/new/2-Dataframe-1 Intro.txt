Intro to DataFrames I Module
Shared Methods and Attributes between Series and DataFrames
Select One Column from a Pandas DataFrame
Differences between Shared Methods
Select Two or More Columns from a DataFrame
Add New Column to DataFrame
Broadcasting Operations on DataFrames
A Review of the value_counts Method
Drop DataFrame Rows with Null Values with the dropna Method
reteriving the null value in the dataframe
Fill in Null DataFrame Values with the fillna Method
Convert DataFrame Column Types with the astype Method
Sort a DataFrame with the sort_values Method, Part I
Sort a DataFrame with the sort_values Method, Part II
Sort DataFrame Indexwith the sort_index Method
Rank Series Values with the rank Method


Intro to DataFrames I Module
============================
1-dataframe are 2 dimentionsal array , which as rows and columns
import pandas as pd
nba = pd.read_csv("nba.csv")

Shared Methods and Attributes between Series and DataFrames
===========================================================
df=pd.read_csv("nba.csv")
#attributes
df.index
df.values
df.shape
df.columns
df.axes #Return a list representing the axes of the DataFrame. its like combining the index and columns attribute

#methods
df.head()
df.tail()
df.dtypes.value_counts() #get the count of the dtypes
df['Team'].value_counts() #this for the columns

rev=pd.read_csv("revenue.csv",index_col=["Date"])
s=pd.Series([3,2,32,5])
s.sum()
rev.sum(axis=1) # 1 sets to columns and o sets to rows
rev.sum(axis="rows")

Select One Column from a Pandas DataFrame
=========================================
nba=pd.read_csv("nba.csv")
nba.head()
nba["Name"]
nba.Name
# nba.Team Number

Differences between Shared Methods

Select Two or More Columns from a DataFrame
==========================================
nba
# nba["Team","Number"]
nba[["Name","Team"]]
nba[["Name","Number","Position","Age"]]
nba[["Name","Team"]].head()
nba[["Name","Team"]].tail()

#lets create list and select
nba
cols= ["Name","Team","Position","Age"]
nba[cols] #add variable in the dataframe

Add New Column to DataFrame
===========================
nba=pd.read_csv("nba.csv")
nba.head()

#add a new column in a existing dataframe
nba["sports"]="Basket Ball"
nba["League"]="National basketball associations"
nba

nba=pd.read_csv("nba.csv")
#insert on a specific column 
nba.insert(3,column= "sports",value="Basket Ball")
nba
nba.insert(4,column="League",value="National BasketBall Tournament")
nba
output=None #making the output blank

Broadcasting Operations on DataFrames
=====================================
nba=pd.read_csv("nba.csv")
nba.head()
#additions
nba[["Salary"]].add(5)
nba["Salary"].add(5)
nba["Salary"] +5 

#subrations
nba["Salary"].sub(50000)
nba["Salary"]-50000

#multiplications
nba["Weight"].mul(0.453592)
nba["Weight in kg"]=nba["Weight"]*0.453592

#divisions
nba["Salary"].div(10000)
nba["Salary"]/10000


A Review of the value_counts Method
===================================

nba=pd.read_csv("nba.csv")
nba.head()
nba["Team"].value_counts()
# nba[["College","Team"]].value_counts() #not work for dataframe
nba["Team"].value_counts().sort_values()
nba["Position"].value_counts()
nba["Weight"].value_counts().tail()
nba["Salary"].value_counts().head()

Drop DataFrame Rows with Null Values with the dropna Method
===========================================================
Use the .dropna() method of using the how parameter 
* 'any' : If any NA values are present, drop that row or column.
* 'all' : If all values are NA, drop that row or column.

import pandas as pd
nba=pd.read_csv("nba.csv")
nba.head(3)
nba.tail(3)

#remove at the row level
nba.dropna(how="all",inplace=True) # If all values are NA, drop that row or column.
nba.dropna(how="all",inplace=True) # If any NA values are present, drop that row or column.

#remove at the column level
nba.dropna(subset=["Salary","College"]) #remove na of the specific one or more columns
nba # check

Reteriving the null value in the dataframe
==========================================
In pandas null value 

Reteriving the null value at dataframe framework level:
*----------------------------------------------------*
nba=pd.read_csv("nba.csv")
nba.head(3)

#Get a list of columns with missing data using .isnull().any() By default row wise 
nba.isnull().any()
nba.isnull().any(axis=0)
nba.Name.isnull().any()
#Get a list of columns with missing data
nba.columns[nba.isnull().any()]
#Get the number of missing data per column

#traditional way
column_nan=nba.columns[nba.isnull().any()]
column_nan
for column in column_nan: #get the sum of the each null value
    print(column, nba[column].isnull().sum())

#optimized way get the sum()
nba.isnull().sum()
#Get the column with the maximum number of missing data
nba.isnull().sum().nlargest()
nba.isnull().sum().nlargest(1) # top 1 largest
nba.isnull().sum().nlargest(3) # top 3 largest
nba.isnull().sum().sum() #Get the number total of missing data in the DataFrame

#Get a list of columns with missing data using .isnull().any() By default row wise
nba.isnull().any(axis=1) #Find rows with missing data
nba.index[nba.isnull().any(axis=1)] #Get a list of rows with missing data
nba.isnull().sum(axis=1) #Get the number of missing data per row
nba.iloc[457:].isnull().sum(axis=1)#Get the number of missing data for a given row
nba.isnull().sum(axis=1).nlargest(1)## top 1 largest
nba.isnull().sum(axis=1).nlargest(3)## top 3 largest

#Remove rows with missing data
index_nan=nba.index[nba.isnull().any(axis=1)]
index_nan.shape
nba.drop(index_nan,0,inplace=True)
nba.shape

Ref:
https://medium.com/@roshankg96/handling-missing-data-in-pandas-a3c8dfbd1db
https://moonbooks.org/Articles/How-to-filter-missing-data-NAN-or-NULL-values-in-a-pandas-DataFrame-/

Fill in Null DataFrame Values with the fillna Method
====================================================
fill the null value to someother value

nba = pd.read_csv("nba.csv")
nba.head(3)
nba.tail(3)

nba.fillna(0) #fill the missing values to 0  row level

# at the column level
nba["Salary"].fillna(0,inplace=True)
nba["College"].fillna("No College",inplace=True)

nba.isnull() #checking the null

#Remove from the DataFrame the columns with more than 50% of missing data using drop():
column_nan=nba.columns[nba.isnull().any()]
column_nan
for column in column_nan:
    if nba[column].isnull().sum()*100.0/nba.shape[0] > 50:
        nba.drop(column,1, inplace=True)

Convert DataFrame Column Types with the astype Method
=====================================================

nba["salary"]=nba["Salary"].astype("int")
nba["Number"]=nba["Number"].astype("int")
nba["Age"]=nba["Age"].astype("int")
# nba.info()
nba["Team"].nunique()
nba["Team"]=nba["Team"].astype("category")
nba["Position"].nunique()
nba["Position"]=nba["Position"].astype("category")
nba.head()
nba.info()

Assignment:
do the similar to the Train.csv datset

Sort a DataFrame with the sort_values Method
============================================
nba=pd.read_csv("nba.csv")

#ascending parameter
nba.sort_values("Name",ascending="False",inplace=True)
nba.sort_values("Age",ascending="False",inplace=True)
nba.sort_values("Salary",ascending="False",inplace=True) # descending
nba.sort_values("Salary",ascending="True",inplace=True) # descending
nba.sort_values(by="Salary",ascending=True)

na_position parameter:Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.
nba.sort_values("Salary",na_position="first")#sort NaN first 
nba.sort_values("Salary",na_position="last")#sort NaN last

Sort a DataFrame with the sort_values Method
============================================
#sorting more then one column
nba.sort_values(["Team","Name"],ascending=[True,False],inplace=True)

Sort DataFrame Indexwith the sort_index Method
==============================================
nba=pd.read_csv("nba.csv")
nba.sort_values(["Team","Name","Salary"],inplace=True) #sort the values and saved in the dataframe
nba.tail(3)
nba.sort_index(ascending=True,inplace=True)
nba.head()

Rank Series Values with the rank Method
=======================================

nba["Salary Rank"]=nba["Salary"].rank(ascending=False).astype("int")
nba["Salary Rank"]

#getting the count of the stocks
pd.read_csv("google_stock_price.csv",squeeze=True).value_counts().sort_values(ascending=False)


Quiz
====

Assignment
==========


Resources:
=========
