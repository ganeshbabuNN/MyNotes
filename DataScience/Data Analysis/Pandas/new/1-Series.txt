Create A Series Object from a Python List
Create A Series Object from a Python Dictionary
Intro to Attributes on a Series Object
Intro to Methods on a Series Object
Parameters and Arguments
Create Series from Dataset with the pd.read_csv Method
Use the head and tail Methods to Return Rows from Beginning and End of Dataset
Passing pandas Objects to Python Built-In Functions
Accessing More Series Attributes
Use the sort_values method to sort a Series in ascending or descending order
Use the inplace Parameter to permanently mutate a pandas data structure
Use the sort_index Method to Sort the Index of a pandas Series object
Use Python's in Keyword to Check for Inclusion in Series values or index
Extract Series Values by Index Positiox
Extract Series Values by Index Label
Use the get Method to Retrieve a Value for an index label in a Series
Math Methods on Series Objects
Use the idxmax and idxmin Methods to Find Index of Greatest or Smallest Value
Use the value_counts Method to See Counts of Unique Values within a Series
Use the apply Method to Invoke a Function on Every Series Values
The Series#map Method

Create A Series Object from a Python List
=========================================
Series is a one dimensional arrays.
its like a single column

#lets a string series
gbs=["finance","globalit","NN Quality","global safety","GRA","GD","GMA","CSCA","PO","Supplychain"]
len(gbs)

pd.Series(gbs) #convert to to list 
units = pd.Series(gbs)
units
#accessing the series
units[1] #indexing
units[1:3] #slicing but not step
units[0:1]
type(units)
units.to_string()
units

#floating series
stocks=[43.2,42,12,34.1,34.2,32,55]
s=pd.Series(stock)
s


#boolean series
reg=[True,False,False,True,False]
r=pd.Series(reg)
r

Create A Series Object from a Python Dictionary
===============================================
gdgbs={"cdss":"clinical data and systems support",
     "gd":"global development",
     "tdm":"trial data management",
     "b&p":"biostatics and programming",
     "cr":"clinical reporting",
     "cmu":"centrialized monitoring unit",
     "tbas":"trial business analyasis support",
      "qbs":"Quality and business support"
    }

gdgbs['cdss']
gdgbs.keys()
gdgbs.values()
gdgbs.items()

pd.Series(gdgbs) #convert from Dic to Series

Intro to Attributes on a Series Object
======================================
atrributes are like variables or a field of that class

about_me=["smart","playboy","charming","humble","gentle"]
ae=pd.Series(about_me)
ae
ae.values #shows the value
ae.index #shows the index
ae.dtype #show the availale index

Intro to Methods on a Series Object
===================================
petrol_prices=[69,56.43,32.2,44.33,45.32,66]
s=pd.Series(petrol_prices)
s
s.sum()
print(s.product()) #multiple of each number
s.mean()
s.median()
s.std()

Parameters and Arguments
========================
The general Difference between parameters and arguments. 
-Use this take place during the function call
-Function parameter are the names listed in the function definitions.
-Function arguments are the real values passed to the function.

pd.Series(fruits,weekdays)
pd.Series(data=fruits,index=weekdays) #using positional parameter and arguments
pd.Series(fruits,index=weekdays)
pd.Series(data=fruits,weekdays) #lookins for the paremter name if you specifiy in benginge
#to give name of the series
s=pd.Series(data=fruits,index=weekdays,name="fruits") 

index uniqness
==============
Index labels may not be unique all the time.
fruits=["apple","banana","mango","grape","papaya","kiwi"]
weekdays=["monday","tuesday","wednesday","thursday","friday","Monday"] #does it check for a unique values

pd.Series(data=fruits,index=weekdays)
pd.Series(data=fruits,index=weekdays,name="fruits") #to give the name of the series

Create Series from Dataset with the pd.read_csv Method
======================================================
pd.read_csv("pokemon.csv")
#return the subset of columns
pd.read_csv("pokemon.csv",usecols=["Pokemon"])
#squeez :    If the parsed data only contains one column then return a Series.
pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
pokemon

google=pd.read_csv("google_stock_price.csv",squeeze=True)
google

Use the head and tail Methods to Return Rows from Beginning and End of Dataset
==============================================================================
Head gives you the first 5 records of the datasets , where the tail method gives the last 5 records of the datatsets.

pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

pokemon.head()
pokemon.head(10)#pass a argument
pokemon.tail()
pokemon.tail(10)#pass a argument

google.head()
google.head(10)#pass a argument
google.tail()
google.tail(4) #pass a argument

Passing pandas Objects to Python Built-In Functions
===================================================
pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)


#lenght of the series including missing
len(pokemon) 
len(google)
#to get the know the type of object
type(pokemon)
type(google)
dir(pokemon) #diretory to view 

#sorting the series
sorted(pokemon) #by default it is ascending
sorted(pokemon,reverse=True) #for descending
#list
list(pokemon)
list(google)
#dictionary viewing
dict(pokemon)
dict(google)
#max and min functions
max(pokemon)
min(pokemon)
max(google)
min(google)

Accessing More Series Attributes
=================================
pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

#to knows the values
pokemon.values
google.values
#to know the index range of the series
pokemon.index
google.index
#to get to know the type of data type object
pokemon.dtypes
google.dtypes
#to check if the series is unique or not
pokemon.is_unique
google.is_unique
#to check the
pokemon.ndim
google.ndim
#shapping the dataframe
pokemon.shape
google.shape
#size of the series
pokemon.size
google.size
#update the name
pokemon.name="pocket Monster"
pokemon
pokemon.head()

Use the sort_values method to sort a Series in ascending or descending order
============================================================================
pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

Sort a Series in ascending or descending order by some

#sort the values
pokemon.sort_values()
pokemon.sort_values(ascending=False) #sort ascending
pokemon.sort_values().head()
pokemon.sort_values().tail()
google
google.sort_values()
google.sort_values(ascending=False)
google.sort_values().head()
google.sort_values().tail()

Use the inplace Parameter to permanently mutate a pandas data structure
=======================================================================
inplace parameter persists the given operations permantently to that dataframew, 
this parameter are available in most of the method or functions in pandas

pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

pokemon.sort_values(ascending=False,inplace=True)
pokemon

google.sort_values(inplace=True)
google


Use the sort_index Method to Sort the Index of a pandas Series object
=====================================================================
sorts based on the index values

pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

pokemon.sort_index(ascending=False)
pokemon.sort_index(ascending=False,inplace=True)

google.sort_index(ascending=False)
google.sort_index(ascending=False,inplace=True)

Use Python's in Keyword to Check for Inclusion in Series values or index
========================================================================
pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

Traditional in python
100 in [32,2,3,2,100,21]

"ga" in ["ds","ss","vedha","ban"]

pokemon.head(3)
pokemon.index

"Pikachu" in pokemon.values
100 in pokemon #looks for index
"Pikachu" in pokemon.values #looks for values

Extract Series Values by Index Positiox
=======================================
-You can apply the traditional indexing and slcing technique for extracting the series positions

pokemon=pd.read_csv("pokemon.csv",usecols=["Pokemon"],squeeze=True)
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

pokemon[1]
pokemon[3:6]
pokemon[[4,7,100,12]]
# pokemon[[4,7,100,12,10000]] #if those index is not available in thorws an errors
pokemon[:14]
pokemon[-30:-10]

Extract Series Values by Index Label
====================================
#use the index_col parameter set index label during the csv import
pokemon=pd.read_csv("pokemon.csv",index_col=["Pokemon"] ,squeeze=True)

pokemon["Charmander"]
pokemon["Rattata"]
pokemon[["Pidgey","Kakuna"]]
pokemon[["Pikachu","Nidoran","Fearow"]]
pokemon["Blastoise":"Weedle"]

Use the get Method to Retrieve a Value for an index label in a Series
=====================================================================
Get item from object for given key (ex: DataFrame column).
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

pokemon=pd.read_csv("pokemon.csv",index_col=["Pokemon"] ,squeeze=True)
pokemon.sort_index(inplace=True) #need sorting as the index label is not sorted
pokemon.head(3)

#helps to get the item of of those index label
pokemon.get(key=["Pikachu","Weedle","Kakuna"])
pokemon.get(key=["Pikachu","Weedle","Kakuna","sd"]) #return blank if any of the values are missing

#if the item is not avaiable, you can default to other one
pokemon.get(key=["Pikachu","Weedle","Kakuna","sd"])

#default if the values are not found in series
pokemon.get(key=["Pikachu"],default="This is not a pokemoan")

Math Methods on Series Objects
==============================
#count() Return number of non-NA/null observations in the Series.
google.count()
#len() returnall count of all records includ NA
len(google)
google.sum()
google.mean()
google.median()
google.mode()
google.std()
google.sum()/google.count()
google.min()
google.max()
google.describe()

Use the idxmax and idxmin Methods to Find Index of Greatest or Smallest Value
=============================================================================
google=pd.read_csv("google_stock_price.csv",usecols=["Stock Price"],squeeze=True)

Traditional way
min(google.index)
max(google.index)

idmax() Return the row label of the maximum value.(not the index label)
idmin() Return the row label of the min value.

google.idxmax()
google[3011]
google.idxmin()
google[11]
google[google.idxmin()]

Use the value_counts Method to See Counts of Unique Values within a Series
==========================================================================
#Return a Series containing counts of unique values.
#The resulting object will be in descending order so that the
#first element is the most frequently-occurring element.
#Excludes NA values by default

#this will get the values count along the series
pokemon.value_counts()
#for getting sum on counts()
pokemon.value_counts().sum()
#we can sort also by the ascending parmeter
pokemon.value_counts(ascending=True)

google.value_counts()
google.value_counts().sum()

cross verify 
while a < len(pokemon):
    if pokemon[a]=="Water":
        tot=tot+1
    else:
        pass
    a=a+1

Use the apply Method to Invoke a Function on Every Series Values
================================================================
Apply a function along an axis of the Series

import pandas as pd
google = pd.read_csv("google_stock_price.csv", squeeze = True)
google.head(6)

#Assume we need to categorize the stock price
print(google.min())
print(google.mean())
print(google.max())

def price_category(num):
    if num <50:
        return "Low"
    elif num >=50 and num <=335:
        return "moderate"
    else:
        return "excellent"

#now pass the funciton name to the apply method 
google.apply(price_category)

#using lambda expressions
google.apply(lambda a:a+100)


The Series#map Method
=====================
Map values of Series according to input correspondence.
-its like a vlookup functionaliy in excel. but ensure the values should match in both the series not the index. the lookup value will be the value to index

import pandas as pd
import numpy as np
pokeman_name=pd.read_csv("pokemon.csv", usecols=["Pokemon"],squeeze = True)
pokeman_type=pd.read_csv("pokemon.csv",index_col=["Type"],squeeze=True)

pokeman_name.head()
pokeman_type.head()

pokeman_type.map(pokeman_name)


Quiz
====



Resources:
=========

Assignment
==========
## Create a list with 4 countries - United States, France, Germany, Italy
# Create a new Series by passing in the list of countries
# Assign the Series to a "countries" variable

# Create a list with 3 colors - red, green, blue
# Create a new Series by passing in the list of colors
# Assign the Series to a "colors" variable

# Given the "recipe" dictionary below,
# create a new Series by passing in the dictionary as the data source
# Assign the resulting Series to a "series_dict" variable
recipe = {
  "Flour": True,
  "Sugar": True,
  "Salt": False
}


2)
# Assume pandas ha salready been imported and assigned to the alias "pd".

flavors = ["Spicy Sweet Chili", "Cool Ranch", "Nacho Cheese", "Salsa Verde"]

# Create a new Series object, passing in the flavors list defined above
# Assign it to a 'doritos' variable. The resulting Series should look like this:
#
#
#   0    Spicy Sweet Chili
#   1           Cool Ranch
#   2         Nacho Cheese
#   3          Salsa Verde
#   dtype: object


# Below, sort the doritos Series in descending order.
# Make sure the operation is permanent.
# The Series should like this afterwards:
#
#   0    Spicy Sweet Chili
#   3          Salsa Verde
#   2         Nacho Cheese
#   1           Cool Ranch
#   dtype: object
doritos.sort_values(ascending=False)



# Below, sort the doritos Series index in descending order.
# Make sure the operation is permanent.
# The Series should like this afterwards:
#
#   3          Salsa Verde
#   2         Nacho Cheese
#   1           Cool Ranch
#   0    Spicy Sweet Chili
#   dtype: object

3)
# Let's say I have a dictionary that maps guitar types
# to their colors
guitars_dict = {
    "Fender Telecaster": "Baby Blue",
    "Gibson Les Paul": "Sunburst",
    "ESP Eclipse": "Dark Green"
}

# Create a new Series object, passing in the guitars_dict dictionary as the data source.
# Assign the resulting Series to a "guitars" variable.
guitars=pd.Series(guitars_dict)

# Access the value for the index position of 0 within the "guitars" Series.
# Assign the value to a "fender_color" variable.
guitars[0]="fender_color"

# Access the value for the index label of "Gibson Les Paul" in the "guitars" Series.
# Assign the value to a "gibson_color" variable.
# guitars_dict["Gibson Les Paul"]=="gibson_color"

# Access the value for the index label of "ESP Eclipse" in the "guitars" Series.
# Assign the value to a "esp_color" variable.
# guitars_dict["ESP Eclipse"]="esp_color"